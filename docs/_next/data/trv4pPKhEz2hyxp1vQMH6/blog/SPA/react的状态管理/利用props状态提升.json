{"pageProps":{"pre":{"path":"_blogs/SPA/react的状态管理/利用context注入.md","url":"/blog/SPA/react的状态管理/利用context注入","title":"react的状态管理—利用context注入","author":"yrobot","keywords":"context,状态管理,react,注入,利用","createTime":1537545600000,"length":3383,"content":"<p><strong>本页目录：</strong><br><a href=\"#index\">场景思考</a><br><a href=\"#context\">利用context注入</a><br><a href=\"#result\">查看效果</a><br><a href=\"#code\">查看代码</a>  </p>\n<p><a id='index'></a></p>\n<h2 id=\"场景思考\">场景思考</h2>\n<p>现在我们用react去写一篇博客<br>博客包含 <code>标题</code> 和 <code>内容</code><br>而我期望<code>标题</code>和<code>内容</code>的颜色可以一键修改  </p>\n<p>当然最暴力的实现方式就是利用dom操作去被动的修改<br>但是有没有更优雅更可控的方式呢？  </p>\n<p>首先来看看项目的组件树：<br><img src=\"https://ws1.sinaimg.cn/large/006tNbRwgy1fvekxo7hlhj30c00aj0sy.jpg\" alt=\"\"></p>\n<p>那么有什么好的优雅的方式使<code>Title</code>和<code>Content</code>的颜色保持一致呢？<br>换句话说，怎么更好的管理<code>Title</code>和<code>Content</code>的状态呢？ </p>\n<h4 id=\"回顾上一节\">回顾上一节</h4>\n<p>上一节我们使用最基础的<a href=\"../%E5%88%A9%E7%94%A8props%E7%8A%B6%E6%80%81%E6%8F%90%E5%8D%87\">props状态提升</a>的方法<br>但当组件链很长的时候，新增一个状态就必须修改每个组件的props<br>那有没有跟直接的方法，搞一个共享状态，每个组件可以自由访问呢<br>react自带的context就是用来实现这一点的  </p>\n<p><a id='context'></a></p>\n<h2 id=\"利用context注入\">利用context注入</h2>\n<p>react的context可以代替props的传递工作  </p>\n<p><strong>context的作用：</strong> 将顶部\b组件的状态和方法与子组件共享  </p>\n<p><strong>context的使用方法：</strong>  </p>\n<ol>\n<li>利用<code>React.createContext()</code>生成一对<code>{Provider,Consumer}</code>  </li>\n<li>用生成的<code>Provider</code>包裹\b顶部组件，利用他props的value字段传入共享状态与方法  <pre><code> &lt;Provider value={{状态和方法}}&gt;\n     &lt;顶层组件&gt;\n &lt;/Provider&gt;\n</code></pre>\n</li>\n<li>用生成的<code>Consumer</code>包裹使用共享状态的组件，在Consumer内子组件外用函数传入共享的状态  <pre><code> &lt;Consumer&gt;\n     {value =&gt; (\n         &lt;子组件 使用value&gt;\n     )}\n &lt;/Consumer&gt;\n</code></pre>\n</li>\n<li>保证状态位于顶层组件的<code>state</code>中，而共享的方法要更新状态也是利用<code>setState</code>，这样UI层才会刷新  </li>\n</ol>\n<p><img src=\"https://ws4.sinaimg.cn/large/006tNbRwgy1fvhm1xim52j30yg0pqads.jpg\" alt=\"\"></p>\n<p><strong>context的优势：</strong> </p>\n<ol>\n<li>只需要在顶层组件和用到状态的子组件进行操作，省去了props状态提升中对中间组件的数据传递操作。代码更清晰。   </li>\n<li>无需引入第三方状态管理，学习成本也相对较低  </li>\n</ol>\n<p><strong>尽管context相对于props状态提升方便很多，\b但是react官网还是 <em>不建议</em> 使用context，因为context的API是实验性的，在未来的react版本中会被修改。</strong>  </p>\n<p><strong>在简单场景,推荐使用props状态提升</strong><br><strong>在较复杂的场景，应该考虑引入第三方状态管理(如Redux、Mobx)</strong>  </p>\n<p><a id='result'></a></p>\n<h2 id=\"查看效果\">查看效果</h2>\n<ol>\n<li><img src=\"https://ws3.sinaimg.cn/large/006tNbRwgy1fvhmmoieh4j31kw0nxdpk.jpg\" alt=\"\"></li>\n<li><img src=\"https://ws2.sinaimg.cn/large/006tNbRwgy1fvhmmukgfyj31kw0o2qcy.jpg\" alt=\"\"></li>\n</ol>\n<p><a id='code'></a></p>\n<h2 id=\"查看代码\">查看代码</h2>\n<p>mainColorContext.js暴露React.createContext：  </p>\n<pre><code>import React from &#39;react&#39;;\n\nexport const mainColorContext = React.createContext(\n    {\n        mainColor:&#39;black&#39;\n    } // 默认值\n);\n</code></pre>\n<p>BlogPage.js中引入mainColorContext，定义全局状态mainColor和方法changeMainColor()并传入Provider： </p>\n<pre><code>import {mainColorContext} from &#39;./mainColorContext.js&#39;\n\nclass BlogPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            mainColor: &#39;black&#39;\n        }\n    }\n    changeMainColor = (color) =&gt; {\n        this.setState({ //this的绑定//运行时//但是箭头函数没有this//直接沿着作用域链往上找找到BlogPage类的this //换成function就不行了，obj.func()会修改this指向为obj\n            mainColor: color\n        })\n    }\n    render() {\n        const { mainColor } = this.state;\n        return (\n            &lt;mainColorContext.Provider value={{mainColor,changeMainColor:this.changeMainColor}}&gt;\n                &lt;div className=&quot;blogContainer&quot;&gt;\n                    &lt;Header &gt;&lt;/Header&gt;\n                    &lt;Main&gt;&lt;/Main&gt;\n                &lt;/div&gt;\n            &lt;/mainColorContext.Provider&gt;\n        );\n    }\n}\n</code></pre>\n<p>Content.js组件中获取使用Consumer传递的数据和方法：</p>\n<pre><code>import {mainColorContext} from &#39;../../BlogPage/mainColorContext.js&#39;\n\nclass Content extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n    render() {\n        return (\n            &lt;mainColorContext.Consumer&gt;\n                {value =&gt; (\n                    &lt;div className=&quot;content&quot; style={{ color: value.mainColor }}&gt;\n                        文本...\n                    &lt;div className=&quot;button&quot; onClick={()=&gt;{value.changeMainColor(&#39;#&#39; + (Math.random() * 0xffffff &lt;&lt; 0).toString(16))}}&gt;切换颜色&lt;/div&gt;\n                    &lt;/div&gt;\n                )}\n            &lt;/mainColorContext.Consumer&gt;\n\n        );\n    }\n}\n</code></pre>\n"},"blog":{"path":"_blogs/SPA/react的状态管理/利用props状态提升.md","url":"/blog/SPA/react的状态管理/利用props状态提升","title":"react的状态管理—利用props状态提升","author":"yrobot","keywords":"状态管理,props,react,状态,提升,利用","createTime":1537200000000,"length":2341,"content":"<p><strong>本页目录：</strong><br><a href=\"#index\">场景思考</a><br><a href=\"#props\">利用props状态提升</a><br><a href=\"#result\">查看效果</a><br><a href=\"#code\">查看代码</a>  </p>\n<p><a id='index'></a></p>\n<h2 id=\"场景思考\">场景思考</h2>\n<p>现在我们用react去写一篇博客<br>博客包含 <code>标题</code> 和 <code>内容</code><br>而我期望<code>标题</code>和<code>内容</code>的颜色可以一键修改  </p>\n<p>当然最暴力的实现方式就是利用dom操作去被动的修改<br>但是有没有更优雅更可控的方式呢？  </p>\n<p>首先来看看项目的组件树：<br><img src=\"https://ws1.sinaimg.cn/large/006tNbRwgy1fvekxo7hlhj30c00aj0sy.jpg\" alt=\"\"></p>\n<p>那么有什么好的优雅的方式使<code>Title</code>和<code>Content</code>的颜色保持一致呢？<br>换句话说，怎么更好的管理<code>Title</code>和<code>Content</code>的状态呢？  </p>\n<p><a id='props'></a></p>\n<h2 id=\"利用props状态提升\">利用props状态提升</h2>\n<p>学习了react，就知道组件间数据交互最普遍的方式就是利用props传递<br>而目我们要做的就是Title和Content引用的是同一个颜色变量，而且在变量改变时组件自动重新渲染<br>利用react最基础的方法就是利用状态提升:<br>把一些共享的状态放在最顶端的组件中，子组件通过props去访问和修改这些状态  </p>\n<p>本场景中需要共享的状态只有一个<code>mainColor</code>和一个修改mainColor的函数<code>changeMainColor()</code><br>具体流程如下图：<br><img src=\"https://ws1.sinaimg.cn/large/006tNbRwgy1fvexnc4cbcj30ss0poacx.jpg\" alt=\"\">\n\b可以看到，需要在content和title中用mainColor，需要通过组件props层层传递到需要用状态的组件，函数也是同理  </p>\n<p><a id='result'></a></p>\n<h2 id=\"查看效果\">查看效果</h2>\n<ol>\n<li><img src=\"https://ws3.sinaimg.cn/large/006tNbRwgy1fvey3e0sw6j31kw0lmdoe.jpg\" alt=\"\"></li>\n<li><img src=\"https://ws1.sinaimg.cn/large/006tNbRwgy1fvey3n6qu4j31kw0n1aju.jpg\" alt=\"\"></li>\n<li><img src=\"https://ws4.sinaimg.cn/large/006tNbRwgy1fvey3xqxwpj31kw0nntin.jpg\" alt=\"\"></li>\n</ol>\n<p><a id='code'></a></p>\n<h2 id=\"查看代码\">查看代码</h2>\n<p>BlogPage中定义全局状态mainColor和方法changeMainColor()并传递： </p>\n<pre><code>class BlogPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            mainColor: &#39;black&#39;\n        }\n    }\n    changeMainColor = (color) =&gt; {\n        this.setState({\n            mainColor: color\n        })\n    }\n    render() {\n        const { mainColor } = this.state;\n        return (\n            &lt;div className=&quot;blogContainer&quot;&gt;\n                &lt;Header mainColor={mainColor}&gt;&lt;/Header&gt;\n                &lt;Main mainColor={mainColor} changeMainColor={this.changeMainColor}&gt;&lt;/Main&gt;\n            &lt;/div&gt;\n        );\n    }\n}\n</code></pre>\n<p>Content组件中使用props传递的数据和方法：</p>\n<pre><code>class Content extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n    randomColor = () =&gt; {\n        this.props.changeMainColor(&#39;#&#39; + (Math.random() * 0xffffff &lt;&lt; 0).toString(16));\n    }\n    render() {\n        const {mainColor}=this.props;\n        return (\n            &lt;div className=&quot;content&quot; style={{color:mainColor}}&gt;\n                内容...\n                &lt;div className=&quot;button&quot; onClick={this.randomColor}&gt;切换颜色&lt;/div&gt;\n            &lt;/div&gt;\n        );\n    }\n}\n</code></pre>\n<hr>\n<p><em>\b本章节部分参考<a href=\"http://huziketang.mangojuice.top/books/react/lesson29\">React.js 小书</a>，在此感谢！</em></p>\n"},"next":{"path":"_blogs/HTML&CSS/利用css绘制多边形/README.md","url":"/blog/HTML&CSS/利用css绘制多边形","title":"利用css绘制多边形","author":"yrobot","keywords":"css,多边形,绘制,利用","createTime":1535904000000,"length":6999,"content":"<p>本文主要讲解内容：  </p>\n<ol>\n<li>css绘制多边形的原理(一定要理解)  </li>\n<li>一些简单多边形的绘制示例  </li>\n</ol>\n<p><strong>本页目录：</strong><br><a href=\"#id1\">css绘制多边形的原理</a>  </p>\n<ul>\n<li><a href=\"#id11\">首先我们要知道css盒模型是什么样的</a></li>\n<li><a href=\"#id12\">然后我们还要理解border</a></li>\n<li><a href=\"#id13\">还要会用css伪元素</a></li>\n</ul>\n<p><a href=\"#id2\">css绘制正四边形</a><br><a href=\"#id3\">css绘制非正四边形</a><br><a href=\"#id4\">css绘制三角形</a><br><a href=\"#id5\">css绘制圆形</a><br><a href=\"#id6\">css绘制梯形</a><br><a href=\"#id7\">css绘制正五边形</a><br><a href=\"#id8\">css绘制正七边形</a>  </p>\n<p><a id='id1'></a></p>\n<h2 id=\"css绘制多边形的原理\">css绘制多边形的原理</h2>\n<p><a href=\"\" id=\"id11\"></a></p>\n<h3 id=\"首先我们要知道css盒模型是什么样的\"><strong>首先我们要知道css盒模型是什么样的</strong></h3>\n<p><img src=\"https://ws3.sinaimg.cn/large/0069RVTdgy1fuw4xid010j30a809aq38.jpg\" alt=\"\"><br>所谓的盒模型，可以理解为元素的表现内容，看上图可以发现：  </p>\n<pre><code>盒模型 = 内容 + padding + border + margin    \n</code></pre>\n<p>组成理解(<em>简单介绍</em> )：<br><code>内容</code> 元素内 文本、内元素 所包含的区域<br><code>padding</code> \b 内容 与 border 之间的距离，用于处理border和内容的表现关系<br><code>border</code>  边框，将内容包围的轮廓<br><code>margin</code>  元素 与 其他元素之间的距离，用于处理元素间的表现关系，位置样式  </p>\n<p>一般理解的 元素 由 内容、padding、border 组成，因为这3个影响到元素的表现样式。<br>css2中<code>width</code>的默认指向是内容宽度，而不是元素(包括padding、border)的宽度。<br>\b可以 利用 <code>box-sizing</code> 去修改width的指向：  </p>\n<ul>\n<li><code>box-sizing: content-box;</code> width、height指向内容<br>  <img src=\"https://ws2.sinaimg.cn/large/0069RVTdgy1fuw5olkw8wj303o010mx2.jpg\" alt=\"\"></li>\n<li><code>box-sizing: border-box;</code> width、height指向一般元素<br>  <img src=\"https://ws1.sinaimg.cn/large/0069RVTdgy1fuw5p6zb80j305q04wdgb.jpg\" alt=\"\"></li>\n</ul>\n<p>看下结果：<em>语言:stylus</em>    </p>\n<pre><code>.boxsize1\n    width 100px\n    height 80px\n    background-color #393\n    border 20px solid #999\n.boxsize2\n    width 100px\n    height 80px\n    background-color #393\n    border 20px solid #999\n    box-sizing border-box  //默认元素宽高指定，内容宽高自适应\n</code></pre>\n<p><img src=\"https://ws4.sinaimg.cn/large/0069RVTdgy1fuw6rtydjoj30ci0egweo.jpg\" alt=\"\">  </p>\n<p>本章我们就要利用元素的表现样式(内容、padding、border  )进行图形绘制<br><a href=\"\" id=\"id12\"></a></p>\n<h3 id=\"然后我们还要理解border\"><strong>然后我们还要理解border</strong></h3>\n<p>我们先来看一段有趣的代码：  </p>\n<pre><code>.square1 {\n  width: 0px;\n  height: 0px;\n  border-width: 40px 50px;\n  border-style: solid;\n  border-color: #f00 #008000 #808080 #00f;\n}\n</code></pre>\n<p>想想一下，这段代码的渲染效果是什么样的?<br>css是怎么处理border重叠的部分的？ \n好了，想清楚了，就来看一下结果吧。<br><img src=\"https://ws3.sinaimg.cn/large/0069RVTdgy1fuw65nqy85j309001u0sr.jpg\" alt=\"\"><br><img src=\"https://ws4.sinaimg.cn/large/0069RVTdgy1fuw60spn4lj306i05g0sm.jpg\" alt=\"\"><br>他的盒模型：<br><img src=\"https://ws4.sinaimg.cn/large/0069RVTdgy1fuw62e6752j307y05umxa.jpg\" alt=\"\"><br>可以得出规律：</p>\n<ol>\n<li>border的长 = 盒模型对应的长或宽  </li>\n<li>相邻方向border冲突时，进行等比均分。 </li>\n</ol>\n<p>在接下来的很多例子中都会用到border的这个规律<br><a href=\"\" id=\"id13\"></a></p>\n<h3 id=\"还要会用css伪元素\"><strong>还要会用css伪元素</strong></h3>\n<p><strong>css的伪元素：</strong> 之所以被称为伪元素，是因为他们不是真正的页面元素，html没有对应的元素，但是其所有用法和表现行为与真正的页面元素一样，可以对其使用诸如页面元素一样的css样式，表面上看上去貌似是页面的某些元素来展现，实际上是css样式展现的行为，因此被称为伪元素。   </p>\n<p>我们在绘制图形发现需要进行元素组装时，就可以利用伪元素 来减少对HTML元素的使用。 </p>\n<p><a href=\"https://www.cnblogs.com/wonyun/p/5807191.html\">css伪元素的用法</a></p>\n<p><a id='id2'></a></p>\n<h2 id=\"css绘制正四边形\">css绘制正四边形</h2>\n<p>绘制正四边形最简单的方法就是利用内容，直接使用width、height  </p>\n<pre><code>.square2 {\n  width: 80px;\n  height: 80px;\n  background-color: #393;\n}\n</code></pre>\n<p><img src=\"https://ws3.sinaimg.cn/large/0069RVTdgy1fuw6wmpdi1j309w092q31.jpg\" alt=\"\"></p>\n<p>当然利用border也可以  </p>\n<pre><code>.square3 {\n  width: 0px;\n  height: 0px;\n  border-width: 40px;\n  border-style: solid;\n  border-color: #008000;\n}\n</code></pre>\n<p><img src=\"https://ws3.sinaimg.cn/large/0069RVTdgy1fuw6ypx233j30a208s74d.jpg\" alt=\"\"></p>\n<p><a id='id3'></a></p>\n<h2 id=\"css绘制非正四边形\">css绘制非正四边形</h2>\n<h4 id=\"绘制平行四边形\">绘制平行四边形</h4>\n<p>平行四边形利用<a href=\"/blog/CSS3/CSS3-2D%E8%BD%AC%E6%8D%A2#14\">css3的倾斜函数skew()</a>比较方便  </p>\n<pre><code>.parallelogram {\n  width: 100px;\n  height: 80px;\n  background: #393;\n  -webkit-transform: skew(-30deg);\n  -moz-transform: skew(-30deg);\n  -o-transform: skew(-30deg);\n  transform: skew(-30deg);\n}\n</code></pre>\n<p><img src=\"https://ws2.sinaimg.cn/large/0069RVTdgy1fuw79w9e6dj30bk08cweo.jpg\" alt=\"\">   </p>\n<p>当然使用 <code>border</code> + <code>:after</code>伪类也是可以的  </p>\n<pre><code>.parallelogram2 {\n  width: 0px;\n  height: 0px;\n  border-bottom: 80px solid #393;\n  border-left: 80px solid transparent;\n}\n.parallelogram2:after {\n  display: block;\n  content: &#39;&#39;;\n  width: 0px;\n  height: 0px;\n  border-top: 80px solid #393;\n  border-right: 80px solid transparent;\n}\n</code></pre>\n<p><img src=\"https://ws3.sinaimg.cn/large/0069RVTdgy1fuw7opf0mhj30bq06qwee.jpg\" alt=\"\">  </p>\n<h4 id=\"绘制菱形\">绘制菱形</h4>\n<p>思路：绘制两个等边三角形，进行拼接（<code>height = sqr(3)*width/2</code>）</p>\n<pre><code>.rhombus {\n  width: 0px;\n  height: 0px;\n  border-bottom: 69.3px solid #393;\n  border-left: 40px solid transparent;\n  border-right: 40px solid transparent;\n}\n.rhombus:after {\n  display: block;\n  content: &#39;&#39;;\n  width: 0px;\n  width: 0px;\n  border-top: 69.3px solid #393;\n  border-left: 40px solid transparent;\n  border-right: 40px solid transparent;\n}\n</code></pre>\n<p><img src=\"https://ws4.sinaimg.cn/large/0069RVTdgy1fuwb07zx8zj308605o748.jpg\" alt=\"\"></p>\n<p><a id='id4'></a></p>\n<h2 id=\"css绘制三角形\">css绘制三角形</h2>\n<h4 id=\"绘制直角三角形\">绘制直角三角形</h4>\n<pre><code>.rightTriangle\n    width 0px\n    height 0px\n    border-bottom 80px solid #393 \n    border-left 80px solid transparent\n</code></pre>\n<p><img src=\"https://ws2.sinaimg.cn/large/0069RVTdgy1fuwcpx6dhfj306s06aa9x.jpg\" alt=\"\">  </p>\n<h4 id=\"绘制等边三角形\">绘制等边三角形</h4>\n<p>等边三角形的宽高比为 1 : sqr(3)/2<br>所以\b可以根据底边长计算三角形高<code>height = sqr(3)*width/2</code><br>本例中左右border宽为40，所以底边长为80，从而计算出底部border宽应为69.3  </p>\n<pre><code>.triangle\n    width 0px\n    height 0px\n    border-bottom 69.3px solid #393 \n    border-left 40px solid transparent\n    border-right 40px solid transparent\n</code></pre>\n<p><img src=\"https://ws1.sinaimg.cn/large/0069RVTdgy1fuwb2kyyzqj306g064746.jpg\" alt=\"\"></p>\n<p><a id='id5'></a></p>\n<h2 id=\"css绘制圆形\">css绘制圆形</h2>\n<p>圆形最简单的方式就是设置<code>border-radius</code>为50%  </p>\n<pre><code>.circle1\n    width 80px\n    height 80px\n    border-radius 50%\n    background-color #393\n</code></pre>\n<p><img src=\"https://ws1.sinaimg.cn/large/0069RVTdgy1fuwcsqggv5j306c068a9z.jpg\" alt=\"\"></p>\n<p>也可以使用border实现  </p>\n<pre><code>.circle2\n    width 0px\n    height 0px\n    border 40px solid #393 \n    border-radius 50%\n</code></pre>\n<p>\b哎？猜猜这时候设置padding是什么样子的</p>\n<pre><code>.circle3\n    width 0px\n    height 0px\n    border 40px solid #393 \n    border-radius 50%\n    padding 20px\n</code></pre>\n<p><img src=\"https://ws3.sinaimg.cn/large/0069RVTdgy1fuwcyjhdw6j308408874b.jpg\" alt=\"\"><br>看来border-radius把内外角度都设置了 </p>\n<p><a id='id6'></a></p>\n<h2 id=\"css绘制梯形\">css绘制梯形</h2>\n<pre><code>.trapezoid\n    width 40px\n    height 0px\n    border-top 40px solid #393 \n    border-left 20px solid transparent\n    border-right 20px solid transparent\n</code></pre>\n<p><img src=\"https://ws1.sinaimg.cn/large/0069RVTdgy1fuwd59x6bsj306w04gwec.jpg\" alt=\"\"></p>\n<p><a id='id7'></a></p>\n<h2 id=\"css绘制正五边形\">css绘制正五边形</h2>\n<p>正五边形可以拆分成上下两个部分：上边一个等腰三角形，下面一个等腰梯形，具体长宽计算这里不做介绍  </p>\n<pre><code>.pentagon {\n  width: 0px;\n  height: 0px;\n  border-top: 0px;\n  border-right: 81px solid transparent;\n  border-left: 81px solid transparent;\n  border-bottom: 59px solid #393;\n}\n.pentagon:after {\n  position: relative;\n  left: -81px;\n  top: 59px;\n  display: block;\n  content: &#39;&#39;;\n  width: 100px;\n  height: 0px;\n  border-top: 95px solid #393;\n  border-left: 31px solid transparent;\n  border-right: 31px solid transparent;\n}\n</code></pre>\n<p><img src=\"https://ws3.sinaimg.cn/large/0069RVTdgy1fuwdlbgoi3j30be0a8t8r.jpg\" alt=\"\"></p>\n<p><a id='id8'></a></p>\n<h2 id=\"css绘制正七边形\">css绘制正七边形</h2>\n<p>正七边形比较复杂，需要将整个图形分成3份来做<br><img src=\"https://ws1.sinaimg.cn/large/0069RVTdgy1fuwdo5l0qrj307s07974m.jpg\" alt=\"\"><br>上：等腰三角形<br>中：等腰梯形<br>下：等腰梯形  </p>\n<pre><code>.heptagon {\n  height: 0px;\n  width: 180px;\n  border-left: 22px solid transparent;\n  border-right: 22px solid transparent;\n  border-bottom: 97px solid #393;\n  margin-top: 63px;\n}\n.heptagon:before {\n  display: block;\n  content: &#39;&#39;;\n  width: 0px;\n  height: 0px;\n  border-right: 90px solid transparent;\n  border-left: 90px solid transparent;\n  border-bottom: 43px solid #393;\n  position: relative;\n  top: -43px;\n}\n.heptagon:after {\n  width: 100px;\n  height: 0px;\n  content: &#39;&#39;;\n  display: block;\n  border-top: 78px solid #393;\n  border-left: 62px solid transparent;\n  border-right: 62px solid transparent;\n  position: relative;\n  left: -22px;\n  bottom: -54px;\n}\n</code></pre>\n<p><img src=\"https://ws3.sinaimg.cn/large/0069RVTdgy1fuwe4xtv6lj30ec0dowen.jpg\" alt=\"\"></p>\n"}},"__N_SSG":true}