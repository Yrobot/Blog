{"pageProps":{"pre":{"path":"_blogs/HTML&CSS/CSS中可以和不可以继承的属性/README.md","url":"/blog/HTML&CSS/CSS中可以和不可以继承的属性","title":"CSS中可以和不可以继承的属性","author":"yrobot","keywords":"CSS,属性,继承","createTime":1535040000000,"length":2563,"content":"<p><strong>本页目录：</strong><br><a href=\"#id1\">无继承性的属性</a><br><a href=\"#id2\">有继承性的属性</a><br><a href=\"#id3\">所有元素可以继承的属性</a><br><a href=\"#id4\">内联元素可以继承的属性</a><br><a href=\"#id5\">块级元素可以继承的属性</a>    </p>\n<p><a id='id1'></a>  </p>\n<h2 id=\"无继承性的属性\">无继承性的属性</h2>\n<ol>\n<li>display：规定元素应该生成的框的类型  </li>\n<li>文本属性：<br>vertical-align：垂直文本对齐<br>text-decoration：规定添加到文本的装饰<br>text-shadow：文本阴影效果<br>white-space：空白符的处理<br>unicode-bidi：设置文本的方向  </li>\n<li>盒子模型的属性：width. height. margin . margin-top. margin-right. margin-bottom. margin-left. border. border-style. border-top-style. border-right-style. border-bottom-style. border-left-style. border-width. border-top-width. border-right-right. border-bottom-width. border-left-width. border-color. border-top-color. border-right-color. border-bottom-color. border-left-color. border-top. border-right. border-bottom. border-left. padding. padding-top. padding-right. padding-bottom. padding-left  </li>\n<li>背景属性：background. background-color. background-image. background-repeat. background-position. background-attachment  </li>\n<li>定位属性：float. clear. position. top. right. bottom. left. min-width. min-height. max-width. max-height. overflow. clip. z-index  </li>\n<li>生成内容属性：content. counter-reset. counter-increment  </li>\n<li>轮廓样式属性：outline-style. outline-width. outline-color. outline  </li>\n<li>页面样式属性：size. page-break-before. page-break-after  </li>\n<li>声音样式属性：pause-before. pause-after. pause. cue-before. cue-after. cue. play-during  </li>\n</ol>\n<p><a id='id2'></a>  </p>\n<h2 id=\"有继承性的属性\">有继承性的属性</h2>\n<ol>\n<li>字体系列属性<br>font：组合字体<br>font-family：规定元素的字体系列<br>font-weight：设置字体的粗细<br>font-size：设置字体的尺寸<br>font-style：定义字体的风格<br>font-variant：设置小型大写字母的字体显示文本，这意味着所有的小写字母均会被转换为大写，但是所有使用小型大写字体的字母与其余文本相比，其字体尺寸更小。<br>font-stretch：对当前的 font-family 进行伸缩变形。所有主流浏览器都不支持。<br>font-size-adjust：为某个元素规定一个 aspect 值，这样就可以保持首选字体的 x-height。  </li>\n<li>文本系列属性<br>text-indent：文本缩进<br>text-align：文本水平对齐<br>line-height：行高<br>word-spacing：增加或减少单词间的空白（即字间隔）<br>letter-spacing：增加或减少字符间的空白（字符间距）<br>text-transform：控制文本大小写<br>direction：规定文本的书写方向<br>color：文本颜色  </li>\n<li>元素可见性：visibility  </li>\n<li>表格布局属性：caption-side. border-collapse. border-spacing. empty-cells. table-layout  </li>\n<li>列表布局属性：list-style-type. list-style-image. list-style-position. list-style  </li>\n<li>生成内容属性：quotes  </li>\n<li>光标属性：cursor  </li>\n<li>页面样式属性：page. page-break-inside. windows. orphans  </li>\n<li>声音样式属性：speak. speak-punctuation. speak-numeral. speak-header. speech-rate. volume. voice-family. pitch. pitch-range. stress. richness. . azimuth. elevation  </li>\n</ol>\n<p><a id='id3'></a>  </p>\n<h2 id=\"所有元素可以继承的属性\">所有元素可以继承的属性</h2>\n<ol>\n<li>元素可见性：visibility</li>\n<li>光标属性：cursor  </li>\n</ol>\n<p><a id='id4'></a>  </p>\n<h2 id=\"内联元素可以继承的属性\">内联元素可以继承的属性</h2>\n<ol>\n<li>字体系列属性</li>\n<li>除text-indent、text-align之外的文本系列属性  </li>\n</ol>\n<p><a id='id5'></a>  </p>\n<h2 id=\"块级元素可以继承的属性\">块级元素可以继承的属性</h2>\n<ol>\n<li>text-indent、text-align</li>\n</ol>\n<hr>\n"},"blog":{"path":"_blogs/HTML&CSS/display属性/README.md","url":"/blog/HTML&CSS/display属性","title":"display 属性","author":"yrobot","keywords":"display,属性","createTime":1535040000000,"length":662,"content":"<p><strong>本页目录：</strong><br><a href=\"#display\">display有哪些值,以及作用</a><br><a href=\"#nest\">html元素嵌套规则</a>  </p>\n<p><a id='display'></a></p>\n<h2 id=\"display有哪些值以及作用\">display有哪些值,以及作用</h2>\n<ul>\n<li>block 块类型。默认宽度为父元素宽度，可设置宽高，换行显示。</li>\n<li>none 缺省值。像行内元素类型一样显示。</li>\n<li>inline 行内元素类型。默认宽度为内容宽度，__不可设置宽高、margin上下、padding上下__，同行显示。</li>\n<li>inline-block 默认宽度为内容宽度，可以设置宽高，同行显示。__元素间会有间隙__（HTML 中的换行符、空格符、制表符等合并为空白符，字体大小不为 0 的情况下，空白符自然占据一定的宽度，使用inline-block 会产生元素间的空隙）</li>\n<li>list-item 像块类型元素一样显示，并添加样式列表标记。</li>\n<li>table 此元素会作为块级表格来显示。</li>\n<li>inherit 规定应该从父元素继承display属性的值</li>\n</ul>\n<p><a id='nest'></a></p>\n<h2 id=\"html元素嵌套规则\">html元素嵌套规则</h2>\n<ol>\n<li>块级元素可以包含内联元素或某些块级元素，但内联元素不能包含块级元素，它只能包含其它内联元素。</li>\n<li>块级元素不能放在p里面。</li>\n<li>有几个特殊的块级元素只能包含内联元素，不能包含块级元素。如h1,h2,h3,h4,h5,h6,p,dt</li>\n<li>li内可以包含div</li>\n<li>块级元素与块级元素并列、内联元素与内联元素并列。</li>\n</ol>\n"},"next":{"path":"_blogs/JS/JS-DOM事件触发机制/README.md","url":"/blog/JS/JS-DOM事件触发机制","title":"JS-DOM事件触发机制","author":"yrobot","keywords":"DOM,JS,触发,机制,事件","createTime":1535040000000,"length":3266,"content":"<p><strong>本页目录：</strong><br><a href=\"#id1\">问题的起因</a><br><a href=\"#id2\">事件冒泡</a><br><a href=\"#id3\">事件捕获</a><br><a href=\"#id4\">addEventListener的第三个参数</a><br><a href=\"#id5\">事件捕获先还是事件冒泡先？</a>  </p>\n<hr>\n<p><a id='id'></a></p>\n<h2 id=\"问题的起因\">问题的起因</h2>\n<ul>\n<li>事件冒泡和事件捕获分别由微软和网景公司提出，这两个概念都是为了解决页面中事件流（事件发生顺序）的问题。  </li>\n<li>考虑下面这段代码，就不写html-&gt;head,body之类的代码了，自行脑补  <pre><code>&lt;div id=&quot;outer&quot;&gt;\n    &lt;p id=&quot;inner&quot;&gt;Click me!&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>上面的代码当中一个div元素当中有一个p子元素，如果两个元素都有一个click的处理函数，那么我们怎么才能知道哪一个函数会首先被触发呢？  </li>\n<li>为了解决这个问题微软和网景提出了两种几乎完全相反的概念：__事件冒泡 和 事件捕获__。 </li>\n</ul>\n<p><a id='id2'></a></p>\n<h2 id=\"事件冒泡\">事件冒泡</h2>\n<ul>\n<li><p>微软提出了名为事件冒泡(event bubbling)的事件流。事件冒泡可以形象地比喻为把一颗石头投入水中，泡泡会一直从水底冒出水面。也就是说，事件会从最内层的元素开始发生，一直向上传播，直到document对象。  </p>\n</li>\n<li><p>因此在事件冒泡的概念下在p元素上发生click事件的顺序应该是 <strong>p -&gt; div -&gt; body -&gt; html -&gt; document</strong> \n<a id='id3'></a></p>\n</li>\n</ul>\n<h2 id=\"事件捕获\">事件捕获</h2>\n<ul>\n<li><p>网景提出另一种事件流名为事件捕获(event capturing)。与事件冒泡相反，事件会从最外层开始发生，直到最具体的元素。</p>\n</li>\n<li><p>因此在事件捕获的概念下在p元素上发生click事件的顺序应该是 <strong>document -&gt; html -&gt; body -&gt; div -&gt; p</strong></p>\n</li>\n</ul>\n<p><a id='id4'></a></p>\n<h2 id=\"addeventlistener的第三个参数\">addEventListener的第三个参数</h2>\n<ul>\n<li>网景 和 微软 曾经的战争还是比较火热的，当时， 网景主张捕获方式，微软主张冒泡方式。后来 w3c 采用折中的方式，平息了战火，制定了统一的标准—— __先捕获再冒泡__。 </li>\n<li><strong>document -&gt; html -&gt; body -&gt; div -&gt; p -&gt; div -&gt; body -&gt; html -&gt; document</strong></li>\n</ul>\n<p>addEventListener的第三个参数就是为冒泡和捕获准备的.   </p>\n<p><code>element.addEventListener(event, function, useCapture)</code></p>\n<p>第一个参数<code>event</code>是需要绑定的事件(string,例：&#39;click&#39;)<br>第二个参数<code>function</code>是触发事件后要执行的函数<br>第三个参数<code>useCapture</code>默认值是false，表示在事件冒泡阶段调用事件处理函数; 如果参数为true，则表示在事件捕获阶段调用处理函数。  </p>\n<p><a id='id5'></a></p>\n<h2 id=\"事件捕获先还是事件冒泡先？\">事件捕获先还是事件冒泡先？</h2>\n<ul>\n<li><p>当事件捕获和事件冒泡一起存在的情况，事件又是如何触发呢？  </p>\n</li>\n<li><p>这里记被点击的DOM节点为<code>target</code>节点：  </p>\n<ol>\n<li><p><code>document</code> 往 <code>target</code>节点，捕获前进，遇到注册的捕获事件立即触发执行  </p>\n</li>\n<li><p>到达<code>target</code>节点，触发事件（对于<code>target</code>节点上，是先捕获还是先冒泡则捕获事件和冒泡事件的注册顺序，先注册先执行）  </p>\n</li>\n<li><p><code>target</code>节点 往 <code>document </code>方向，冒泡前进，遇到注册的冒泡事件立即触发</p>\n</li>\n</ol>\n</li>\n<li><p><strong>总结</strong> :  </p>\n</li>\n</ul>\n<ol>\n<li>对于非target节点则先执行捕获在执行冒泡  </li>\n<li>对于target节点则是先执行先注册的事件，无论冒泡还是捕获</li>\n</ol>\n<h4 id=\"例子\">例子</h4>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;TestJSevent&lt;/title&gt;\n    &lt;style&gt;\n        #son {\n            width: 100px;\n            height: 100px;\n            background-color: #0f0;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div id=&quot;father&quot;&gt;\n        &lt;div id=&quot;mather&quot;&gt;\n            &lt;div id=&quot;son&quot;&gt;&lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div id=&quot;text&quot;&gt;&lt;/div&gt;\n    &lt;script&gt;  \n        var Son = document.getElementById(&quot;son&quot;);\n        var Father = document.getElementById(&quot;father&quot;);\n        function Click(Id, Type) {\n            document.getElementById(&quot;text&quot;).innerHTML += Id + &quot;  &quot; + Type + &quot; clicked  ||   &quot;;\n        }\n        Son.addEventListener(&quot;click&quot;, function () { Click(&quot;son&quot;, &quot;false&quot;) }, false);\n        Son.addEventListener(&quot;click&quot;, function () { Click(&quot;son&quot;, &quot;true&quot;) }, true);\n        Father.addEventListener(&quot;click&quot;, function () { Click(&quot;father&quot;, &quot;true&quot;) }, true);\n        Father.addEventListener(&quot;click&quot;, function () { Click(&quot;father&quot;, &quot;false&quot;) }, false);\n        mather.addEventListener(&quot;click&quot;, function () { Click(&quot;mather&quot;, &quot;true&quot;) }, true);\n        mather.addEventListener(&quot;click&quot;, function () { Click(&quot;mather&quot;, &quot;false&quot;) }, false);  \n    &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n<p>输出：\nfather true clicked || mather true clicked || son false clicked || son true clicked || mather false clicked || father false clicked ||\n<br><br></p>\n<h4 id=\"ie浏览器兼容\">IE浏览器兼容</h4>\n<p>IE浏览器对addEventListener兼容性并不算太好，只有IE9以上可以使用。要兼容旧版本的IE浏览器，可以使用IE的attachEvent函数</p>\n<p><code>object.attachEvent(event, function)</code></p>\n<p>两个参数与<code>addEventListener</code>相似，分别是事件和处理函数，默认是事件冒泡阶段调用处理函数，要注意的是，写事件名时候要加上&quot;<code>on</code>&quot;前缀（&quot;<code>onload</code>&quot;、&quot;<code>onclick</code>&quot;等）。</p>\n"}},"__N_SSG":true}