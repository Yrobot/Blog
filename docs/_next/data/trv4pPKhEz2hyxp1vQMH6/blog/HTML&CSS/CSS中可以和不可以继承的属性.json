{"pageProps":{"pre":{"path":"_blogs/HTML&CSS/HTML的meta标签/Meta标签—Viewport/README.md","url":"/blog/HTML&CSS/HTML的meta标签/Meta标签—Viewport","title":"Meta标签—Viewport","author":"yrobot","keywords":"Meta,Viewport,标签","createTime":1535126400000,"length":4409,"content":"<p><strong>本页目录：</strong><br><a href=\"#id1\">Viewport概念</a><br><a href=\"#id2\">看下效果</a><br><a href=\"#id3\">关于缩放</a><br><a href=\"#id4\">布局视口的大小</a><br><a href=\"#id5\">javascript相关</a><br><a href=\"#id6\">总结</a>  </p>\n<p><a id='id1'></a></p>\n<h2 id=\"viewport概念\">Viewport概念</h2>\n<h4 id=\"三个视口\">三个视口</h4>\n<ol>\n<li>布局视口  <ul>\n<li>本文的重点，meta属性设置的对象。</li>\n<li>布局视口 可以理解为\b\b\b包含整个页面的区域，所以布局视口可能比可视区域还要大。\n<img src=\"https://ws2.sinaimg.cn/large/006tNbRwgy1fun61b567vj317g0wan4b.jpg\" alt=\"\"></li>\n</ul>\n</li>\n<li>视觉视口<ul>\n<li>视觉视口 是用户正在看到的网站的区域。用户可以通过缩放来操作视觉视口，同时不会影响布局视口，布局视口仍保持原来的宽度。\n<img src=\"https://ws3.sinaimg.cn/large/006tNbRwgy1fun62jqutdj317c0w8gsh.jpg\" alt=\"\">\n<a href=\"\" id=\"ideal-viewport\"></a></li>\n</ul>\n</li>\n<li>理想视口<ul>\n<li>移动端浏览器还有一个理想视口的概念。其宽度就是\b下文提到的 <strong>理想视口宽度</strong></li>\n<li>布局视口的默认宽度并不是一个理想的宽度，大家从上面的图就可以看出来了，所以苹果公司就引进了理想窗口这个概念。</li>\n<li>理想视口就是\b最理想的布局视口的尺寸。将布局视口设置成理想视口，页面就能够适应到合适的尺寸，用户就不再需要自己去缩放和拖动网页了。</li>\n<li>在\b移动端，只有布局视口和理想视口一样大时，移动端显示在和PC预期一样，否则浏览器会缩放(不是修改布局视口，而是将整个内容缩小或放大)，以适应移动端显示。从而导致了移动端字体过小等问题。\n<img src=\"https://ws4.sinaimg.cn/large/006tNbRwgy1fun6qqa0xrj30my04s3z4.jpg\" alt=\"\"></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"以下viewport默认指的是布局视口\"><strong>以下viewport默认指的是布局视口</strong></h3>\n<ul>\n<li>通俗的讲，viewport就是html的\b外层区域，在使用百分比布局时，html设置width：100%就是根据viewport宽度来的，所以viewport可以\b理解为html的父素。\n<a href=\"\" id=\"default\"></a></li>\n</ul>\n<h4 id=\"默认viewport的宽度\">默认viewport的宽度</h4>\n<ul>\n<li>下图列出了一些设备上浏览器的默认viewport的宽度。</li>\n<li>要注意的是在PC浏览器中，布局视口和视觉视口是相同的，布局视口默认视口宽度会被覆盖。\n<img src=\"https://ws4.sinaimg.cn/large/006tNbRwgy1fun4nndiqkj30r304caar.jpg\" alt=\"\">\n<a href=\"\" id=\"initial-scale\"></a></li>\n</ul>\n<h4 id=\"initial-scale\">initial-scale</h4>\n<ul>\n<li>而viewport还有一个initial-scale的概念，这个initial-scale是一个数值，用于记录 <a href=\"#ideal-viewport\">理想视口宽度</a> / viewport宽度 的值。即 initial-scale = 理想视口宽度 / viewport宽度 。</li>\n<li>而每个设备的 理想视口宽度 又是固定的，所以通过设置initial-scale就可确定viewport的值。以下是一些设备 理想视口宽度 的\b值：\n<img src=\"https://ws4.sinaimg.cn/large/006tNbRwgy1fun4n9lduzj30pw04cgme.jpg\" alt=\"\"></li>\n</ul>\n<p><a id='id2'></a></p>\n<h2 id=\"看下效果\">看下效果</h2>\n<h4 id=\"代码：\">代码：</h4>\n<pre><code>&lt;body&gt;\n    &lt;p class=&quot;title&quot;&gt;My Title&lt;/p&gt;\n    &lt;p class=&quot;content&quot;&gt;Apple documentation: Using the Viewport Meta Tag\n        Mozilla: Using the viewport meta tag to control layout on mobile browsers\n        quirksmode.org: A tale of two viewports\n        w3.org Mobile Web Application Best Practices: Use Meta Viewport Element To Identify Desired Screen Size\n        Quick Tip: Never use maximum-scale=1.0 on the A11y Project\n        Tim Kadlec explains IE10 Snap Mode and Responsive Design\n        The @viewport rule proposal&lt;/p&gt;\n&lt;/body&gt;\n</code></pre>\n<h4 id=\"pc端chrome显示效果：\">PC端Chrome显示效果：</h4>\n<p><img src=\"https://ws4.sinaimg.cn/large/006tNbRwgy1fum93ooxmzj31720j6q7b.jpg\" alt=\"\"></p>\n<ul>\n<li>width：775px<h4 id=\"移动端不加meta的viewport标签：\">移动端不加meta的Viewport标签：</h4>\n<img src=\"https://ws4.sinaimg.cn/large/006tNbRwgy1fum9642gi8j30ie0fgdil.jpg\" alt=\"\"></li>\n<li>width：980px（iPhone6的<a href=\"#default\">viewport的默认宽度</a>为980px）<h4 id=\"移动端加meta的viewport标签：\">移动端加meta的Viewport标签：</h4>\n</li>\n<li>head添加\b标签\b：<code>&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1.0&quot;&gt;</code>\n<img src=\"https://ws1.sinaimg.cn/large/006tNbRwgy1fum9bgbjjgj30ig0so78a.jpg\" alt=\"\"></li>\n<li>width：375px (iphone6设备的 理想视口宽度 为375px，所以<code>viewport = 375px / 1</code>, 参考<a href=\"#initial-scale\">initial-scale</a>)<h4 id=\"差别\">差别</h4>\n</li>\n<li>使用了<code>initial-scale=1.0</code>之后，浏览器的viewport从默认的980px变为\b理想视口宽度375px的1：1关系的宽度375px</li>\n<li>\b设置<code>initial-scale=2.0</code>后viewport变为<code>375px/2=187px</code>\n<img src=\"https://ws2.sinaimg.cn/large/006tNbRwgy1fumb1i32fjj30i60gimy4.jpg\" alt=\"\"></li>\n<li>可见 <strong><code>viewport宽度 = 理想视口宽度 / initial-scale值</code></strong></li>\n</ul>\n<p><a id='id3'></a></p>\n<h2 id=\"关于缩放\">关于缩放</h2>\n<ul>\n<li><p>手机上放大，视觉视口缩小，布局视口不变，所以我们看到的css布局是不变的。  </p>\n</li>\n<li><p>PC上放大，视觉视口缩小，由于PC的布局视口和视觉视口是相同的，所以布局视口也变小，这就是我们在桌面端缩放的时候样式有时候会错乱的原因。  </p>\n</li>\n<li><p>据说移动端css布局不改变也是因为移动端进行重绘的成本太高  </p>\n</li>\n</ul>\n<p><a id='id4'></a></p>\n<h2 id=\"布局视口的大小\">布局视口的大小</h2>\n<p>下面根据页面的解析过程来说明一下，浏览器在页面布局时的计算viewport的流程：   </p>\n<p><strong>没有viewport</strong>  </p>\n<ul>\n<li>当页面没有声明viewport时，手机浏览器会取980px作为默认viewport的width值（IE/BlackBerry：1024px），然后全部显示，所以 默认的scale值 = 理想视口宽度  / 默认viewport宽度 。  </li>\n</ul>\n<p><strong>存在viewport</strong><br>当页面声明了viewport标签时，存在以下情况：  </p>\n<ul>\n<li>仅对于<code>width=device-width</code>，则viewport的宽高采用 理想视口 的尺寸(iPhone，iPad横屏时宽度是 理想视口 的宽度，而非高度)</li>\n<li>仅对于<code>initial-scale=1</code>，则viewport的宽高采用 理想视口 的尺寸( IE横屏时宽度是 理想视口 的宽度，而非高度)</li>\n<li>单独设置<code>width=x</code>或者<code>initial-scale=x</code>时，可以通过width直接获得或者通过initial-scale（理想视口宽度/initial-scale）计算出viewport的尺寸，需要注意的是viewport是有范围的(最小: 1/5 * 理想视口宽度)，所以当超出尺寸范围时，浏览器会选择相应的最大值或者最小值。</li>\n<li>如果width和initial-scale都存在时，会根据initial-scale计算出来的结果（理想视口宽度/initial-scale）与width值进行比较，取较大的值。（而Android Webkit则采用width值，IE永远认为<code>initial-scale=1</code>，但是需要注意layout的取值范围）。</li>\n</ul>\n<p><a id='id5'></a></p>\n<h2 id=\"javascript相关\">javascript相关</h2>\n<p>厂商间基本遵循的规范：  </p>\n<ul>\n<li><code>document.documentElement.clientWidth</code>： 表示 __布局窗口宽度__，可进行类似媒体查询；</li>\n<li><code>window.innerWidth</code>：表示 __视觉窗口宽度__，一般不会用； </li>\n<li><code>screen.width</code>: 表示 __理想窗口宽度__，兼容性据说差别很大；一般没啥用； </li>\n<li><code>orientationchange</code>事件，只要设备改变了方向都会触发，兼容性好；  </li>\n<li>移动端最好不要用<code>resize</code>事件，支持很差;  </li>\n</ul>\n<p>可以通过js模拟类似media查询的功能，在布局足够宽的时候才加载某些第三方组件：  </p>\n<pre><code>if(document.documentElement.clientWidth &gt;=600) {\n    // 加载组件\n}\n</code></pre>\n<p><a id='id6'></a></p>\n<h2 id=\"总结\">总结</h2>\n<ol>\n<li>影响显示排版的是布局视口，布局视口变了，整个页面排版位置才会改变。</li>\n<li>一般移动端进行适配：<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0,userscalable=no&quot;&gt;</code></li>\n<li>当然还可以\b利用js获取布局视口大小，进一步设置，适配出自己想要的效果。</li>\n</ol>\n"},"blog":{"path":"_blogs/HTML&CSS/CSS中可以和不可以继承的属性/README.md","url":"/blog/HTML&CSS/CSS中可以和不可以继承的属性","title":"CSS中可以和不可以继承的属性","author":"yrobot","keywords":"CSS,属性,继承","createTime":1535040000000,"length":2563,"content":"<p><strong>本页目录：</strong><br><a href=\"#id1\">无继承性的属性</a><br><a href=\"#id2\">有继承性的属性</a><br><a href=\"#id3\">所有元素可以继承的属性</a><br><a href=\"#id4\">内联元素可以继承的属性</a><br><a href=\"#id5\">块级元素可以继承的属性</a>    </p>\n<p><a id='id1'></a>  </p>\n<h2 id=\"无继承性的属性\">无继承性的属性</h2>\n<ol>\n<li>display：规定元素应该生成的框的类型  </li>\n<li>文本属性：<br>vertical-align：垂直文本对齐<br>text-decoration：规定添加到文本的装饰<br>text-shadow：文本阴影效果<br>white-space：空白符的处理<br>unicode-bidi：设置文本的方向  </li>\n<li>盒子模型的属性：width. height. margin . margin-top. margin-right. margin-bottom. margin-left. border. border-style. border-top-style. border-right-style. border-bottom-style. border-left-style. border-width. border-top-width. border-right-right. border-bottom-width. border-left-width. border-color. border-top-color. border-right-color. border-bottom-color. border-left-color. border-top. border-right. border-bottom. border-left. padding. padding-top. padding-right. padding-bottom. padding-left  </li>\n<li>背景属性：background. background-color. background-image. background-repeat. background-position. background-attachment  </li>\n<li>定位属性：float. clear. position. top. right. bottom. left. min-width. min-height. max-width. max-height. overflow. clip. z-index  </li>\n<li>生成内容属性：content. counter-reset. counter-increment  </li>\n<li>轮廓样式属性：outline-style. outline-width. outline-color. outline  </li>\n<li>页面样式属性：size. page-break-before. page-break-after  </li>\n<li>声音样式属性：pause-before. pause-after. pause. cue-before. cue-after. cue. play-during  </li>\n</ol>\n<p><a id='id2'></a>  </p>\n<h2 id=\"有继承性的属性\">有继承性的属性</h2>\n<ol>\n<li>字体系列属性<br>font：组合字体<br>font-family：规定元素的字体系列<br>font-weight：设置字体的粗细<br>font-size：设置字体的尺寸<br>font-style：定义字体的风格<br>font-variant：设置小型大写字母的字体显示文本，这意味着所有的小写字母均会被转换为大写，但是所有使用小型大写字体的字母与其余文本相比，其字体尺寸更小。<br>font-stretch：对当前的 font-family 进行伸缩变形。所有主流浏览器都不支持。<br>font-size-adjust：为某个元素规定一个 aspect 值，这样就可以保持首选字体的 x-height。  </li>\n<li>文本系列属性<br>text-indent：文本缩进<br>text-align：文本水平对齐<br>line-height：行高<br>word-spacing：增加或减少单词间的空白（即字间隔）<br>letter-spacing：增加或减少字符间的空白（字符间距）<br>text-transform：控制文本大小写<br>direction：规定文本的书写方向<br>color：文本颜色  </li>\n<li>元素可见性：visibility  </li>\n<li>表格布局属性：caption-side. border-collapse. border-spacing. empty-cells. table-layout  </li>\n<li>列表布局属性：list-style-type. list-style-image. list-style-position. list-style  </li>\n<li>生成内容属性：quotes  </li>\n<li>光标属性：cursor  </li>\n<li>页面样式属性：page. page-break-inside. windows. orphans  </li>\n<li>声音样式属性：speak. speak-punctuation. speak-numeral. speak-header. speech-rate. volume. voice-family. pitch. pitch-range. stress. richness. . azimuth. elevation  </li>\n</ol>\n<p><a id='id3'></a>  </p>\n<h2 id=\"所有元素可以继承的属性\">所有元素可以继承的属性</h2>\n<ol>\n<li>元素可见性：visibility</li>\n<li>光标属性：cursor  </li>\n</ol>\n<p><a id='id4'></a>  </p>\n<h2 id=\"内联元素可以继承的属性\">内联元素可以继承的属性</h2>\n<ol>\n<li>字体系列属性</li>\n<li>除text-indent、text-align之外的文本系列属性  </li>\n</ol>\n<p><a id='id5'></a>  </p>\n<h2 id=\"块级元素可以继承的属性\">块级元素可以继承的属性</h2>\n<ol>\n<li>text-indent、text-align</li>\n</ol>\n<hr>\n"},"next":{"path":"_blogs/HTML&CSS/display属性/README.md","url":"/blog/HTML&CSS/display属性","title":"display 属性","author":"yrobot","keywords":"display,属性","createTime":1535040000000,"length":662,"content":"<p><strong>本页目录：</strong><br><a href=\"#display\">display有哪些值,以及作用</a><br><a href=\"#nest\">html元素嵌套规则</a>  </p>\n<p><a id='display'></a></p>\n<h2 id=\"display有哪些值以及作用\">display有哪些值,以及作用</h2>\n<ul>\n<li>block 块类型。默认宽度为父元素宽度，可设置宽高，换行显示。</li>\n<li>none 缺省值。像行内元素类型一样显示。</li>\n<li>inline 行内元素类型。默认宽度为内容宽度，__不可设置宽高、margin上下、padding上下__，同行显示。</li>\n<li>inline-block 默认宽度为内容宽度，可以设置宽高，同行显示。__元素间会有间隙__（HTML 中的换行符、空格符、制表符等合并为空白符，字体大小不为 0 的情况下，空白符自然占据一定的宽度，使用inline-block 会产生元素间的空隙）</li>\n<li>list-item 像块类型元素一样显示，并添加样式列表标记。</li>\n<li>table 此元素会作为块级表格来显示。</li>\n<li>inherit 规定应该从父元素继承display属性的值</li>\n</ul>\n<p><a id='nest'></a></p>\n<h2 id=\"html元素嵌套规则\">html元素嵌套规则</h2>\n<ol>\n<li>块级元素可以包含内联元素或某些块级元素，但内联元素不能包含块级元素，它只能包含其它内联元素。</li>\n<li>块级元素不能放在p里面。</li>\n<li>有几个特殊的块级元素只能包含内联元素，不能包含块级元素。如h1,h2,h3,h4,h5,h6,p,dt</li>\n<li>li内可以包含div</li>\n<li>块级元素与块级元素并列、内联元素与内联元素并列。</li>\n</ol>\n"}},"__N_SSG":true}