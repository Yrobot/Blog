{"pageProps":{"pre":{"path":"_blogs/JS/JS-DOM事件触发机制/README.md","url":"/blog/JS/JS-DOM事件触发机制","title":"JS-DOM事件触发机制","author":"yrobot","keywords":"DOM,JS,触发,机制,事件","createTime":1535040000000,"length":3266,"content":"<p><strong>本页目录：</strong><br><a href=\"#id1\">问题的起因</a><br><a href=\"#id2\">事件冒泡</a><br><a href=\"#id3\">事件捕获</a><br><a href=\"#id4\">addEventListener的第三个参数</a><br><a href=\"#id5\">事件捕获先还是事件冒泡先？</a>  </p>\n<hr>\n<p><a id='id'></a></p>\n<h2 id=\"问题的起因\">问题的起因</h2>\n<ul>\n<li>事件冒泡和事件捕获分别由微软和网景公司提出，这两个概念都是为了解决页面中事件流（事件发生顺序）的问题。  </li>\n<li>考虑下面这段代码，就不写html-&gt;head,body之类的代码了，自行脑补  <pre><code>&lt;div id=&quot;outer&quot;&gt;\n    &lt;p id=&quot;inner&quot;&gt;Click me!&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>上面的代码当中一个div元素当中有一个p子元素，如果两个元素都有一个click的处理函数，那么我们怎么才能知道哪一个函数会首先被触发呢？  </li>\n<li>为了解决这个问题微软和网景提出了两种几乎完全相反的概念：__事件冒泡 和 事件捕获__。 </li>\n</ul>\n<p><a id='id2'></a></p>\n<h2 id=\"事件冒泡\">事件冒泡</h2>\n<ul>\n<li><p>微软提出了名为事件冒泡(event bubbling)的事件流。事件冒泡可以形象地比喻为把一颗石头投入水中，泡泡会一直从水底冒出水面。也就是说，事件会从最内层的元素开始发生，一直向上传播，直到document对象。  </p>\n</li>\n<li><p>因此在事件冒泡的概念下在p元素上发生click事件的顺序应该是 <strong>p -&gt; div -&gt; body -&gt; html -&gt; document</strong> \n<a id='id3'></a></p>\n</li>\n</ul>\n<h2 id=\"事件捕获\">事件捕获</h2>\n<ul>\n<li><p>网景提出另一种事件流名为事件捕获(event capturing)。与事件冒泡相反，事件会从最外层开始发生，直到最具体的元素。</p>\n</li>\n<li><p>因此在事件捕获的概念下在p元素上发生click事件的顺序应该是 <strong>document -&gt; html -&gt; body -&gt; div -&gt; p</strong></p>\n</li>\n</ul>\n<p><a id='id4'></a></p>\n<h2 id=\"addeventlistener的第三个参数\">addEventListener的第三个参数</h2>\n<ul>\n<li>网景 和 微软 曾经的战争还是比较火热的，当时， 网景主张捕获方式，微软主张冒泡方式。后来 w3c 采用折中的方式，平息了战火，制定了统一的标准—— __先捕获再冒泡__。 </li>\n<li><strong>document -&gt; html -&gt; body -&gt; div -&gt; p -&gt; div -&gt; body -&gt; html -&gt; document</strong></li>\n</ul>\n<p>addEventListener的第三个参数就是为冒泡和捕获准备的.   </p>\n<p><code>element.addEventListener(event, function, useCapture)</code></p>\n<p>第一个参数<code>event</code>是需要绑定的事件(string,例：&#39;click&#39;)<br>第二个参数<code>function</code>是触发事件后要执行的函数<br>第三个参数<code>useCapture</code>默认值是false，表示在事件冒泡阶段调用事件处理函数; 如果参数为true，则表示在事件捕获阶段调用处理函数。  </p>\n<p><a id='id5'></a></p>\n<h2 id=\"事件捕获先还是事件冒泡先？\">事件捕获先还是事件冒泡先？</h2>\n<ul>\n<li><p>当事件捕获和事件冒泡一起存在的情况，事件又是如何触发呢？  </p>\n</li>\n<li><p>这里记被点击的DOM节点为<code>target</code>节点：  </p>\n<ol>\n<li><p><code>document</code> 往 <code>target</code>节点，捕获前进，遇到注册的捕获事件立即触发执行  </p>\n</li>\n<li><p>到达<code>target</code>节点，触发事件（对于<code>target</code>节点上，是先捕获还是先冒泡则捕获事件和冒泡事件的注册顺序，先注册先执行）  </p>\n</li>\n<li><p><code>target</code>节点 往 <code>document </code>方向，冒泡前进，遇到注册的冒泡事件立即触发</p>\n</li>\n</ol>\n</li>\n<li><p><strong>总结</strong> :  </p>\n</li>\n</ul>\n<ol>\n<li>对于非target节点则先执行捕获在执行冒泡  </li>\n<li>对于target节点则是先执行先注册的事件，无论冒泡还是捕获</li>\n</ol>\n<h4 id=\"例子\">例子</h4>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;TestJSevent&lt;/title&gt;\n    &lt;style&gt;\n        #son {\n            width: 100px;\n            height: 100px;\n            background-color: #0f0;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div id=&quot;father&quot;&gt;\n        &lt;div id=&quot;mather&quot;&gt;\n            &lt;div id=&quot;son&quot;&gt;&lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div id=&quot;text&quot;&gt;&lt;/div&gt;\n    &lt;script&gt;  \n        var Son = document.getElementById(&quot;son&quot;);\n        var Father = document.getElementById(&quot;father&quot;);\n        function Click(Id, Type) {\n            document.getElementById(&quot;text&quot;).innerHTML += Id + &quot;  &quot; + Type + &quot; clicked  ||   &quot;;\n        }\n        Son.addEventListener(&quot;click&quot;, function () { Click(&quot;son&quot;, &quot;false&quot;) }, false);\n        Son.addEventListener(&quot;click&quot;, function () { Click(&quot;son&quot;, &quot;true&quot;) }, true);\n        Father.addEventListener(&quot;click&quot;, function () { Click(&quot;father&quot;, &quot;true&quot;) }, true);\n        Father.addEventListener(&quot;click&quot;, function () { Click(&quot;father&quot;, &quot;false&quot;) }, false);\n        mather.addEventListener(&quot;click&quot;, function () { Click(&quot;mather&quot;, &quot;true&quot;) }, true);\n        mather.addEventListener(&quot;click&quot;, function () { Click(&quot;mather&quot;, &quot;false&quot;) }, false);  \n    &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n<p>输出：\nfather true clicked || mather true clicked || son false clicked || son true clicked || mather false clicked || father false clicked ||\n<br><br></p>\n<h4 id=\"ie浏览器兼容\">IE浏览器兼容</h4>\n<p>IE浏览器对addEventListener兼容性并不算太好，只有IE9以上可以使用。要兼容旧版本的IE浏览器，可以使用IE的attachEvent函数</p>\n<p><code>object.attachEvent(event, function)</code></p>\n<p>两个参数与<code>addEventListener</code>相似，分别是事件和处理函数，默认是事件冒泡阶段调用处理函数，要注意的是，写事件名时候要加上&quot;<code>on</code>&quot;前缀（&quot;<code>onload</code>&quot;、&quot;<code>onclick</code>&quot;等）。</p>\n"},"blog":{"path":"_blogs/JS/JS函数与闭包/README.md","url":"/blog/JS/JS函数与闭包","title":"JS函数与闭包","author":"yrobot","keywords":"闭包,JS,函数","createTime":1535040000000,"length":1919,"content":"<p><strong>本页目录：</strong><br><a href=\"#func\">JS函数</a><br><a href=\"#bibao\">闭包</a>  </p>\n<p><a id='func'></a></p>\n<h2 id=\"js函数\">JS函数</h2>\n<h4 id=\"1-js函数的scope\">1. <strong>js函数的[[scope]]</strong></h4>\n<ul>\n<li>每个javascript函数都是一个对象，对象中有些属性我们可以访问，但有些仅供javascript引擎存取，比如[[scope]]，他就是我们所指的作用域，其中储存了 __运行期上下文的集合__。</li>\n<li>可以将[[scope]]理解为函数仓库链，函数寻找变量的时候就根据这个链来查找。  </li>\n</ul>\n<h4 id=\"2-运行期上下文\">2. <strong>运行期上下文</strong></h4>\n<ul>\n<li>函数执行前创建的对象（AO=运行期上下文：理解为本函数自带的仓库），用于定义函数运行时的环境。函数被多次调用时，会创建多个运行期上下文。</li>\n<li>当函数执行完毕，其运行期上下文引用被自动销毁（只是切断引用，其AO仍然存在，AO只有在没有被函数链接时才被回收）。</li>\n</ul>\n<h4 id=\"3-运行期上下文如何从内存中销毁\">3. <strong>运行期上下文如何从内存中销毁</strong></h4>\n<ul>\n<li>当此上下文没有被任何函数链接时，js引擎会自动将其回收。但只要还有函数在引用此上下文（存在闭包的情况），则此上下文不会被回收。</li>\n<li>所以只要通过 <strong>将闭包变量设置为等于null</strong> 解除该函数（以及其上下文）的引用，就等于通知垃圾回收例程将其清除。</li>\n</ul>\n<h4 id=\"4-函数如何查找变量\">4. <strong>函数如何查找变量</strong></h4>\n<ul>\n<li>从[[scope]]作用域链的顶端开始向下查找。即从自身\b的执行器上下文开始找变量，未找到则转向[[scope]]的下一个上下文。 </li>\n</ul>\n<h4 id=\"例子\">例子</h4>\n<ul>\n<li><p>例1：<br><img src=\"https://ws4.sinaimg.cn/large/006tNbRwgy1fukrtxws7nj30jf0o0n3w.jpg\" alt=\"\"><br><img src=\"https://ws3.sinaimg.cn/large/006tNbRwgy1fukru71y2pj30s30lhqpc.jpg\" alt=\"\"><br><img src=\"https://ws4.sinaimg.cn/large/006tNbRwgy1fukrucycgnj30tl0nekhv.jpg\" alt=\"\">  </p>\n</li>\n<li><p>例2：<br><img src=\"https://ws4.sinaimg.cn/large/006tNbRwgy1fukrw1ajtzj30ki0m2wr1.jpg\" alt=\"\"><br><img src=\"https://ws4.sinaimg.cn/large/006tNbRwgy1fukrw1ajtzj30ki0m2wr1.jpg\" alt=\"\">  </p>\n</li>\n</ul>\n<p><a id='bibao'></a></p>\n<h2 id=\"闭包\">闭包</h2>\n<ul>\n<li><strong>闭包是指 有权访问另一个函数作用域中的变量 的函数</strong>  </li>\n<li>由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成“定义在一个函数内部的函数”。所以，在本质上，__闭包就是将函数内部和函数外部连接起来的一座桥梁__。\n```\nfunction createComparisonFunction(propertyName) {\nreturn function (object1, object2) {\n  var value1 = object1[propertyName];\n  var value2 = object2[propertyName];\n  if (value1 &lt; value2) {<pre><code>return -1;\n</code></pre>\n  } else if (value1 &gt; value2) {<pre><code>return 1;\n</code></pre>\n  } else {<pre><code>return 0;\n</code></pre>\n  }\n};\n}</li>\n</ul>\n<p>//创建函数 \nvar compareNames = createComparisonFunction(&quot;name&quot;);</p>\n<p>//调用函数 \nvar result = compareNames({name: &quot;Nicholas&quot;}, {name: &quot;Greg&quot;});</p>\n<p>//解除对匿名函数的引用（以便释放内存）\ncompareNames = null;</p>\n<pre><code>\n#### 闭包作用：\n  1. 实现公有变量  \n  2. 可以做缓存  \n  3. 可以实现封装，属性私有化  \n  4. 模块化开发，防止污染全局变量   \n\n#### 闭包注意点：\n  1. 由于闭包会携带包含它的函数的作用域，因此会比其他函数占用更多的内存。过度使用闭包可能会导致内存占用过多，造成内存泄漏。  \n  2. 作用域链的这种配置机制引出了一个值得注意的副作用，即闭包只能取得包含函数中任何变量的后一个值。  \n\n</code></pre>\n"},"next":{"path":"_blogs/JS/JS异步编程/README.md","url":"/blog/JS/JS异步编程","title":"JS异步编程","author":"yrobot","keywords":"JS,异步,编程","createTime":1535040000000,"length":4344,"content":"<p><strong>本页目录：</strong><br><a href=\"#gn\">概念学习</a><br><a href=\"#eventLoop\">浏览器线程和Event Loop</a><br><a href=\"#mechanism\">JS的任务执行机制</a><br><a href=\"#unds\">JS异步的理解</a><br><a href=\"#cometrue\">JS的异步编程实现</a><br><a href=\"#better\">JS异步优化页面卡顿</a>   </p>\n<p><a id='gn'></a></p>\n<h2 id=\"概念学习\">概念学习</h2>\n<ul>\n<li><p>__并发__：同一时间段有几个程序都处于已经启动到运行完毕之间，并且这几个程序都在同一个处理机上运行，并发的两种关系是同步和互斥；</p>\n</li>\n<li><p>__互斥__：进程之间访问临界资源时相互排斥的现象；</p>\n</li>\n<li><p>__同步__：进程之间存在依赖关系，一个进程结束的输出作为另一个进程的输入。具有同步关系的一组并发进程之间发送的信息称为消息或者事件；</p>\n</li>\n<li><p>__并行__：单处理器中进程被交替执行，表现出一种并发的外部特征；在多处理器中，进程可以交替执行，还能重叠执行，实现并行处理，并行就是同事发生的多个并发事件，具有并发的含义，但并发不一定是并行，也就是说事件之间不一定要同一时刻发生；</p>\n</li>\n<li><p>__多线程__：多线程是进程中并发运行的一段代码，能够实现线程之间的切换执行；</p>\n</li>\n<li><p>__异步(不按顺序)__：和同步相对，同步是顺序执行，而异步是彼此独立，在等待某个事件的过程中继续做自己的事，不要等待这一事件完成后再工作。线程是实现异步的一个方式，异步是让调用方法的主线程不需要同步等待另一个线程的完成，从而让主线程干其他事情。  </p>\n</li>\n<li><ul>\n<li>所谓&quot;异步&quot;，简单说就是一个任务分成两段，先执行第一段，然后转而执行其他任务，等做好了准备，再回过头执行第二段。比如，有一个任务是读取文件进行处理，异步的执行过程就是下面这样。  </li>\n</ul>\n</li>\n<li><ul>\n<li>这种不连续的执行，就叫做异步。相应地，连续的执行，就叫做同步。\n<img src=\"https://ws3.sinaimg.cn/large/006tNbRwgy1fukonjqddzj30t20gs0yu.jpg\" alt=\"\"></li>\n</ul>\n</li>\n<li><p>__异步和多线程__：不是同等关系，异步是目的，多线程只是实现异步的一个手段，实现异步可以采用多线程技术或者交给其他进程来处理。</p>\n</li>\n</ul>\n<p><a id='eventLoop'></a></p>\n<h2 id=\"浏览器线程和event-loop\">浏览器线程和Event Loop</h2>\n<ul>\n<li><p>js既然是单线程,那么肯定是排队执行代码，那么怎么去排这个队，就是Event Loop。虽然JS是单线程，但浏览器不是单线程。  </p>\n</li>\n<li><p>浏览器中分为以下几个线程:</p>\n<ol>\n<li>js线程</li>\n<li>UI线程(浏览器内核)</li>\n<li>事件线程(onclick,onchange,...)：触发事件发生后，绑定的函数由Event Table移入Event Queue，等待被js主线程调用</li>\n<li>定时器线程(setTimeout, setInterval)： 确保js定时器和异步触发的准确性</li>\n<li>异步http请求线程(ajax)  </li>\n</ol>\n<ul>\n<li>其中JS线程和UI线程相互互斥，也就是说，当UI线程在渲染的时候，JS线程会挂起，等待UI线程完成，再执行JS线程</li>\n</ul>\n</li>\n<li><p>名词解析：</p>\n<ol>\n<li>__浏览器事件触发线程__：当一个事件被触发时该线程会把事件添加到待处理队列的队尾，等待 JavaScript 引擎的处理。这些事件可以是当前执行的代码块如定时任务、也可来自浏览器内核的其他线程如鼠标点击、AJAX 异步请求等，但由于 JavaScript 的单线程关系所有这些事件都得排队等待 JavaScript 引擎处理；</li>\n<li>__定时触发器线程__：浏览器定时计数器并不是由 JavaScript 引擎计数的, 因为 JavaScript 引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确, 因此通过单独线程来计时并触发定时是更为合理的方案；</li>\n<li>__异步 HTTP 请求线程__：在 XMLHttpRequest 在连接后是通过浏览器新开一个线程请求， 将检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件放到 JavaScript 引擎的处理队列中等待处理；</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tNbRwgy1fukonkymdvj30cv08v751.jpg\" alt=\"\">  </p>\n<ul>\n<li>在点击按钮之后，页面卡顿，连续点击按钮时，页面无反应，等到loop运行完时，连续弹出alert。证明 事件线程 独立于 js线程，而同时 UI线程 被挂起。 \n代码：<pre><code>&lt;button onclick=&quot;myClick()&quot;&gt;yep&lt;/button&gt;\n  &lt;script&gt;\n      let count =0;\n      function myClick(){\n          alert(count++)\n          if(count==1)\n              loop();\n      }\n      function loop(){\n          let i=99999;\n          while(i--){\n              console.log(1);\n          }\n      }\n  &lt;/script&gt;\n</code></pre>\n<a id='mechanism'></a></li>\n</ul>\n<h2 id=\"js的任务执行机制\">JS的任务执行机制</h2>\n<p><img src=\"https://ws4.sinaimg.cn/large/006tNbRwgy1fukopfdw9oj30vk0ugwpy.jpg\" alt=\"\"><br><strong>导图要表达的内容用文字来表述的话：</strong></p>\n<ul>\n<li>同步和异步任务分别进入不同的执行&quot;场所&quot;，同步的进入主线程，异步的进入Event Table并注册函数。</li>\n<li>当指定的事情完成时(条件函数完成，绑定的按钮发生点击，请求返回etc)，Event Table会将这个函数移入Event Queue。</li>\n<li>主线程内的任务执行完毕为空，会去Event Queue读取对应的函数，进入主线程执行。</li>\n<li>上述过程会不断重复，也就是常说的Event Loop(事件循环)。</li>\n</ul>\n<p><a id='unds'></a></p>\n<h2 id=\"js异步的理解\">JS异步的理解</h2>\n<ul>\n<li>如概念学习里所说的，js异步主要是：对于占用主线程的操作，利用js任务执行机制，将其放入Event Queue中，等待主线程空闲了才执行。 </li>\n</ul>\n<p><a id='cometrue'></a></p>\n<h2 id=\"js的异步编程实现\">JS的异步编程实现</h2>\n<p>ES 6以前：</p>\n<ul>\n<li>定时器(setTimeout, setInterval)</li>\n<li>回调函数</li>\n<li>事件监听(事件发布/订阅)</li>\n<li>Promise对象  </li>\n</ul>\n<p>ES 6：</p>\n<ul>\n<li>Generator函数(协程coroutine) </li>\n</ul>\n<p>ES 7:</p>\n<ul>\n<li>async和await</li>\n</ul>\n<p><a id='better'></a></p>\n<h2 id=\"js异步优化页面卡顿\">JS异步优化页面卡顿</h2>\n<p>__方案1__：针对支持html5 webworker的现代浏览器方案:<br><em>代码1.</em> 你的大量计算，放到一个js文件中。如下：</p>\n<pre><code>//job.js\nonmessage = function (evt){  //do massive job.在这里你进行大量耗时的计算过程。 \n  postMessage( data );//将计算结果的数据发送会主线程\n}\n</code></pre>\n<p>你的页面代码：</p>\n<pre><code>&lt;!DOCTYPE HTML&gt;\n&lt;html&gt;\n\n&lt;head&gt;\n    &lt;meta http-equiv=&quot;Content-Type&quot;  content=&quot;text/html; charset=utf-8&quot; /&gt;\n    &lt;script type=&quot;text/javascript&quot;&gt;\n        //WEB页主线程var worker =new Worker(&quot;job.js&quot;); \n        //创建一个Worker对象并向它传递将在新线程中执行的脚本的URL \n        worker.postMessage(&#39;开始计算&#39;);\n        worker.onmessage = function (evt) {//接收worker传过来的数据函数   \n            console.log(evt.data);//输出worker发送来的数据，这里就获取到了大量计算的结果。 \n        } \n    &lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body&gt;&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n<p><em>方案2：</em> 对于不支持WebWorker线程的浏览器。\n可以考虑分批处理。即是说创造一个间隔定时器setInterval。<br>每隔一小段时间，处理大量数据中的一部分。<br>这样就可以避免大量计算导致浏览器卡死。<br>大致代码如下(这里是简单的例子，具体情况具体分析)<br>假设我们要计算1000万个数据的和：  </p>\n<pre><code>var jobData = [];//假设是一个数组。里面有1000万个数据  \nfunction  sliceJob() {\n    var  num  =  (jobData.length  /  100)  +  1;//把任务数据划分为100份。    \n    var  portion  =  100000;//每份有10万个数字。    \n    var  addition  =  0;//这里用来保存最后的结果。一开始是0；    \n    var  intv  =  setInterval(function () {\n            if (num--) {            //然后每一份结果。            \n        additoin  +=  every;\n    }  else  {            //计算最后一份，然后输出结果。            \n        alert(&#39;最终结果是:&#39;,  addition);\n        window.clearInterval(intv);\n    }\n        },  50);\n}\n</code></pre>\n<p>此外。jQuery的deferred对象无法实现你的要求。<br>因为deferred对象的目的是为了串行处理异步过程。<br>但是异步过程在执行的过程中，如果耗时过长，仍然会阻塞浏览器线程，导致浏览器不可操作（卡死）。  </p>\n<hr>\n"}},"__N_SSG":true}