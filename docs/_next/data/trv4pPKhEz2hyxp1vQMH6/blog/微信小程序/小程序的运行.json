{"pageProps":{"pre":{"path":"_blogs/HTML&CSS/利用css绘制多边形/README.md","url":"/blog/HTML&CSS/利用css绘制多边形","title":"利用css绘制多边形","author":"yrobot","keywords":"css,多边形,绘制,利用","createTime":1535904000000,"length":6999,"content":"<p>本文主要讲解内容：  </p>\n<ol>\n<li>css绘制多边形的原理(一定要理解)  </li>\n<li>一些简单多边形的绘制示例  </li>\n</ol>\n<p><strong>本页目录：</strong><br><a href=\"#id1\">css绘制多边形的原理</a>  </p>\n<ul>\n<li><a href=\"#id11\">首先我们要知道css盒模型是什么样的</a></li>\n<li><a href=\"#id12\">然后我们还要理解border</a></li>\n<li><a href=\"#id13\">还要会用css伪元素</a></li>\n</ul>\n<p><a href=\"#id2\">css绘制正四边形</a><br><a href=\"#id3\">css绘制非正四边形</a><br><a href=\"#id4\">css绘制三角形</a><br><a href=\"#id5\">css绘制圆形</a><br><a href=\"#id6\">css绘制梯形</a><br><a href=\"#id7\">css绘制正五边形</a><br><a href=\"#id8\">css绘制正七边形</a>  </p>\n<p><a id='id1'></a></p>\n<h2 id=\"css绘制多边形的原理\">css绘制多边形的原理</h2>\n<p><a href=\"\" id=\"id11\"></a></p>\n<h3 id=\"首先我们要知道css盒模型是什么样的\"><strong>首先我们要知道css盒模型是什么样的</strong></h3>\n<p><img src=\"https://ws3.sinaimg.cn/large/0069RVTdgy1fuw4xid010j30a809aq38.jpg\" alt=\"\"><br>所谓的盒模型，可以理解为元素的表现内容，看上图可以发现：  </p>\n<pre><code>盒模型 = 内容 + padding + border + margin    \n</code></pre>\n<p>组成理解(<em>简单介绍</em> )：<br><code>内容</code> 元素内 文本、内元素 所包含的区域<br><code>padding</code> \b 内容 与 border 之间的距离，用于处理border和内容的表现关系<br><code>border</code>  边框，将内容包围的轮廓<br><code>margin</code>  元素 与 其他元素之间的距离，用于处理元素间的表现关系，位置样式  </p>\n<p>一般理解的 元素 由 内容、padding、border 组成，因为这3个影响到元素的表现样式。<br>css2中<code>width</code>的默认指向是内容宽度，而不是元素(包括padding、border)的宽度。<br>\b可以 利用 <code>box-sizing</code> 去修改width的指向：  </p>\n<ul>\n<li><code>box-sizing: content-box;</code> width、height指向内容<br>  <img src=\"https://ws2.sinaimg.cn/large/0069RVTdgy1fuw5olkw8wj303o010mx2.jpg\" alt=\"\"></li>\n<li><code>box-sizing: border-box;</code> width、height指向一般元素<br>  <img src=\"https://ws1.sinaimg.cn/large/0069RVTdgy1fuw5p6zb80j305q04wdgb.jpg\" alt=\"\"></li>\n</ul>\n<p>看下结果：<em>语言:stylus</em>    </p>\n<pre><code>.boxsize1\n    width 100px\n    height 80px\n    background-color #393\n    border 20px solid #999\n.boxsize2\n    width 100px\n    height 80px\n    background-color #393\n    border 20px solid #999\n    box-sizing border-box  //默认元素宽高指定，内容宽高自适应\n</code></pre>\n<p><img src=\"https://ws4.sinaimg.cn/large/0069RVTdgy1fuw6rtydjoj30ci0egweo.jpg\" alt=\"\">  </p>\n<p>本章我们就要利用元素的表现样式(内容、padding、border  )进行图形绘制<br><a href=\"\" id=\"id12\"></a></p>\n<h3 id=\"然后我们还要理解border\"><strong>然后我们还要理解border</strong></h3>\n<p>我们先来看一段有趣的代码：  </p>\n<pre><code>.square1 {\n  width: 0px;\n  height: 0px;\n  border-width: 40px 50px;\n  border-style: solid;\n  border-color: #f00 #008000 #808080 #00f;\n}\n</code></pre>\n<p>想想一下，这段代码的渲染效果是什么样的?<br>css是怎么处理border重叠的部分的？ \n好了，想清楚了，就来看一下结果吧。<br><img src=\"https://ws3.sinaimg.cn/large/0069RVTdgy1fuw65nqy85j309001u0sr.jpg\" alt=\"\"><br><img src=\"https://ws4.sinaimg.cn/large/0069RVTdgy1fuw60spn4lj306i05g0sm.jpg\" alt=\"\"><br>他的盒模型：<br><img src=\"https://ws4.sinaimg.cn/large/0069RVTdgy1fuw62e6752j307y05umxa.jpg\" alt=\"\"><br>可以得出规律：</p>\n<ol>\n<li>border的长 = 盒模型对应的长或宽  </li>\n<li>相邻方向border冲突时，进行等比均分。 </li>\n</ol>\n<p>在接下来的很多例子中都会用到border的这个规律<br><a href=\"\" id=\"id13\"></a></p>\n<h3 id=\"还要会用css伪元素\"><strong>还要会用css伪元素</strong></h3>\n<p><strong>css的伪元素：</strong> 之所以被称为伪元素，是因为他们不是真正的页面元素，html没有对应的元素，但是其所有用法和表现行为与真正的页面元素一样，可以对其使用诸如页面元素一样的css样式，表面上看上去貌似是页面的某些元素来展现，实际上是css样式展现的行为，因此被称为伪元素。   </p>\n<p>我们在绘制图形发现需要进行元素组装时，就可以利用伪元素 来减少对HTML元素的使用。 </p>\n<p><a href=\"https://www.cnblogs.com/wonyun/p/5807191.html\">css伪元素的用法</a></p>\n<p><a id='id2'></a></p>\n<h2 id=\"css绘制正四边形\">css绘制正四边形</h2>\n<p>绘制正四边形最简单的方法就是利用内容，直接使用width、height  </p>\n<pre><code>.square2 {\n  width: 80px;\n  height: 80px;\n  background-color: #393;\n}\n</code></pre>\n<p><img src=\"https://ws3.sinaimg.cn/large/0069RVTdgy1fuw6wmpdi1j309w092q31.jpg\" alt=\"\"></p>\n<p>当然利用border也可以  </p>\n<pre><code>.square3 {\n  width: 0px;\n  height: 0px;\n  border-width: 40px;\n  border-style: solid;\n  border-color: #008000;\n}\n</code></pre>\n<p><img src=\"https://ws3.sinaimg.cn/large/0069RVTdgy1fuw6ypx233j30a208s74d.jpg\" alt=\"\"></p>\n<p><a id='id3'></a></p>\n<h2 id=\"css绘制非正四边形\">css绘制非正四边形</h2>\n<h4 id=\"绘制平行四边形\">绘制平行四边形</h4>\n<p>平行四边形利用<a href=\"/blog/CSS3/CSS3-2D%E8%BD%AC%E6%8D%A2#14\">css3的倾斜函数skew()</a>比较方便  </p>\n<pre><code>.parallelogram {\n  width: 100px;\n  height: 80px;\n  background: #393;\n  -webkit-transform: skew(-30deg);\n  -moz-transform: skew(-30deg);\n  -o-transform: skew(-30deg);\n  transform: skew(-30deg);\n}\n</code></pre>\n<p><img src=\"https://ws2.sinaimg.cn/large/0069RVTdgy1fuw79w9e6dj30bk08cweo.jpg\" alt=\"\">   </p>\n<p>当然使用 <code>border</code> + <code>:after</code>伪类也是可以的  </p>\n<pre><code>.parallelogram2 {\n  width: 0px;\n  height: 0px;\n  border-bottom: 80px solid #393;\n  border-left: 80px solid transparent;\n}\n.parallelogram2:after {\n  display: block;\n  content: &#39;&#39;;\n  width: 0px;\n  height: 0px;\n  border-top: 80px solid #393;\n  border-right: 80px solid transparent;\n}\n</code></pre>\n<p><img src=\"https://ws3.sinaimg.cn/large/0069RVTdgy1fuw7opf0mhj30bq06qwee.jpg\" alt=\"\">  </p>\n<h4 id=\"绘制菱形\">绘制菱形</h4>\n<p>思路：绘制两个等边三角形，进行拼接（<code>height = sqr(3)*width/2</code>）</p>\n<pre><code>.rhombus {\n  width: 0px;\n  height: 0px;\n  border-bottom: 69.3px solid #393;\n  border-left: 40px solid transparent;\n  border-right: 40px solid transparent;\n}\n.rhombus:after {\n  display: block;\n  content: &#39;&#39;;\n  width: 0px;\n  width: 0px;\n  border-top: 69.3px solid #393;\n  border-left: 40px solid transparent;\n  border-right: 40px solid transparent;\n}\n</code></pre>\n<p><img src=\"https://ws4.sinaimg.cn/large/0069RVTdgy1fuwb07zx8zj308605o748.jpg\" alt=\"\"></p>\n<p><a id='id4'></a></p>\n<h2 id=\"css绘制三角形\">css绘制三角形</h2>\n<h4 id=\"绘制直角三角形\">绘制直角三角形</h4>\n<pre><code>.rightTriangle\n    width 0px\n    height 0px\n    border-bottom 80px solid #393 \n    border-left 80px solid transparent\n</code></pre>\n<p><img src=\"https://ws2.sinaimg.cn/large/0069RVTdgy1fuwcpx6dhfj306s06aa9x.jpg\" alt=\"\">  </p>\n<h4 id=\"绘制等边三角形\">绘制等边三角形</h4>\n<p>等边三角形的宽高比为 1 : sqr(3)/2<br>所以\b可以根据底边长计算三角形高<code>height = sqr(3)*width/2</code><br>本例中左右border宽为40，所以底边长为80，从而计算出底部border宽应为69.3  </p>\n<pre><code>.triangle\n    width 0px\n    height 0px\n    border-bottom 69.3px solid #393 \n    border-left 40px solid transparent\n    border-right 40px solid transparent\n</code></pre>\n<p><img src=\"https://ws1.sinaimg.cn/large/0069RVTdgy1fuwb2kyyzqj306g064746.jpg\" alt=\"\"></p>\n<p><a id='id5'></a></p>\n<h2 id=\"css绘制圆形\">css绘制圆形</h2>\n<p>圆形最简单的方式就是设置<code>border-radius</code>为50%  </p>\n<pre><code>.circle1\n    width 80px\n    height 80px\n    border-radius 50%\n    background-color #393\n</code></pre>\n<p><img src=\"https://ws1.sinaimg.cn/large/0069RVTdgy1fuwcsqggv5j306c068a9z.jpg\" alt=\"\"></p>\n<p>也可以使用border实现  </p>\n<pre><code>.circle2\n    width 0px\n    height 0px\n    border 40px solid #393 \n    border-radius 50%\n</code></pre>\n<p>\b哎？猜猜这时候设置padding是什么样子的</p>\n<pre><code>.circle3\n    width 0px\n    height 0px\n    border 40px solid #393 \n    border-radius 50%\n    padding 20px\n</code></pre>\n<p><img src=\"https://ws3.sinaimg.cn/large/0069RVTdgy1fuwcyjhdw6j308408874b.jpg\" alt=\"\"><br>看来border-radius把内外角度都设置了 </p>\n<p><a id='id6'></a></p>\n<h2 id=\"css绘制梯形\">css绘制梯形</h2>\n<pre><code>.trapezoid\n    width 40px\n    height 0px\n    border-top 40px solid #393 \n    border-left 20px solid transparent\n    border-right 20px solid transparent\n</code></pre>\n<p><img src=\"https://ws1.sinaimg.cn/large/0069RVTdgy1fuwd59x6bsj306w04gwec.jpg\" alt=\"\"></p>\n<p><a id='id7'></a></p>\n<h2 id=\"css绘制正五边形\">css绘制正五边形</h2>\n<p>正五边形可以拆分成上下两个部分：上边一个等腰三角形，下面一个等腰梯形，具体长宽计算这里不做介绍  </p>\n<pre><code>.pentagon {\n  width: 0px;\n  height: 0px;\n  border-top: 0px;\n  border-right: 81px solid transparent;\n  border-left: 81px solid transparent;\n  border-bottom: 59px solid #393;\n}\n.pentagon:after {\n  position: relative;\n  left: -81px;\n  top: 59px;\n  display: block;\n  content: &#39;&#39;;\n  width: 100px;\n  height: 0px;\n  border-top: 95px solid #393;\n  border-left: 31px solid transparent;\n  border-right: 31px solid transparent;\n}\n</code></pre>\n<p><img src=\"https://ws3.sinaimg.cn/large/0069RVTdgy1fuwdlbgoi3j30be0a8t8r.jpg\" alt=\"\"></p>\n<p><a id='id8'></a></p>\n<h2 id=\"css绘制正七边形\">css绘制正七边形</h2>\n<p>正七边形比较复杂，需要将整个图形分成3份来做<br><img src=\"https://ws1.sinaimg.cn/large/0069RVTdgy1fuwdo5l0qrj307s07974m.jpg\" alt=\"\"><br>上：等腰三角形<br>中：等腰梯形<br>下：等腰梯形  </p>\n<pre><code>.heptagon {\n  height: 0px;\n  width: 180px;\n  border-left: 22px solid transparent;\n  border-right: 22px solid transparent;\n  border-bottom: 97px solid #393;\n  margin-top: 63px;\n}\n.heptagon:before {\n  display: block;\n  content: &#39;&#39;;\n  width: 0px;\n  height: 0px;\n  border-right: 90px solid transparent;\n  border-left: 90px solid transparent;\n  border-bottom: 43px solid #393;\n  position: relative;\n  top: -43px;\n}\n.heptagon:after {\n  width: 100px;\n  height: 0px;\n  content: &#39;&#39;;\n  display: block;\n  border-top: 78px solid #393;\n  border-left: 62px solid transparent;\n  border-right: 62px solid transparent;\n  position: relative;\n  left: -22px;\n  bottom: -54px;\n}\n</code></pre>\n<p><img src=\"https://ws3.sinaimg.cn/large/0069RVTdgy1fuwe4xtv6lj30ec0dowen.jpg\" alt=\"\"></p>\n"},"blog":{"path":"_blogs/微信小程序/小程序的运行.md","url":"/blog/微信小程序/小程序的运行","title":"小程序的运行","author":"yrobot","keywords":"小程序,运行","createTime":1535904000000,"length":1360,"content":"<p><strong>本页目录：</strong><br><a href=\"#id1\">小程序的运行环境</a><br><a href=\"#id2\">小程序目录结</a><br><a href=\"#id3\">小程序运行机制</a>  </p>\n<p><a id='id1'></a></p>\n<h2 id=\"小程序的运行环境\">小程序的运行环境</h2>\n<p>微信小程序运行在三端：iOS、Android 和 用于调试的开发者工具。</p>\n<p>三端的脚本执行环境以及用于渲染非原生组件的环境是各不相同的：</p>\n<ul>\n<li>在 iOS 上，小程序的 javascript 代码是运行在 JavaScriptCore 中，是由 WKWebView 来渲染的，环境有 - iOS8、iOS9、iOS10  </li>\n<li>在 Android 上，小程序的 javascript 代码是通过 X5 JSCore来解析，是由 X5 基于 Mobile Chrome 53/57 内- 核来渲染的  </li>\n<li>在 开发工具上， 小程序的 javascript 代码是运行在 nwjs 中，是由 Chrome Webview 来渲染的  </li>\n</ul>\n<p>尽管三端的环境是十分相似的，但是还是有些许区别：  </p>\n<ol>\n<li>ES6 语法支持不一致：语法上开发者可以通过开启 ES6 转 ES5 的功能来规避。详情</li>\n<li>wxss 渲染表现不一致：尽管可以通过开启样式补全来规避大部分的问题 详情，还是建议开发者需要在 iOS 和 Android 上分别检查小程序的真实表现。</li>\n</ol>\n<p><a id='id2'></a></p>\n<h2 id=\"小程序目录结\">小程序目录结</h2>\n<pre><code>project\n├── pages\n|   ├── index\n|   |   ├── index.json  index 页面配置\n|   |   ├── index.js    index 页面逻辑\n|   |   ├── index.wxml  index 页面结构\n|   |   └── index.wxss  index 页面样式表\n|   └── log\n|       ├── log.json    log 页面配置\n|       ├── log.wxml    log 页面逻辑\n|       ├── log.js      log 页面结构\n|       └── log.wxss    log 页面样式表·\n├── app.js              小程序逻辑\n├── app.json            小程序公共设置\n└── app.wxss            小程序公共样式表\n</code></pre>\n<p><a id='id3'></a></p>\n<h2 id=\"小程序运行机制\">小程序运行机制</h2>\n<ul>\n<li>小程序没有重启的概念</li>\n<li><strong>前台、后台定义：</strong> 当用户点击左上角关闭，或者按了设备 Home 键离开微信，小程序并没有直接销毁，而是进入了后台；当再次进入微信或再次打开小程序，又会从后台进入前台。需要注意的是：只有当小程序进入后台一定时间，或者系统资源占用过高，才会被真正的销毁。</li>\n<li>当小程序进入后台，客户端会维持一段时间的运行状态，超过一定时间后（目前是5分钟）会被微信主动销毁</li>\n<li>当短时间内（5s）连续收到两次以上收到系统内存告警，会进行小程序的销毁\n<img src=\"https://ws3.sinaimg.cn/large/0069RVTdgy1fuwgqm9y1oj30my0bxgmx.jpg\" alt=\"\"></li>\n</ul>\n"},"next":{"path":"_blogs/CSS3/CSS3-3D转换/README.md","url":"/blog/CSS3/CSS3-3D转换","title":"CSS3-3D转换","author":"yrobot","keywords":"3D,CSS3,转换","createTime":1535644800000,"length":5528,"content":"<p><strong>本页目录：</strong><br><a href=\"#id1\">3D\b元素的属性</a>  </p>\n<ul>\n<li><a href=\"#id11\">transform</a></li>\n<li><a href=\"#id12\">transform-origin</a></li>\n<li><a href=\"#id13\">transform-style</a></li>\n<li><a href=\"#id14\">perspective</a></li>\n<li><a href=\"#id15\">perspective-origin</a>  </li>\n<li><a href=\"#id16\">backface-visibility</a>  </li>\n</ul>\n<p><a href=\"#id2\">3D元素的方法</a>  </p>\n<p><strong>CSS3新增的3D变换属性：</strong>  CSS3 3D 转换支持开发者在css代码中利用css3的3D函数，在页面里开发出一些简单的3D效果。  </p>\n<p><strong>本节内容要点：</strong>  </p>\n<ul>\n<li>利用transform改变各个元素位置  </li>\n<li>利用transition增加动态效果  </li>\n<li>利用perspective属性改变视角  </li>\n</ul>\n<p><a href=\"\" id=\"id1\"></a></p>\n<h2 id=\"3d\b元素的属性\">3D\b元素的属性</h2>\n<p><a href=\"\" id=\"id11\"></a></p>\n<ol>\n<li>__transform__：利用一些方法对元素进行2D或者3D转换。具体\b转换方法参看 <a href=\"#id2\">3D元素的方法</a><br><strong>语法：</strong> <code>transform: none|transform-functions;</code>  <ul>\n<li><code>none</code> 定义不进行转换。  </li>\n<li><code>transform-functions</code> 使用<a href=\"#id2\">3D元素的方法</a>  </li>\n</ul>\n</li>\n</ol>\n<p><a href=\"\" id=\"id12\"></a></p>\n<ol start=\"2\">\n<li><p>__transform-origin__：设置元素坐标系原点的位置，影响到2D、3D的旋转效果<br><strong>语法：</strong> <code>transform-origin: x-axis y-axis z-axis;</code>      </p>\n<ul>\n<li>x-axis    定义视图被置于 X 轴的何处。可能的值：<br><em>left</em><br><em>center</em><br><em>right</em><br><em>length</em><br><em>%</em>  </li>\n<li>y-axis    定义视图被置于 Y 轴的何处。可能的值：<br><em>top</em><br><em>center</em><br><em>bottom</em><br><em>length</em><br><em>%</em>  </li>\n<li>z-axis    定义视图被置于 Z 轴的何处。可能的值：<br><em>length</em></li>\n</ul>\n<p><strong>示例：</strong> <code>-webkit-transform-origin:20% 40%;    /* Safari 和 Chrome */</code>   </p>\n<p><strong>取值对比：</strong>  1.数字和百分比相对于左上角 2.关键字相对于整个元素  </p>\n<pre><code> top = top center = center top = 50% 0  \n right = right center = center right = 100%或(100% 50%)  \n bottom = bottom center = center bottom = 50% 100%  \n left = left center = center left = 0或(0 50%)   \n center = center center = 50%或（50% 50%）  \n top left = left top = 0 0  \n right top = top right = 100% 0  \n bottom right = right bottom = 100% 100%  \n bottom left = left bottom = 0 100%  \n</code></pre>\n<p><strong>浏览器支持</strong><br><img src=\"https://ws1.sinaimg.cn/large/006tNbRwgy1fut27g9rczj30v806oabn.jpg\" alt=\"\">\nInternet Explorer 10、Firefox、Opera 支持 transform-origin 属性。<br>Internet Explorer 9 支持替代的 -ms-transform-origin 属性（仅适用于 2D 转换）。<br>Safari 和 Chrome 支持替代的 -webkit-transform-origin 属性（3D 和 2D 转换）。<br>Opera 只支持 2D 转换。  </p>\n</li>\n</ol>\n<p><a href=\"\" id=\"id13\"></a>   </p>\n<ol start=\"3\">\n<li>__transform-style__：规定如何在 3D 空间中呈现被嵌套的元素<br><strong>语法：</strong> <code>transform-style: flat|preserve-3d;</code>  \b   <ul>\n<li><code>flat</code>    所有子元素在 2D 平面呈现。<br> 沿着X轴或Y轴方向旋转该元素将导致位于正或负Z轴位置的子元素显示在该元素的平面上，而不是它的前面或者后面。著作权归作者所有。  </li>\n<li><code>preserve-3d</code>    子元素将保留其 3D 位置。    </li>\n</ul>\n<strong>示例：</strong> <code>-webkit-transform-style: preserve-3d;    /* Safari 和 Chrome */</code>  <strong>浏览器支持</strong><br><img src=\"https://ws1.sinaimg.cn/large/006tNbRwgy1fut2ohsc19j30v006mtae.jpg\" alt=\"\">\nFirefox 支持 transform-style 属性。<br>Chrome、Safari 和 Opera 支持替代的 -webkit-transform-style 属性。 </li>\n</ol>\n<p><a href=\"\" id=\"id14\"></a></p>\n<ol start=\"4\">\n<li>__perspective__：perspective 属性定义 3D 元素距视图的距离，以像素计。（改变视角距离）  <ul>\n<li>提示：请与 perspective-origin 属性一同使用该属性，这样您就能够改变 3D 元素的底部位置。   </li>\n</ul>\n<strong>语法：</strong> <code>perspective: number|none;</code>  <ul>\n<li><code>number</code>    元素距离视图的距离，以像素计。  </li>\n<li><code>none</code>    默认值。与 0 相同。不设置透视。  </li>\n</ul>\n<strong>示例：</strong> <pre><code>div\n{\nperspective: 500;\n-webkit-perspective: 500; /* Safari 和 Chrome */\n}\n</code></pre>\n <strong>浏览器支持</strong><br>目前浏览器都不支持 perspective 属性。<br>Chrome 和 Safari 支持替代的 -webkit-perspective 属性。  </li>\n</ol>\n<p><a href=\"\" id=\"id15\"></a></p>\n<ol start=\"5\">\n<li><p>__perspective-origin__：改变 3D 元素的底部位置（改变视角的朝向）<br><strong>语法：</strong> <code>perspective-origin: x-axis y-axis;</code> 数字和百分比相对于左上角   </p>\n<ul>\n<li>x-axis    定义视图被置于 X 轴的何处。可能的值：<br><em>left</em><br><em>center</em><br><em>right</em><br><em>length</em><br><em>%</em>  </li>\n<li>y-axis    定义视图被置于 Y 轴的何处。可能的值：<br><em>top</em><br><em>center</em><br><em>bottom</em><br><em>length</em><br><em>%</em>  </li>\n</ul>\n<p><strong>示例：</strong> </p>\n<pre><code>div\n {\n perspective:150;\n perspective-origin: 10% 10%;\n -webkit-perspective:150;    /* Safari 和 Chrome */\n -webkit-perspective-origin: 10% 10%;    /* Safari 和 Chrome */\n }\n</code></pre>\n<p><strong>浏览器支持</strong><br>目前浏览器都不支持 perspective-origin 属性。<br>Chrome 和 Safari 支持替代的 -webkit-perspecitve-origin 属性。  </p>\n</li>\n</ol>\n<p><a href=\"\" id=\"id16\"></a></p>\n<ol start=\"6\">\n<li><p>__backface-visibility__：backface-visibility 属性定义当元素不面向屏幕时是否可见。<br><strong>语法：</strong> <code>backface-visibility 属性定义当元素不面向屏幕时是否可见。</code>   </p>\n<ul>\n<li><code>visible</code>    背面是可见的。  </li>\n<li><code>hidden</code>    背面是不可见的。  </li>\n</ul>\n<p><strong>示例：</strong>   </p>\n<pre><code>div\n {\n backface-visibility:hidden;\n -webkit-backface-visibility:hidden;    /* Chrome 和 Safari */\n -moz-backface-visibility:hidden;     /* Firefox */\n -ms-backface-visibility:hidden;     /* Internet Explorer */\n }\n</code></pre>\n<p><strong>浏览器支持</strong><br>只有 Internet Explorer 10+ 和 Firefox 支持 backface-visibility 属性。<br>Opera 15+、Safari 和 Chrome 支持替代的 -webkit-backface-visibility 属性。<br><a id='id2'></a></p>\n</li>\n</ol>\n<h2 id=\"3d元素的方法\">3D元素的方法</h2>\n<p><strong>语法：</strong> <code>transform: none|transform-functions;</code> 方法使用应该加<code>transform:</code>前缀   </p>\n<ul>\n<li><code>none</code>    定义不进行转换。  </li>\n<li><code>transform-functions</code>    3D变换函数。具体函数及功能如下：  <ul>\n<li><em>matrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n)</em>    定义 3D 转换，使用 16 个值的 4x4 矩阵。  </li>\n<li><em>translate3d(x,y,z)</em>    定义 3D 转化。  </li>\n<li><em>translateX(x)</em>    定义 3D 转化，仅使用用于 X 轴的值。  </li>\n<li><em>translateY(y)</em>    定义 3D 转化，仅使用用于 Y 轴的值。  </li>\n<li><em>translateZ(z)</em>    定义 3D 转化，仅使用用于 Z 轴的值。  </li>\n<li><em>scale3d(x,y,z)</em>    定义 3D 缩放转换。  </li>\n<li><em>scaleX(x)</em>    定义 3D 缩放转换，通过给定一个 X 轴的值。  </li>\n<li><em>scaleY(y)</em>    定义 3D 缩放转换，通过给定一个 Y 轴的值。  </li>\n<li><em>scaleZ(z)</em>    定义 3D 缩放转换，通过给定一个 Z 轴的值。  </li>\n<li><em>rotate3d(x,y,z,angle)</em>    定义 3D 旋转。  </li>\n<li><em>rotateX(angle)</em>    定义沿 X 轴的 3D 旋转。  </li>\n<li><em>rotateY(angle)</em>    定义沿 Y 轴的 3D 旋转。  </li>\n<li><em>rotateZ(angle)</em>    定义沿 Z 轴的 3D 旋转。  </li>\n<li><em>perspective(n)</em>    定义 3D 转换元素的透视视图。  </li>\n</ul>\n</li>\n</ul>\n<p><strong>示例：</strong>   </p>\n<pre><code>div\n{\ntransform:rotate(7deg);\n-ms-transform:rotate(7deg);     /* IE 9 */\n-moz-transform:rotate(7deg);     /* Firefox */\n-webkit-transform:rotate(7deg); /* Safari 和 Chrome */\n-o-transform:rotate(7deg);     /* Opera */\n}\n</code></pre>\n<p><strong>浏览器支持</strong><br><img src=\"https://ws4.sinaimg.cn/large/006tNbRwgy1fuqf7u1vz0j30u204ot9y.jpg\" alt=\"\">\nInternet Explorer 10、Firefox、Opera 支持 transform 属性。<br>Internet Explorer 9 支持替代的 -ms-transform 属性（仅适用于 2D 转换）。<br>Safari 和 Chrome 支持替代的 -webkit-transform 属性（3D 和 2D 转换）。<br>Opera 只支持 2D 转换。</p>\n"}},"__N_SSG":true}