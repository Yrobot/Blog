{"pageProps":{"pre":{"path":"_blogs/计算机网络/计网体系结构.md","url":"/blog/计算机网络/计网体系结构","title":"计网体系结构 - OSI、TCP/IP、五层协议体系","author":"yrobot","keywords":"计网,OSI,TCP,IP,五层协议体系,体系结构","createTime":1538755200000,"length":4125,"content":"<p><strong>本页目录：</strong><br><a href=\"#inall\">简而言之</a><br><a href=\"#osi\">OSI 的体系结构</a><br><a href=\"#tcpip\">TCP/IP 的结构体系</a><br><a href=\"#five\">五层体系结构</a>  </p>\n<p><a id='inall'></a></p>\n<h2 id=\"简而言之\">简而言之</h2>\n<p>总的来说，计网结构体系分成三种：  </p>\n<ol>\n<li>OSI 的体系结构</li>\n<li>TCP/IP 的结构体系</li>\n<li><a href=\"#five\">五层体系结构</a> [着重学习]</li>\n</ol>\n<p><code>OSI的体系结构</code> 是由国际标准化组织ISO提出的一种标准框架，他有7层体系，但是由于 1.OSI缺乏商业驱动 2.协议较复杂，运行效率低   3.OSI层次划分不合理，功能出现重复。\b导致OSI止步于理论层面。  </p>\n<p><code>TCP/IP的结构体系</code> 是由于OSI的复杂不实用，TCP/IP就应运而生了，他在ISO发表之前就出现了。TCP/IP只有4层体系，并且得到了市场的肯定。  </p>\n<p><code>五层体系结构</code> 是因为OSI概念清除体系完整，而TCP/IP更具实用价值，所以我们学习的时候会学习较为折中的 五层协议的体系结构。</p>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tNbRwgy1fvygqapt6bj30g108yti3.jpg\" alt=\"\"></p>\n<table>\n<thead>\n<tr>\n<th>OSI参考层编号</th>\n<th>等效的OSI层</th>\n<th>五层协议体系</th>\n<th>TCP/IP协议体系</th>\n<th>TCP/IP协议示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>7、6、5</td>\n<td>应用、表示、会话</td>\n<td>应用</td>\n<td>应用层</td>\n<td>HTTP、HTTPS、NFS、NIS、DNS、LDAP、telnet、ftp、rlogin、rsh、rcp、RIP、RDISC、SNMP 等</td>\n</tr>\n<tr>\n<td>4</td>\n<td>传输</td>\n<td>传输</td>\n<td>运输层</td>\n<td>TCP、UDP、SCTP</td>\n</tr>\n<tr>\n<td>3</td>\n<td>网络</td>\n<td>网络</td>\n<td>网际层IP</td>\n<td>IPv4、IPv6、ARP、ICMP</td>\n</tr>\n<tr>\n<td>2</td>\n<td>数据链路</td>\n<td>数据链路</td>\n<td>网络接口层</td>\n<td>PPP、IEEE 802.2</td>\n</tr>\n<tr>\n<td>1</td>\n<td>物理</td>\n<td>物理网络</td>\n<td>网络接口层</td>\n<td>以太网 (IEEE 802.3)、令牌环、RS-232、FDDI 等等</td>\n</tr>\n<tr>\n<td><a id='osi'></a></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"osi-的体系结构\">OSI 的体系结构</h2>\n<p>OSI体系结构，意为开放式系统互联。<br>国际标准组织（国际标准化组织）制定了OSI模型。这个模型把网络通信的工作分为7层<br>分别是 <code>物理层, 数据链路层, 网络层, 传输层, 会话层, 表示层 和 应用层</code>。  </p>\n<p><strong>OSI体系从上到下解析：</strong>  </p>\n<ol>\n<li><p>应用层（Application Layer）提供为应用软件而设的接口，以设置与另一应用软件之间的通信。例如: HTTP，HTTPS，FTP，TELNET，SSH，SMTP，POP3等。</p>\n</li>\n<li><p>表达层（Presentation Layer）把数据转换为能与接收者的系统格式兼容并适合传输的格式。</p>\n</li>\n<li><p>会话层（Session Layer）负责在数据传输中设置和维护计算机网络中两台计算机之间的通信连接。</p>\n</li>\n<li><p>传输层（Transport Layer）把传输表头（TH）加至数据以形成数据包。传输表头包含了所使用的协议等发送信息。例如:传输控制协议（TCP）等。</p>\n</li>\n<li><p>网络层（Network Layer）决定数据的路径选择和转寄，将网络表头（NH）加至数据包，以形成分组。网络表头包含了网络数据。例如:互联网协议（IP）等。</p>\n</li>\n<li><p>数据链路层（Data Link Layer）负责网络寻址、错误侦测和改错。当表头和表尾被加至数据包时，会形成帧。数据链表头（DLH）是包含了物理地址和错误侦测及改错的方法。数据链表尾（DLT）是一串指示数据包末端的字符串。例如以太网、无线局域网（Wi-Fi）和通用分组无线服务（GPRS）等。<br>分为两个子层：逻辑链路控制（logic link control，LLC）子层和介质访问控制（media access control，MAC）子层。</p>\n</li>\n<li><p>物理层（Physical Layer）在局部局域网上传送数据帧（data frame），它负责管理计算机通信设备和网络媒体之间的互通。包括了针脚、电压、线缆规范、集线器、中继器、网卡、主机适配器等。</p>\n</li>\n</ol>\n<p><a id='tcpip'></a></p>\n<h2 id=\"tcpip-的结构体系\">TCP/IP 的结构体系</h2>\n<p><strong>1. 本机内TCP/IP体系结构展示：</strong><br><img src=\"https://ws4.sinaimg.cn/large/006tNbRwgy1fvzspp8fp6j30d9073n1n.jpg\" alt=\"\">  </p>\n<p><strong>2. 网络间TCP/IP体系结构展示：</strong><br><img src=\"https://ws1.sinaimg.cn/large/006tNbRwgy1fvytqvroucj30fu09045j.jpg\" alt=\"\">  </p>\n<p><a id='from5'></a>  </p>\n<p><strong>3. TCP/IP 体系\b从上到下解析</strong>  </p>\n<ol>\n<li><p><strong>应用层：</strong>\n应用层是体系结构中的最高层，它直接为用户的应用程序提供服务，在因特网中应用层的协议很多，如支持万维网应用的http协议，支持电邮的smtp协议，支持文件传输的ftp协议等等。<br>我们将应用层交互的数据单元称为 __报文__。 </p>\n</li>\n<li><p><strong>运输层：</strong> 它为两个主机中的进程间提供通用的传输服务。主要有复用(向下传)和分用(向上传)两个功能。<br> 运输层主要使用以下两种协议：TCP和UDP   </p>\n<ul>\n<li>TCP：_Transmission Contol Protocol_，传输控制协议，面向连接的，数据传输的单位是报文段，能够提供可靠地交付。  </li>\n<li>UDP：_User Datagram Protocol_，用户数据报协议，无连接的，数据传输的单位是用户数据报，不保证提供可靠地交付。</li>\n</ul>\n</li>\n<li><p><strong>网络层：</strong>\n 负责为分组交换网上的不同主机提供通信服务。<br> (作用1)在发送数据时，网络层把运输层产生的报文段或用户数据报封装成分组或包进行传送。<br> 在TCP/IP体系中，由于网络层使用IP协议，因此分组也叫做IP数据报，简称数据报。<br> (作用2)网络层的另一个任务就是要选择合适的路由，<br> 使源主机运输层所传下来的分组，能够通过网络中的路由器找到目的主机。  </p>\n</li>\n<li><p><strong>网络接口层：</strong> 对于TCP/IP结构体系，的这一层主要包含 五层协议 的数据链路层和物理层    </p>\n<ul>\n<li><p>数据链路层：<br>链路层将网络层交下来的IP数据报组装成帧，在两个相邻结点之间的链路上透明地传送帧中的数据。控制端在接收数据时，控制信息使接收端能够知道一个帧从哪个比特开始和到哪个比特结束。这样，数据链路层在收到一个帧后，就可从中提取出数据部分，上交给网络层。控制信息还使得接收端能够检测到所收到的帧中有无差错。如果发现有差错，数据链路层就简单地丢弃这个出错的帧，以免传下去白白浪费网络资源。如果需要改正错误，就由运输层的TCP协议来完成。(数据信息的确认交给更高层的网络层或者应用层实现)</p>\n</li>\n<li><p>物理层：在物理层上所传数据的单位是比特。物理层的任务就是透明地传送比特流。</p>\n</li>\n</ul>\n</li>\n</ol>\n<p><a id='five'></a></p>\n<h2 id=\"五层体系结构\">五层体系结构</h2>\n<p>五层体系结构主要是将TCP/IP体系拆分成5层，便于学习：  </p>\n<ol>\n<li>__应用层__：应用层定义的是 应用间通信和交互的规则，如HTTP、FTP等</li>\n<li>__运输层__：它为两个主机中的进程间提供通用的传输服务。主要有复用(向下传)和分用(向上传)两个功能。运输方式分为TCP、UDP两种协议</li>\n<li>__网络层__：为运输层的数据包选择合适的路由协议(TCP/IP中用的是IP协议)，地址解析 和 路由 是网络层的重要目的。</li>\n<li>__数据链路层__：数据链路层在不可靠的物理介质上提供可靠的传输。作用包括：物理地址寻址、数据的成帧、流量控制、数据的检错、重发等。</li>\n<li>__物理层__：物理层主要负责 数据 和 物理信号 之间的互相转换。(比如0和1转换为电信号分别用几伏表示传输)</li>\n</ol>\n<p>具体每层的内容参看<a href=\"#from5\">TCP/IP 体系\b从上到下解析</a>  </p>\n<p>五层体系结构的数据传输 <strong>图解</strong> ：<br><img src=\"https://ws3.sinaimg.cn/large/006tNbRwgy1fw0ndnh4hzj30rs0d4qiu.jpg\" alt=\"\"></p>\n"},"blog":{"path":"_blogs/微信小程序/小程序的分享与传参.md","url":"/blog/微信小程序/小程序的分享与传参","title":"小程序的分享与传参","author":"yrobot","keywords":"小程序,传参,分享","createTime":1538236800000,"length":5284,"content":"<p><strong>本页目录：</strong><br><a href=\"#before\">事先说明</a><br><a href=\"#share\">分享方法概括</a>  </p>\n<p>分享传参</p>\n<ul>\n<li><a href=\"#url\">利用URL参数</a>  </li>\n<li><a href=\"#qrcode\">二维码传参</a>  </li>\n<li><a href=\"#st\">shareTicket</a>  </li>\n<li><a href=\"#cb\">剪切板传参</a>  </li>\n</ul>\n<p><a href=\"#note\">分享的注意点</a>  </p>\n<p><a id='before'></a></p>\n<h2 id=\"事先说明\">事先说明</h2>\n<p>首先要说的就是<br>微信仗着自己的生态圈日益完善，随随便便就可以废弃或者改动API<code>(比如这次的分享回调函数)</code><br>所以本文只能做到说，对于目前<code>2018年09月30日</code>这个时间结点，我所做的总结是没有问题的   </p>\n<p>再说一下做本次总结的初衷，或者是出发点  </p>\n<p>最近要负责一个信用卡的小程序项目<br>我主要负责的就是项目的前端开发<br>那么一系列关于分享的问题就来了  </p>\n<ul>\n<li>什么这个页面能不能生成链接放群里啊</li>\n<li>小程序能不能分享到朋友圈啊</li>\n<li>分享对接到个人，进而引入任务机制啊</li>\n<li>能不能查看每个人发展了几个新用户啊</li>\n<li>朋友圈分享加入参数怎么实现啊</li>\n<li>巴拉巴拉</li>\n</ul>\n<p>呼~  </p>\n<p>索性做一次比较系统的总结吧<br>看你们谁敢再提一些xx的需求  </p>\n<p><a id='share'></a></p>\n<h2 id=\"分享方法概括\">分享方法概括</h2>\n<ol>\n<li>利用page生命周期onShareAppMessage()</li>\n<li>基于\b二维码图片进行分享</li>\n<li>通过剪切板分享   </li>\n</ol>\n<h3 id=\"1-利用page生命周期onshareappmessage\">1. 利用page生命周期onShareAppMessage()</h3>\n<p>只有设置了onShareAppMessage()函数<br>点击小程序右上角才会有分享选项<br>button方式的分享才会成功  </p>\n<p>具体API使用参考<a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html#%E9%A1%B5%E9%9D%A2%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0\">官网-页面事件处理函数</a></p>\n<p><strong>优点：</strong><br>这个方法好的地方就是可以直接分享给用户和群<br>用户点击链接直接跳转小程序<br>非常方便，转化率也高  </p>\n<p><strong>缺点：</strong><br>不支持以链接形式分享到朋友圈  </p>\n<h3 id=\"2-\b基于\b二维码图片进行分享\">2. \b基于\b二维码图片进行分享</h3>\n<p>生成小程序二维码需要获取access_token<br>然后利用<a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/qr-code.html\">官方的接口</a>去获取二维码<br>接口返回数据为二维码的二进制数据  </p>\n<p><strong>需要注意的是：</strong><br>官方的接口有3个<br>但是1、3的接口生成个数总和不得超过100000，但参数长度够长<br>2接口不限制总个数，生成频率也很大，但是2号接口的参数整体不得多于32个可见字符<br>这需要开发的取舍，或者进行适当的转换了  </p>\n<p><strong>优点：</strong><br>方法各种场景通用，可以对用户、对朋友圈、甚至支持以其他媒体介质传播  </p>\n<p><strong>缺点：</strong><br>方法操作复杂，转换率比较低<br>对于老年用户。可能不是很智能<br>参数可能还需要压缩  </p>\n<h3 id=\"3-通过剪切板分享\">3. 通过剪切板分享</h3>\n<p>这个方法适用的场景很单一<br>主要是\b各方都在用小程序的情况下<br>不是用来推广小程序的<br>而是用来分享具体内容的（前提是都已经在用小程序了） </p>\n<p>目前淘宝、支付宝这种方式的分享很多  </p>\n<p><strong>需要注意的是：</strong>\n由于是明文分享，需要做好防修改操作<br>最好就是以签名的方式进行判断  </p>\n<p><strong>优点：</strong><br>分享途径不受限制<br>分享方法也很简单  </p>\n<p><strong>缺点：</strong><br>不适用小程序的推广，单纯的内部分享<br>打开小程序后才能被监听  </p>\n<p><a id='url'></a></p>\n<h2 id=\"利用url参数\">利用URL参数</h2>\n<h4 id=\"方法简述\">方法简述</h4>\n<p>就是前段最朴素的传参，在url后添加?name=value的形式，然后利用路由或者小程序自带的方法读取参数   </p>\n<h4 id=\"方法步骤\">方法步骤</h4>\n<ol>\n<li>在页面onShareAppMessage()配置返回的url，以path?name=value的形式  </li>\n<li>获取参数：  <ol>\n<li>在Page的onLoad生命周期的参数 <code>option.参数名</code> 获取参数值</li>\n<li>还可以在APP的onLaunch生命周期的参数 <code>options.query.参数名</code> 获取</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"注意点\">注意点</h4>\n<ul>\n<li>关于参数的问题，onShareAppMessage()没有指明是否可以在tab页面的url带参数，但是wx路由API指明只能在跳转非tab页时带参数 。  </li>\n<li>必须触发Page的onLoad或者APP的onLaunch才获取的到参数  <h4 id=\"测试结果：\">测试结果：</h4>\n直接打开：\n<img src=\"https://ws4.sinaimg.cn/large/006tNc79gy1fvrmzyjpbkj30v80jignm.jpg\" alt=\"\">\n从分享链接打开：\n<img src=\"https://ws3.sinaimg.cn/large/006tNc79gy1fvrn0kxyohj30ve0m0tax.jpg\" alt=\"\">\n<a id='qrcode'></a></li>\n</ul>\n<h2 id=\"二维码传参\">二维码传参</h2>\n<h4 id=\"方法简述-1\">方法简述</h4>\n<p>利用小程序生成二维码的API生成二维码，让用户直接分享二维码  </p>\n<h4 id=\"方法步骤-1\">方法步骤</h4>\n<ol>\n<li>利用appID和appSECRET获取access_token</li>\n<li>利用access_token作为参数请求二维码API</li>\n<li>接口返回二维码的二进制数据，处理成url</li>\n<li>利用wx接口下载url并保存</li>\n</ol>\n<h4 id=\"注意点-1\">注意点</h4>\n<p>官方二维码生成接口有3种方法，具体参考<a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/qr-code.html\">官方API</a><br>三种方式的参数和url，data格式都不一样，具体可以参考<a href=\"https://www.jianshu.com/p/441882c67b6a\">博客链接</a>   </p>\n<p>注意1、3一共只能生成10000个二维码，2的参数长度不能那个超过32个字符<br>接口返回的图片二进制，最好是在服务端储存然后返回链接给前端。<br><a id='st'></a></p>\n<h2 id=\"shareticket\">shareTicket</h2>\n<h4 id=\"方法简述-2\">方法简述</h4>\n<p>shareTicket的作用是用来换取 群的openID  </p>\n<h4 id=\"方法步骤-2\">方法步骤</h4>\n<ol>\n<li>在showSHareMenu()或者updateShareMenu()中设置shareTicket为true</li>\n<li>将小程序分享到群中</li>\n<li>有用户打开此链接后,即可在App.onLaunch 或 App.onShow 获取到一个 shareTicket</li>\n<li>利用wx.getShareInfo将shareTicket转化成加密数据</li>\n<li>加密数据解密后获得 群openID </li>\n</ol>\n<h4 id=\"注意点-2\">注意点</h4>\n<ol>\n<li>18年10月10号，微信关闭分享回调函数，所以无法再用户分享会后立刻获得shareTicket</li>\n<li>使用App.onLaunch获取要注意，App.onLaunch只在小程序初始化时触发，即当已经打开小程序，再去群里点击链接，是不会触发App.onLaunch的。推荐使用App.onShow<h4 id=\"代码演示\">代码演示</h4>\ndemo7.js:<pre><code>onShareAppMessage: function (res) {\n return {\n     title: &#39;Yrobot test share&#39;,\n     path: &#39;pages/demo7/index?shareID=Yrobot7&#39;\n }\n},\nonShow: function () {\n // setTimeout(() =&gt; {\n //     wx.redirectTo({\n //         url: &#39;../demo5/index&#39;\n //     }) \n // }, 6000);\n wx.showShareMenu({\n     withShareTicket: true,\n });\n},\n</code></pre>\nApp.js:<pre><code>onShow: options =&gt; {\n console.log(&#39;App.onShow&#39;);\n console.log(&#39;shareID: &#39; + options.query.shareID);\n wx.getShareInfo({\n   shareTicket: options.shareTicket,\n   success: res =&gt; {\n     console.log(&#39;wx.getShareInfo:success:&#39;);\n     console.log(res);\n   },\n   fail: res =&gt; {\n     console.log(&#39;wx.getShareInfo:fail&#39;);\n     console.log(res);\n   }\n });\n},\n</code></pre>\n<h4 id=\"效果展示\">效果展示</h4>\n<img src=\"https://ws2.sinaimg.cn/large/006tNc79gy1fvro07yrz1j30ws0m0wsy.jpg\" alt=\"\">\n<a id='cb'></a></li>\n</ol>\n<h2 id=\"剪切板传参\">剪切板传参</h2>\n<h4 id=\"方法简述-3\">方法简述</h4>\n<p>利用剪切板监听的方式，获取页面和参数<br>功能类似于淘宝、支付宝的分享   </p>\n<h4 id=\"方法内容\">方法内容</h4>\n<ul>\n<li>利用wx.setClipboardData设置剪切板内容  </li>\n<li>利用wx.getClipboardData获取剪切内容  </li>\n<li>监听到剪切板时当前小程序的分享字符串时，进行解析、跳转  </li>\n</ul>\n<h4 id=\"注意点-3\">注意点</h4>\n<p>注意传参的话最好进行加密混淆、否则明码容易被用户手动替换<br>最好就是对整体进行签名，签名认证不一致(用户修改过)就不进行解析   </p>\n<h4 id=\"效果展示：\">效果展示：</h4>\n<p>初始进入：<br>    <img src=\"https://ws4.sinaimg.cn/large/006tNc79gy1fvrkc3incyj30gg0ncwfg.jpg\" alt=\"\"><br>复制指令后进入：<br>    <img src=\"https://ws4.sinaimg.cn/large/006tNc79gy1fvrkbv5lqlj30gm0nc3zb.jpg\" alt=\"\">   </p>\n<p><a id='note'></a></p>\n<h2 id=\"分享的注意点\">分享的注意点</h2>\n<p>由于7月5日微信更新API，减少“强制分享至不同群”等滥用分享能力，将不再支持onShareAppMessage()中获取分享状态(即那三个回调函数)，所以也无法在分享后立刻获得群id，而改为用户打开后利用shareTicket换取群id   </p>\n<p>具体参考微信公众平台公告：10月10日起新提交发布的版本，不再支持分享回调参数 success 、fail 、complete</p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MjM5NDAwMTA2MA==&amp;mid=2695730124&amp;idx=1&amp;sn=666a448b047d657350de7684798f48d3&amp;chksm=83d74a07b4a0c311569a748f4d11a5ebcce3ba8f6bd5a4b3183a4fea0b3442634a1c71d3cdd0&amp;scene=21#wechat_redirect\">微信公共平台 - 分享功能调整及小程序组件更新</a>[时间不准确]<br><a href=\"https://mp.weixin.qq.com/cgi-bin/announce?action=getannouncement&amp;announce_id=11526372695t90Dn&amp;version=&amp;lang=zh_CN\">微信公共平台 - 分享功能调整</a>[时间不准确]<br><a href=\"https://developers.weixin.qq.com/community/develop/doc/0000447a5b431807af57249a551408?highLine=%25E5%2588%2586%25E4%25BA%25AB%25E5%259B%259E%25E8%25B0%2583%25E6%2588%2590%25E5%258A%259F\">微信开放社区 - “分享监听”能力调整</a>[时间准确]</p>\n"},"next":{"path":"_blogs/JS/DOM操作/README.md","url":"/blog/JS/DOM操作","title":"DOM操作","author":"yrobot","keywords":"DOM,操作","createTime":1537977600000,"length":6547,"content":"<p><a id='top'></a></p>\n<p><strong>本页目录：</strong><br><a href=\"#nh\">NodeList 和 HTMLCollection</a><br><a href=\"#get\">获取DOM节点的方法</a><br><a href=\"#create\">生成节点的方法</a><br><a href=\"#action\">DOM操作方法</a><br><a href=\"#near\">关系节点获取</a><br><a href=\"#props\">元素属性设置</a><br><a href=\"#style\">元素样式修改</a><br><a href=\"#position\">获取元素宽高、位置</a>  </p>\n<p><a id='nh'></a></p>\n<h2 id=\"nodelist-和-htmlcollection\">NodeList 和 HTMLCollection</h2>\n<h4 id=\"共同点：\">共同点：</h4>\n<ol>\n<li>都是类数组对象，都有length属性</li>\n<li>都有共同的方法：item，可以通过item(index)或者item(id)来访问返回结果中的元素</li>\n<li>都是实时变动的（live），document上的更改会反映到相关对象上（例外：document.querySelectorAll返回的NodeList不是实时的） </li>\n</ol>\n<h4 id=\"不同点：\">不同点：</h4>\n<ol>\n<li>NodeList可以包含任何节点类型（包括换行、元素间的文字），HTMLCollection只包含元素节点（elementNode），elementNode就是HTML中的标签</li>\n<li>HTMLCollection比NodeList多一项方法：namedItem，可以通过传递id或name属性来获取节点信息</li>\n</ol>\n<p><a id='get'></a></p>\n<h2 id=\"获取dom节点的方法\">获取DOM节点的方法</h2>\n<ol>\n<li><p><code>document.getElementById</code> ：根据ID查找元素，大小写敏感，如果有多个结果，只返回第一个；只能document调用</p>\n</li>\n<li><p><code>DOM.getElementsByClassName</code> ：根据类名查找元素，多个类名用空格分隔，返回一个 HTMLCollection 。</p>\n</li>\n<li><p><code>DOM.getElementsByTagName</code> ：根据标签查找元素， * 表示查询所有标签，返回一个 HTMLCollection 。</p>\n</li>\n<li><p><code>document.getElementsByName</code> ：根据元素的name属性查找，返回一个 NodeList 。只能document调用</p>\n</li>\n<li><p><code>DOM.querySelector</code> ：返回单个Node，如果匹配到多个结果，只返回第一个。</p>\n</li>\n<li><p><code>DOM.querySelectorAll</code> ：返回一个 NodeList。不是实时的。</p>\n</li>\n<li><p><code>document.forms</code> ：获取当前页面所有form，返回一个 HTMLCollection ；</p>\n</li>\n<li><p><code>document.documentElement</code>：获取html节点</p>\n</li>\n<li><p> <code>document.body</code>：获取body节点</p>\n</li>\n</ol>\n<p><a id='create'></a></p>\n<h2 id=\"生成节点的方法\">生成节点的方法</h2>\n<ol>\n<li><p><code>document.createElement(&quot;p&quot;)</code>：生成HTML节点元素，参数为节点类型</p>\n</li>\n<li><p><code>document.createTextNode(&quot;text&quot;)</code>:文本内容（无标签包裹），节点间的文本、节点内的文本</p>\n</li>\n<li><p><code>DOM.cloneNode()</code>：方法创建节点的拷贝，并返回该副本。</p>\n</li>\n</ol>\n<p><a id='action'></a></p>\n<h2 id=\"dom操作方法\">DOM操作方法</h2>\n<h3 id=\"添加元素：\">添加元素：</h3>\n<ol>\n<li><code>DOM.appendChild(元素)</code>：在DOM节点末尾添加元素</li>\n<li><code>parentNode.insertBefore(newNode, refNode)</code>：在redNode前添加新元素newNode</li>\n<li><code>DOM.insertAdjacentElement(position,ele)</code>：在DOM指定位置添加元素</li>\n<li><code>DOM.insertAdjacentHTML(position, text)</code>：同上<br> <strong>position</strong><br> A DOMString representing the position relative to the element; must be one of the following strings: 相对于p节点<br> 取值：<code>&#39;beforebegin&#39;</code>、<code>&#39;afterbegin&#39;</code>、<code>&#39;beforeend&#39;</code>、<code>&#39;afterend&#39;</code>  <pre><code>    &lt;!-- beforebegin --&gt;\n    &lt;p&gt;\n        &lt;!-- afterbegin --&gt;\n        foo\n        &lt;!-- beforeend --&gt;\n    &lt;/p&gt;\n    &lt;!-- afterend --&gt;\n</code></pre>\n <strong>text</strong><br> text is the string to be parsed as HTML or XML and inserted into the tree.例如<code>&#39;&lt;div id=&quot;two&quot;&gt;two&lt;/div&gt;&#39;</code><br> <strong>element</strong><br> 要插入到树中的元素.  </li>\n</ol>\n<h3 id=\"删除元素：\">删除元素：</h3>\n<ol>\n<li><code>parentNode.removeChild(node)</code>：删除parentNode下的node节点，注意是实时更新的，删除时index会时时改变<pre><code>function removeNode(node)  \n{  \n    if(!node) return;  \n    if(node.parentNode) node.parentNode.removeChild(node);  \n}  \n</code></pre>\n</li>\n<li><code>parentNode.replaceChild(newChild, oldChild)</code>：将oldChild替换为newChild</li>\n</ol>\n<p><a id='near'></a></p>\n<h2 id=\"关系节点获取\">关系节点获取</h2>\n<ol>\n<li><p><code>parentNode</code> ：返回元素的父节点。Element的父节点可能是Element，Document或DocumentFragment；</p>\n</li>\n<li><p><code>parentElement</code> ：返回元素的父元素节点，与parentNode的区别在于，其父节点必须是一个Element元素，如果不是，则返回null；</p>\n</li>\n<li><p><code>children</code> ：返回一个实时的 HTMLCollection ，子节点都是Element，IE9以下浏览器不支持；</p>\n</li>\n<li><p><code>childNodes</code> ：返回一个实时的 NodeList ，表示元素的子节点列表，注意子节点可能包含文本节点、注释节点等；</p>\n</li>\n<li><p><code>firstChild</code> ：返回第一个子节点，不存在返回null，与之相对应的还有一个 firstElementChild ；</p>\n</li>\n<li><p><code>lastChild</code> ：返回最后一个子节点，不存在返回null，与之相对应的还有一个 lastElementChild ；</p>\n</li>\n<li><p><code>previousSibling</code> ：返回节点的前一个节点，如果不存在则返回null。注意有可能拿到的节点是文本节点或注释节点。</p>\n</li>\n<li><p><code>nextSibling</code> ：返回节点的后一个节点，如果不存在则返回null。注意有可能拿到的节点是文本节点或注释节点。</p>\n</li>\n<li><p> <code>previousElementSibling</code> ：返回前一个element元素节点，前一个节点必须是Element，注意IE9以下浏览器不支持。</p>\n</li>\n<li><p><code>nextElementSibling</code> ：返回后一个element元素节点，后一个节点必须是Element，注意IE9以下浏览器不支持。</p>\n</li>\n</ol>\n<p><a id='props'></a></p>\n<h2 id=\"元素属性设置\">元素属性设置</h2>\n<ol>\n<li><p><code>DOM.setAttribute(name, value)</code>: name是特性名，value是特性值，如 DOM.setAttribute(&#39;name&#39;, &#39;ele&#39;);</p>\n</li>\n<li><p><code>DOM.getAttribute(name)</code>: 返回指定的特性名相应的特性值，如果不存在，则返回nul</p>\n</li>\n<li><p><code>DOM.hasAttribute(name)</code>: 判断DOM是否存在name的属性</p>\n</li>\n<li><p><code>DOM.dataset</code>: 获取html data-开头的属性</p>\n<pre><code>&lt;div id=&quot;user&quot; data-id=&quot;1234567890&quot; data-user=&quot;johndoe&quot; data-date-of-birth&gt;John Doe&lt;/div&gt;\n\nlet el = document.querySelector(&#39;#user&#39;);\n// el.id == &#39;user&#39;\n// el.dataset.id === &#39;1234567890&#39;\n// el.dataset.user === &#39;johndoe&#39;\n// el.dataset.dateOfBirth === &#39;&#39;\n\nel.dataset.dateOfBirth = &#39;1960-10-03&#39;; // set the DOB.\n// &#39;someDataAttr&#39; in el.dataset === false\n\nel.dataset.someDataAttr = &#39;mydata&#39;;\n// &#39;someDataAttr&#39; in el.dataset === true\n</code></pre>\n</li>\n</ol>\n<p><a id='style'></a></p>\n<h2 id=\"元素样式修改\">元素样式修改</h2>\n<ol>\n<li><p>直接修改元素style样式： <em><code>element.sytle.xxx</code>只能获取到内联样式</em>  </p>\n<pre><code>elem.style.color = &#39;red&#39;;    \nelem.style.setProperty(&#39;font-size&#39;, &#39;16px&#39;);    \nelem.style.removeProperty(&#39;color&#39;); \n</code></pre>\n</li>\n<li><p>动态添加样式规则：  </p>\n<pre><code>var style = document.createElement(&#39;style&#39;);  \nstyle.innerHTML = &#39;body{color:red} #top:hover{background-color: red;color: white;}&#39;;  \ndocument.head.appendChild(style);  \n</code></pre>\n</li>\n<li><p>classList获取样式class<br> <strong><code>DOM.classList.xxx()</code>:</strong>   </p>\n<ul>\n<li>add( String [, String] )<br>添加指定的类值。如果这些类已经存在于元素的属性中，那么它们将被忽略。</li>\n<li>remove( String [,String] )<br>删除指定的类值。  </li>\n<li>item ( Number )<br>按集合中的索引返回类值。  </li>\n<li>toggle ( String [, force] )<br>当只有一个参数时：切换 class value; 即如果类存在，则删除它并返回false，如果不存在，则添加它并返回true。<br>当存在第二个参数时：如果第二个参数的计算结果为true，则添加指定的类值，如果计算结果为false，则删除它  </li>\n<li>contains( String )<br>检查元素的类属性中是否存在指定的类值。  </li>\n<li>replace( String, String )<br>用一个新类替换已有类。   </li>\n</ul>\n</li>\n<li><p>使用<code>window.getComputedStyle</code>： <em>借助<code>window.getComputedStyle</code>可以获取应用到元素上的所有样式</em><br> <code>let style = window.getComputedStyle(element, [pseudoElt]);</code>  </p>\n<ul>\n<li>element<br>用于获取计算样式的Element。  </li>\n<li>pseudoElt [可选]<br>指定一个要匹配的伪元素的字符串。必须对普通元素省略（或null）。 </li>\n</ul>\n<p> 返回的style是一个实时的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CSSStyleDeclaration\">CSSStyleDeclaration</a> 对象，当元素的样式更改时，它会自动更新本身。   </p>\n<pre><code>let elem = document.getElementById(&quot;elem-container&quot;);\nwindow.getComputedStyle(elem,null).height = &#39;100px&#39;;\n</code></pre>\n</li>\n</ol>\n<p><a id='position'></a></p>\n<h2 id=\"获取元素宽高、位置\">获取元素宽高、位置</h2>\n<ol>\n<li><p><code>getBoundingClientRect()</code>:<br> <code>DOM.getBoundingClientRect()</code>的属性：</p>\n<table>\n<thead>\n<tr>\n<th>Attribute</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>bottom</td>\n<td>float</td>\n<td>Y 轴，相对于视口原点（viewport origin）矩形盒子的底部。只读。</td>\n</tr>\n<tr>\n<td>height</td>\n<td>float</td>\n<td>矩形盒子的高度（等同于 bottom 减 top）。只读。</td>\n</tr>\n<tr>\n<td>left</td>\n<td>float</td>\n<td>X 轴，相对于视口原点（viewport origin）矩形盒子的左侧。只读。</td>\n</tr>\n<tr>\n<td>right</td>\n<td>float</td>\n<td>X 轴，相对于视口原点（viewport origin）矩形盒子的右侧。只读。</td>\n</tr>\n<tr>\n<td>top</td>\n<td>float</td>\n<td>Y 轴，相对于视口原点（viewport origin）矩形盒子的顶部。只读。</td>\n</tr>\n<tr>\n<td>width</td>\n<td>float</td>\n<td>矩形盒子的宽度（等同于 right 减 left）。只读。</td>\n</tr>\n<tr>\n<td>x</td>\n<td>float</td>\n<td>X 轴，相对于视口原点（viewport origin）矩形盒子的左侧。只读。</td>\n</tr>\n<tr>\n<td>y</td>\n<td>float</td>\n<td>Y 轴，相对于视口原点（viewport origin）矩形盒子的顶部。只读。</td>\n</tr>\n<tr>\n<td>clientRect是一个 DOMRect 对象，包含width、height、left、top、right、bottom，它是相对于窗口顶部而不是文档顶部，__滚动页面时它们的值是会发生变化的__。</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n</li>\n<li><p><code>DOM.clientWidth</code>：表示元素的内部宽度，以像素计。盒模型的content+padding</p>\n</li>\n<li><p><code>DOM.offsetLeft</code>：返回当前元素左上角相对于  HTMLElement.offsetParent (距离元素的最近的父级定位元素) 节点的左边界偏移的像素值。</p>\n</li>\n<li><p><code>DOM.scrollLeft</code> 属性可以读取或设置元素滚动条到元素左边的距离。</p>\n</li>\n</ol>\n"}},"__N_SSG":true}