{"pageProps":{"pre":{"path":"_blogs/CSS3/CSS3-2D转换/README.md","url":"/blog/CSS3/CSS3-2D转换","title":"CSS3-2D转换","author":"yrobot","keywords":"2D,CSS3,转换","createTime":1535385600000,"length":2138,"content":"<p><strong>本页目录：</strong><br><a href=\"#id1\">怎么使用</a>  </p>\n<ul>\n<li><a href=\"#id11\">平移函数translate()</a></li>\n<li><a href=\"#id12\">旋转函数rotate()</a></li>\n<li><a href=\"#id13\">缩放函数scale()</a></li>\n<li><a href=\"#id14\">倾斜函数skew()</a></li>\n<li><a href=\"#id15\">矩阵操作matrix()</a>  </li>\n</ul>\n<p><a href=\"#id2\">浏览器支持</a>  </p>\n<p><strong>CSS3新增的2D变换属性：</strong>   通过 CSS3 转换，我们能够对元素进行移动、缩放、转动、拉长或拉伸。</p>\n<p><a href=\"\" id=\"id1\"></a></p>\n<h2 id=\"怎么使用\">怎么使用</h2>\n<p><a href=\"\" id=\"id11\"></a></p>\n<ol>\n<li><p>__translate()__：设置元素相对于当前的位置。<br><strong>语法：</strong> <code>transform: translate(length,length);</code>  </p>\n<ul>\n<li>设置元素基于当前位置向右向下偏移。\b   </li>\n<li><code>length</code> 偏离的距离数据。<br><strong>示例：</strong> <code>transform: translate(50px,100px);</code><br><img src=\"https://ws1.sinaimg.cn/large/006tNbRwgy1fuockbel15j30ai0euwey.jpg\" alt=\"\"> \n<a href=\"\" id=\"id12\"></a></li>\n</ul>\n</li>\n<li><p>__rotate()__：将元素进行顺时针旋转，旋转中心<code>transform-origin</code>进行设置，默认为元素中心<br><strong>语法：</strong> <code>transform: rotate(rot);</code>     </p>\n<ul>\n<li><code>rot</code> 元素顺时针转动的角度数据。<br><strong>示例：</strong> <code>transform: rotate(30deg);</code><br><img src=\"https://ws4.sinaimg.cn/large/006tNbRwgy1fuockq1b1rj308i0aggmc.jpg\" alt=\"\">\n<a href=\"\" id=\"id13\"></a>   </li>\n</ul>\n</li>\n<li><p>__scale()__：使用scale方法来实现文字或图像的缩放处理<br><strong>语法：</strong> <code>transform: scale(times);</code>  \b   </p>\n<ul>\n<li><code>times</code> 数字，表示相对于当前元素缩放的倍数。可以有两个参数，表示长宽。<br><strong>示例：</strong> <code>transform: scale(0.5, 2);</code><br><img src=\"https://ws4.sinaimg.cn/large/006tNbRwgy1fuoclaoa1uj30fa0lqjsf.jpg\" alt=\"\">\n<a href=\"\" id=\"14\"></a></li>\n</ul>\n</li>\n<li><p>__skew()__：使用skew方法来实现文字或图像的倾斜处理，默认坐标中心在元素中心<br><strong>语法：</strong> <code>transform: skew(rot);</code>  </p>\n<ul>\n<li>参数中分布指定水平方向上的倾斜角度与垂直方向上的倾斜角度。第一个围绕X轴，第二个围绕Y轴    </li>\n<li><code>rot</code> 一方向的倾斜角度。<br><strong>示例：</strong> <code>transform: skew(30deg, 30deg);</code><br><img src=\"https://ws1.sinaimg.cn/large/006tNbRwgy1fuocmattrhj30880a4jrw.jpg\" alt=\"\">\n<a href=\"\" id=\"15\"></a></li>\n</ul>\n</li>\n<li><p>__matrix()__：矩阵操作。matrix() 方法可以把所有 2D 转换方法组合在一起<br><strong>语法：</strong> <code>transform: matrix(a,b,c,d,e,f);</code>  </p>\n<ul>\n<li>实际上，这6参数，对应的矩阵如下： <em>注意书写方向是竖着的\b</em><br><img src=\"https://ws1.sinaimg.cn/large/006tNbRwgy1fuoak0zwuhj304302kq2w.jpg\" alt=\"\">  </li>\n<li>进行运算：<br><img src=\"https://ws1.sinaimg.cn/large/006tNbRwgy1fuoaq82zpxj30cm02xwep.jpg\" alt=\"\"><br>坐标就从[x,y]变成了[ax+cy+e,bx+dy+f]  </li>\n<li>关于为什么要<code>3*3</code>的矩阵？<br>主要是为了统一用矩阵乘的操作，其实平移只需要<code>2*2</code>，为了统一利用<code>3*3</code>乘法变相实现加法(平移)效果。具体思想参考计算机图形学<br><strong>示例：</strong> <code>transform: matrix(1, 0, 0, 1, 30, 30);</code>根据运算，可以得出此矩阵可以将元素向右下平移[30,30]   </li>\n</ul>\n</li>\n</ol>\n<p><a id='id2'></a></p>\n<h2 id=\"浏览器支持\">浏览器支持</h2>\n<p><img src=\"https://ws4.sinaimg.cn/large/006tNbRwgy1fuo7z8j9byj318s04s3zs.jpg\" alt=\"\"><br>Chrome 和 Safari 需要前缀 -webkit-<br>Internet Explorer 9 需要前缀 -ms-  </p>\n"},"blog":{"path":"_blogs/CSS3/CSS3动画/README.md","url":"/blog/CSS3/CSS3动画","title":"CSS3动画","author":"yrobot","keywords":"CSS3,动画","createTime":1535385600000,"length":4309,"content":"<p><strong>本页目录：</strong><br><a href=\"#id1\">怎么使用</a>  </p>\n<ul>\n<li><a href=\"#id11\">定义动画</a></li>\n<li><a href=\"#id12\">引用动画，设定参数</a>  </li>\n</ul>\n<p><a href=\"#id3\">浏览器支持</a>  </p>\n<p><strong>CSS3新增的动画属性：</strong>  通过CSS3动画，我们能够创建动画，这可以在许多网页中取代动画图片、Flash动画 以及 JavaScript。作为页面切换的交互动画。</p>\n<p><strong>NOTE：</strong>  </p>\n<ol>\n<li>\b\b一个元素要使用多个动画时（比如前一秒动画1，后面动画2），可以在css属性中用一个animation表示，动画之间用逗号相隔。例子：<code>animation: animation1 1s, animation2 1s 1s infinite alternate ;</code></li>\n</ol>\n<p><a id='id1'></a></p>\n<h2 id=\"怎么使用\">怎么使用</h2>\n<p>首先用我的话来大致概括一下css3动画的使用流程：</p>\n<ol>\n<li>首先定义一个动画，使用<code>@keyframes</code>来定义动画(包括动画名、动画过程状态)</li>\n<li>在一个元素的class中引用刚定义的动画，设定相关参数(动画时长、动画线性、动画延迟、元素开始和结束的状态、动画是否暂停\b)    </li>\n</ol>\n<p>这样一个css3动画就被定义和使用了。</p>\n<p><a href=\"\" id=\"id11\"></a></p>\n<h4 id=\"1-定义动画\">1. 定义动画</h4>\n<h4 id=\"语法：\"><strong>语法：</strong></h4>\n<ul>\n<li><p><code>@keyframes</code>  @keyframes 规则用于创建动画。在 @keyframes 中规定某项 CSS 样式，就能作为动画中某一帧的状态。<br>  <strong>示例：</strong> 规定一个名叫<code>myAnimation</code>的动画   </p>\n<pre><code>@keyframes myAnimation\n{\n0%   {background: red;}\n25%  {background: yellow;}\n50%  {background: blue;}\n100% {background: green;}\n}\n\n@-moz-keyframes myAnimation /* Firefox */\n{\n0%   {background: red;}\n25%  {background: yellow;}\n50%  {background: blue;}\n100% {background: green;}\n}\n\n@-webkit-keyframes myAnimation /* Safari 和 Chrome */\n{\n0%   {background: red;}\n25%  {background: yellow;}\n50%  {background: blue;}\n100% {background: green;}\n}\n\n@-o-keyframes myAnimation /* Opera */\n{\n0%   {background: red;}\n25%  {background: yellow;}\n50%  {background: blue;}\n100% {background: green;}\n}\n</code></pre>\n</li>\n</ul>\n<p><a href=\"\" id=\"id12\"></a></p>\n<h4 id=\"2-引用动画，设定参数\">2. 引用动画，设定参数</h4>\n<p>在要设定动画的元素class上使用  </p>\n<h4 id=\"语法：-1\"><strong>语法：</strong></h4>\n<ul>\n<li><p><code>animation</code>    所有动画属性的简写属性，除了 animation-play-state 和 animation-fill-mode 属性。<br>  <strong>语法：</strong> <code>animation: name duration timing-function delay iteration-count direction;</code><br>  语法参数含义参看后面的语法解析。<br>  <strong>示例：</strong> </p>\n<pre><code>div\n{\nanimation: myAnimation 5s infinite;\n-webkit-animation: myAnimation 5s infinite; /* Safari 和 Chrome */\n}\n</code></pre>\n</li>\n<li><p><code>animation-name</code>    要引用 @keyframes 动画的名称。  </p>\n</li>\n<li><p><code>animation-duration</code>    规定动画完成一个周期所花费的秒或毫秒。默认是 0。</p>\n</li>\n<li><p><code>animation-timing-function</code>    规定动画的速度曲线。默认是 &quot;ease&quot;。<br>  <strong>语法：</strong> <code>animation-timing-function: value;</code><br>  _linear_：    动画从头到尾的速度是相同的。<br>  _ease_：    默认。动画以低速开始，然后加快，在结束前变慢。<br>  _ease-in_：    动画以低速开始。<br>  _ease-out_：    动画以低速结束。<br>  _ease-in-out_：    动画以低速开始和结束。<br>  _cubic-bezier(n,n,n,n)_： 在 cubic-bezier 函数中自己的值。可能的值是从 0 到 1 的数值。<br>  <strong>示例：</strong>   </p>\n<pre><code>/* W3C 和 Opera: */\n#div1 {animation-timing-function: linear;}\n\n/* Firefox: */\n#div1 {-moz-animation-timing-function: linear;}\n\n/* Safari 和 Chrome: */\n#div1 {-webkit-animation-timing-function: linear;}\n</code></pre>\n</li>\n<li><p><code>animation-delay</code>    规定动画何时开始。默认是 0。  </p>\n</li>\n<li><p><code>animation-iteration-count</code>    规定动画被播放的次数。默认是 1。<br>  <strong>语法：</strong> <code>animation-iteration-count: value;</code><br>  _n_：     定义动画播放次数的数值。<br>  _infinite_：    规定动画应该无限次播放。<br>  <strong>示例：</strong>   </p>\n<pre><code>div\n{\nanimation-iteration-count: 3;\n-webkit-animation-iteration-count: 3; /* Safari 和 Chrome */\n}\n</code></pre>\n</li>\n<li><p><code>animation-direction</code>    规定动画是否在下一周期逆向地播放。默认是 &quot;normal&quot;。<br>  <strong>语法：</strong> <code>animation-direction: normal|alternate;</code><br>  _normal_：    默认值。动画应该正常播放。<br>  _alternate_：    动画应该轮流反向播放。<br>  <strong>示例：</strong>   </p>\n<pre><code>div\n{\nanimation-direction: alternate;\n-webkit-animation-direction: alternate; /* Safari 和 Chrome */\n}\n</code></pre>\n</li>\n<li><p><code>animation-play-state</code>    规定动画是否正在运行或暂停。默认是 &quot;running&quot;。<br> <strong>语法：</strong> <code>animation-play-state: paused|running;</code><br>  _paused_： 规定动画已暂停。<br>  _running_：    规定动画正在播放。<br>  <strong>示例：</strong>   </p>\n<pre><code>div\n{\nanimation-play-state: paused;\n-webkit-animation-play-state: paused; /* Safari 和 Chrome */\n}\n</code></pre>\n</li>\n<li><p><code>animation-fill-mode</code>    规定对象动画时间之外的状态。<br> <strong>语法：</strong> <code>animation-fill-mode : none | forwards | backwards | both;</code><br>  _none_： 不改变默认行为。<br>  _forwards_： 当动画完成后，保持最后一个属性值（在最后一个关键帧中定义）。<br>  _backwards_： 在 animation-delay 所指定的一段时间内，在动画显示之前，应用开始属性值（在第一个关键帧中定义）。<br>  _both_： 向前和向后填充模式都被应用。<br>  <strong>示例：</strong>   </p>\n<pre><code>div\n{\nanimation-fill-mode: forwards;\n-webkit-animation-fill-mode: forwards; /* Safari 和 Chrome */\n}\n</code></pre>\n</li>\n</ul>\n<h4 id=\"效果：\"><strong>效果：</strong></h4>\n<p><a href=\"http://www.w3school.com.cn/tiy/t.asp?f=css3_animation4\">\b参考W3school的demo</a></p>\n<p><a href=\"\" id=\"id3\"></a></p>\n<h2 id=\"浏览器支持\">浏览器支持</h2>\n<p><img src=\"https://ws2.sinaimg.cn/large/0069RVTdgy1fupd51aiv4j30u209k76w.jpg\" alt=\"\"><br>Internet Explorer 10、Firefox 以及 Opera 支持 @keyframes 规则和 animation 属性。<br>Chrome 和 Safari 需要前缀 -webkit-。</p>\n"},"next":{"path":"_blogs/CSS3/CSS3过渡/README.md","url":"/blog/CSS3/CSS3过渡","title":"CSS3过渡","author":"yrobot","keywords":"CSS3,过渡","createTime":1535385600000,"length":1456,"content":"<p><strong>本页目录：</strong><br><a href=\"#id1\">用前思考</a><br><a href=\"#id2\">怎么使用</a><br><a href=\"#id3\">浏览器支持</a>  </p>\n<p><strong>CSS3的过渡属性：</strong>  过渡属性可以设定元素在某些属性改变时，对变化过程填充逐渐变换的动画，类似于flash的补间动画</p>\n<p><a id='id1'></a></p>\n<h2 id=\"用前思考\">用前思考</h2>\n<p>CSS3 过渡是元素从一种样式逐渐改变为另一种的效果<br>那么我们仔细来分析一下，机器需要哪些数据来控制这个补间动画\n首先我们问问自己，如果别人要求我们来实现一种补间动画，我们会问要求人哪些问题呢？</p>\n<ol>\n<li>是对哪些变化进行\b补间动画效果？- what  </li>\n<li>是怎么变的？补间时长、补间线性(渐入渐出|平滑变化) - how  </li>\n<li>\b\b补间是马上就开始吗？ - when  </li>\n</ol>\n<p>好了，有了这些的问题，看下面的内容也就顺多了。    </p>\n<p><a id='id2'></a></p>\n<h2 id=\"怎么使用\">怎么使用</h2>\n<h4 id=\"语法：\"><strong>语法：</strong></h4>\n<ul>\n<li><code>transition</code>  简写属性，用于在一个属性中设置下面\b四个过渡属性。<br>  <strong>示例：</strong>   <code>transition: width 1s linear 2s;</code>  </li>\n<li><code>transition-property</code> all/propertys/none  规定应用过渡的 CSS 属性的名称。propertys间用逗号分隔。\n  <strong>示例：</strong>   <code>transition-property: width,margin;</code>  </li>\n<li><code>transition-duration</code> Number 定义过渡效果花费的时间。默认是 0。  </li>\n<li><code>transition-timing-function</code>  规定过渡效果的时间曲线。默认是 &quot;ease&quot;。<br><em>linear</em> ： 规定以相同速度开始至结束的过渡效果（等于 cubic-bezier(0,0,1,1)）。<br><em>ease</em> ： 规定慢速开始，然后变快，然后慢速结束的过渡效果（cubic-bezier(0.25,0.1,0.25,1)）。<br><em>ease-in</em> ： 规定以慢速开始的过渡效果（等于 cubic-bezier(0.42,0,1,1)）。<br><em>ease-out</em> ： 规定以慢速结束的过渡效果（等于 cubic-bezier(0,0,0.58,1)）。<br><em>ease-in-out</em> ： 规定以慢速开始和结束的过渡效果（等于 cubic-bezier(0.42,0,0.58,1)）。<br><em>cubic-bezier(n,n,n,n)</em> ： 在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值。  </li>\n<li><code>transition-delay</code> 规定过渡效果何时开始。默认是 0。     </li>\n</ul>\n<h4 id=\"效果：\"><strong>效果：</strong></h4>\n<p><a href=\"http://www.w3school.com.cn/tiy/t.asp?f=css3_transition1\">\b参考W3school的demo</a></p>\n<p><a id='id3'></a></p>\n<h2 id=\"浏览器支持\">浏览器支持</h2>\n<p><img src=\"https://ws1.sinaimg.cn/large/0069RVTdgy1fup7uarmc3j30u204sjsn.jpg\" alt=\"\"><br>Internet Explorer 10、Firefox、Chrome 以及 Opera 支持 transition 属性。<br>Safari 需要前缀 -webkit-。</p>\n"}},"__N_SSG":true}