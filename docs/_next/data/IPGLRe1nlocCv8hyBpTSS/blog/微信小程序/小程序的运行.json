{"pageProps":{"pre":{"path":"_blogs/HTML&CSS/利用css绘制多边形/README.md","url":"/blog/HTML&CSS/利用css绘制多边形","title":"利用css绘制多边形","author":"yrobot","keywords":"css,多边形,绘制,利用","createTime":1535904000000,"length":7041,"content":"<p>本文主要讲解内容：</p>\n<ol>\n<li>css 绘制多边形的原理(一定要理解)</li>\n<li>一些简单多边形的绘制示例</li>\n</ol>\n<p><strong>本页目录：</strong><br><a href=\"#id1\">css 绘制多边形的原理</a></p>\n<ul>\n<li><a href=\"#id11\">首先我们要知道 css 盒模型是什么样的</a></li>\n<li><a href=\"#id12\">然后我们还要理解 border</a></li>\n<li><a href=\"#id13\">还要会用 css 伪元素</a></li>\n</ul>\n<p><a href=\"#id2\">css 绘制正四边形</a><br><a href=\"#id3\">css 绘制非正四边形</a><br><a href=\"#id4\">css 绘制三角形</a><br><a href=\"#id5\">css 绘制圆形</a><br><a href=\"#id6\">css 绘制梯形</a><br><a href=\"#id7\">css 绘制正五边形</a><br><a href=\"#id8\">css 绘制正七边形</a></p>\n<p><a id='id1'></a></p>\n<h2 id=\"css-绘制多边形的原理\">css 绘制多边形的原理</h2>\n<p><a href=\"\" id=\"id11\"></a></p>\n<h3 id=\"首先我们要知道-css-盒模型是什么样的\"><strong>首先我们要知道 css 盒模型是什么样的</strong></h3>\n<p><img src=\"https://ws3.sinaimg.cn/large/0069RVTdgy1fuw4xid010j30a809aq38.jpg\" alt=\"\"><br>所谓的盒模型，可以理解为元素的表现内容，看上图可以发现：</p>\n<pre><code><span class=\"hljs-attr\">盒模型 </span>=<span class=\"hljs-string\"> 内容 + padding + border + margin</span>\n</code></pre>\n<p>组成理解(<em>简单介绍</em> )：<br><code>内容</code> 元素内 文本、内元素 所包含的区域<br><code>padding</code> \b 内容 与 border 之间的距离，用于处理 border 和内容的表现关系<br><code>border</code> 边框，将内容包围的轮廓<br><code>margin</code> 元素 与 其他元素之间的距离，用于处理元素间的表现关系，位置样式</p>\n<p>一般理解的 元素 由 内容、padding、border 组成，因为这 3 个影响到元素的表现样式。<br>css2 中<code>width</code>的默认指向是内容宽度，而不是元素(包括 padding、border)的宽度。<br>\b 可以 利用 <code>box-sizing</code> 去修改 width 的指向：</p>\n<ul>\n<li><code>box-sizing: content-box;</code> width、height 指向内容<br> <img src=\"https://ws2.sinaimg.cn/large/0069RVTdgy1fuw5olkw8wj303o010mx2.jpg\" alt=\"\"></li>\n<li><code>box-sizing: border-box;</code> width、height 指向一般元素<br> <img src=\"https://ws1.sinaimg.cn/large/0069RVTdgy1fuw5p6zb80j305q04wdgb.jpg\" alt=\"\"></li>\n</ul>\n<p>看下结果：<em>语言:stylus</em></p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-class\">.boxsize1</span>\n    <span class=\"hljs-attribute\">width</span> <span class=\"hljs-number\">100px</span>\n    <span class=\"hljs-attribute\">height</span> <span class=\"hljs-number\">80px</span>\n    <span class=\"hljs-attribute\">background-color</span> <span class=\"hljs-number\">#393</span>\n    <span class=\"hljs-attribute\">border</span> <span class=\"hljs-number\">20px</span> solid <span class=\"hljs-number\">#999</span>\n<span class=\"hljs-selector-class\">.boxsize2</span>\n    <span class=\"hljs-attribute\">width</span> <span class=\"hljs-number\">100px</span>\n    <span class=\"hljs-attribute\">height</span> <span class=\"hljs-number\">80px</span>\n    <span class=\"hljs-attribute\">background-color</span> <span class=\"hljs-number\">#393</span>\n    <span class=\"hljs-attribute\">border</span> <span class=\"hljs-number\">20px</span> solid <span class=\"hljs-number\">#999</span>\n    <span class=\"hljs-attribute\">box-sizing</span> border-box  //默认元素宽高指定，内容宽高自适应;\n</code></pre>\n<p><img src=\"https://ws4.sinaimg.cn/large/0069RVTdgy1fuw6rtydjoj30ci0egweo.jpg\" alt=\"\"></p>\n<p>本章我们就要利用元素的表现样式(内容、padding、border )进行图形绘制<br><a href=\"\" id=\"id12\"></a></p>\n<h3 id=\"然后我们还要理解-border\"><strong>然后我们还要理解 border</strong></h3>\n<p>我们先来看一段有趣的代码：</p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-class\">.square1</span> {\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0px</span>;\n  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">0px</span>;\n  <span class=\"hljs-attribute\">border-width</span>: <span class=\"hljs-number\">40px</span> <span class=\"hljs-number\">50px</span>;\n  <span class=\"hljs-attribute\">border-style</span>: solid;\n  <span class=\"hljs-attribute\">border-color</span>: <span class=\"hljs-number\">#f00</span> <span class=\"hljs-number\">#008000</span> <span class=\"hljs-number\">#808080</span> <span class=\"hljs-number\">#00f</span>;\n}\n</code></pre>\n<p>想想一下，这段代码的渲染效果是什么样的?<br>css 是怎么处理 border 重叠的部分的？\n好了，想清楚了，就来看一下结果吧。<br><img src=\"https://ws3.sinaimg.cn/large/0069RVTdgy1fuw65nqy85j309001u0sr.jpg\" alt=\"\"><br><img src=\"https://ws4.sinaimg.cn/large/0069RVTdgy1fuw60spn4lj306i05g0sm.jpg\" alt=\"\"><br>他的盒模型：<br><img src=\"https://ws4.sinaimg.cn/large/0069RVTdgy1fuw62e6752j307y05umxa.jpg\" alt=\"\"><br>可以得出规律：</p>\n<ol>\n<li>border 的长 = 盒模型对应的长或宽</li>\n<li>相邻方向 border 冲突时，进行等比均分。</li>\n</ol>\n<p>在接下来的很多例子中都会用到 border 的这个规律<br><a href=\"\" id=\"id13\"></a></p>\n<h3 id=\"还要会用-css-伪元素\"><strong>还要会用 css 伪元素</strong></h3>\n<p><strong>css 的伪元素：</strong> 之所以被称为伪元素，是因为他们不是真正的页面元素，html 没有对应的元素，但是其所有用法和表现行为与真正的页面元素一样，可以对其使用诸如页面元素一样的 css 样式，表面上看上去貌似是页面的某些元素来展现，实际上是 css 样式展现的行为，因此被称为伪元素。</p>\n<p>我们在绘制图形发现需要进行元素组装时，就可以利用伪元素 来减少对 HTML 元素的使用。</p>\n<p><a href=\"https://www.cnblogs.com/wonyun/p/5807191.html\">css 伪元素的用法</a></p>\n<p><a id='id2'></a></p>\n<h2 id=\"css-绘制正四边形\">css 绘制正四边形</h2>\n<p>绘制正四边形最简单的方法就是利用内容，直接使用 width、height</p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-class\">.square2</span> {\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">80px</span>;\n  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">80px</span>;\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#393</span>;\n}\n</code></pre>\n<p><img src=\"https://ws3.sinaimg.cn/large/0069RVTdgy1fuw6wmpdi1j309w092q31.jpg\" alt=\"\"></p>\n<p>当然利用 border 也可以</p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-class\">.square3</span> {\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0px</span>;\n  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">0px</span>;\n  <span class=\"hljs-attribute\">border-width</span>: <span class=\"hljs-number\">40px</span>;\n  <span class=\"hljs-attribute\">border-style</span>: solid;\n  <span class=\"hljs-attribute\">border-color</span>: <span class=\"hljs-number\">#008000</span>;\n}\n</code></pre>\n<p><img src=\"https://ws3.sinaimg.cn/large/0069RVTdgy1fuw6ypx233j30a208s74d.jpg\" alt=\"\"></p>\n<p><a id='id3'></a></p>\n<h2 id=\"css-绘制非正四边形\">css 绘制非正四边形</h2>\n<h4 id=\"绘制平行四边形\">绘制平行四边形</h4>\n<p>平行四边形利用<a href=\"/blog/CSS3/CSS3-2D%E8%BD%AC%E6%8D%A2#14\">css3 的倾斜函数 skew()</a>比较方便</p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-class\">.parallelogram</span> {\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;\n  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">80px</span>;\n  <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#393</span>;\n  -webkit-<span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">skew</span>(-<span class=\"hljs-number\">30deg</span>);\n  -moz-<span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">skew</span>(-<span class=\"hljs-number\">30deg</span>);\n  -o-<span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">skew</span>(-<span class=\"hljs-number\">30deg</span>);\n  <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">skew</span>(-<span class=\"hljs-number\">30deg</span>);\n}\n</code></pre>\n<p><img src=\"https://ws2.sinaimg.cn/large/0069RVTdgy1fuw79w9e6dj30bk08cweo.jpg\" alt=\"\"></p>\n<p>当然使用 <code>border</code> + <code>:after</code>伪类也是可以的</p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-class\">.parallelogram2</span> {\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0px</span>;\n  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">0px</span>;\n  <span class=\"hljs-attribute\">border-bottom</span>: <span class=\"hljs-number\">80px</span> solid <span class=\"hljs-number\">#393</span>;\n  <span class=\"hljs-attribute\">border-left</span>: <span class=\"hljs-number\">80px</span> solid transparent;\n}\n<span class=\"hljs-selector-class\">.parallelogram2</span>:after {\n  display: block;\n  <span class=\"hljs-attribute\">content</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>;\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0px</span>;\n  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">0px</span>;\n  <span class=\"hljs-attribute\">border-top</span>: <span class=\"hljs-number\">80px</span> solid <span class=\"hljs-number\">#393</span>;\n  <span class=\"hljs-attribute\">border-right</span>: <span class=\"hljs-number\">80px</span> solid transparent;\n}\n</code></pre>\n<p><img src=\"https://ws3.sinaimg.cn/large/0069RVTdgy1fuw7opf0mhj30bq06qwee.jpg\" alt=\"\"></p>\n<h4 id=\"绘制菱形\">绘制菱形</h4>\n<p>思路：绘制两个等边三角形，进行拼接（<code>height = sqr(3)*width/2</code>）</p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-class\">.rhombus</span> {\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0px</span>;\n  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">0px</span>;\n  <span class=\"hljs-attribute\">border-bottom</span>: <span class=\"hljs-number\">69.3px</span> solid <span class=\"hljs-number\">#393</span>;\n  <span class=\"hljs-attribute\">border-left</span>: <span class=\"hljs-number\">40px</span> solid transparent;\n  <span class=\"hljs-attribute\">border-right</span>: <span class=\"hljs-number\">40px</span> solid transparent;\n}\n<span class=\"hljs-selector-class\">.rhombus</span>:after {\n  display: block;\n  <span class=\"hljs-attribute\">content</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>;\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0px</span>;\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0px</span>;\n  <span class=\"hljs-attribute\">border-top</span>: <span class=\"hljs-number\">69.3px</span> solid <span class=\"hljs-number\">#393</span>;\n  <span class=\"hljs-attribute\">border-left</span>: <span class=\"hljs-number\">40px</span> solid transparent;\n  <span class=\"hljs-attribute\">border-right</span>: <span class=\"hljs-number\">40px</span> solid transparent;\n}\n</code></pre>\n<p><img src=\"https://ws4.sinaimg.cn/large/0069RVTdgy1fuwb07zx8zj308605o748.jpg\" alt=\"\"></p>\n<p><a id='id4'></a></p>\n<h2 id=\"css-绘制三角形\">css 绘制三角形</h2>\n<h4 id=\"绘制直角三角形\">绘制直角三角形</h4>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-class\">.rightTriangle</span> <span class=\"hljs-attribute\">width</span> 0px <span class=\"hljs-attribute\">height</span> 0px <span class=\"hljs-attribute\">border-bottom</span> 80px solid <span class=\"hljs-selector-id\">#393</span> <span class=\"hljs-attribute\">border-left</span> 80px solid transparent;\n</code></pre>\n<p><img src=\"https://ws2.sinaimg.cn/large/0069RVTdgy1fuwcpx6dhfj306s06aa9x.jpg\" alt=\"\"></p>\n<h4 id=\"绘制等边三角形\">绘制等边三角形</h4>\n<p>等边三角形的宽高比为 1 : sqr(3)/2<br>所以 \b 可以根据底边长计算三角形高<code>height = sqr(3)*width/2</code><br>本例中左右 border 宽为 40，所以底边长为 80，从而计算出底部 border 宽应为 69.3</p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-class\">.triangle</span>\n  <span class=\"hljs-attribute\">width</span>\n  0px\n  <span class=\"hljs-attribute\">height</span>\n  0px\n  <span class=\"hljs-attribute\">border-bottom</span>\n  69<span class=\"hljs-selector-class\">.3px</span>\n  solid\n  <span class=\"hljs-selector-id\">#393</span>\n  <span class=\"hljs-attribute\">border-left</span>\n  40px\n  solid\n  transparent\n  <span class=\"hljs-attribute\">border-right</span>\n  40px\n  solid\n  transparent;\n</code></pre>\n<p><img src=\"https://ws1.sinaimg.cn/large/0069RVTdgy1fuwb2kyyzqj306g064746.jpg\" alt=\"\"></p>\n<p><a id='id5'></a></p>\n<h2 id=\"css-绘制圆形\">css 绘制圆形</h2>\n<p>圆形最简单的方式就是设置<code>border-radius</code>为 50%</p>\n<pre><code class=\"language-css\">.circle1 <span class=\"hljs-built_in\">width</span> 80px <span class=\"hljs-built_in\">height</span> 80px <span class=\"hljs-built_in\">border</span>-<span class=\"hljs-built_in\">radius</span> <span class=\"hljs-number\">50</span><span class=\"hljs-symbol\">%</span> <span class=\"hljs-built_in\">background</span>-<span class=\"hljs-built_in\">color</span> #<span class=\"hljs-number\">393</span>;\n</code></pre>\n<p><img src=\"https://ws1.sinaimg.cn/large/0069RVTdgy1fuwcsqggv5j306c068a9z.jpg\" alt=\"\"></p>\n<p>也可以使用 border 实现</p>\n<pre><code class=\"language-css\">.circle2 <span class=\"hljs-built_in\">width</span> <span class=\"hljs-number\">0px</span> <span class=\"hljs-built_in\">height</span> <span class=\"hljs-number\">0px</span> <span class=\"hljs-built_in\">border</span> 40px solid #<span class=\"hljs-number\">393</span> <span class=\"hljs-built_in\">border</span>-<span class=\"hljs-built_in\">radius</span> <span class=\"hljs-number\">50</span><span class=\"hljs-symbol\">%</span>;\n</code></pre>\n<p>\b 哎？猜猜这时候设置 padding 是什么样子的</p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-class\">.circle3</span> <span class=\"hljs-attribute\">width</span> 0px <span class=\"hljs-attribute\">height</span> 0px <span class=\"hljs-attribute\">border</span> 40px solid <span class=\"hljs-selector-id\">#393</span> <span class=\"hljs-attribute\">border-radius</span> 50% <span class=\"hljs-attribute\">padding</span> 20px;\n</code></pre>\n<p><img src=\"https://ws3.sinaimg.cn/large/0069RVTdgy1fuwcyjhdw6j308408874b.jpg\" alt=\"\"><br>看来 border-radius 把内外角度都设置了</p>\n<p><a id='id6'></a></p>\n<h2 id=\"css-绘制梯形\">css 绘制梯形</h2>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-class\">.trapezoid</span>\n  <span class=\"hljs-attribute\">width</span>\n  40px\n  <span class=\"hljs-attribute\">height</span>\n  0px\n  <span class=\"hljs-attribute\">border-top</span>\n  40px\n  solid\n  <span class=\"hljs-selector-id\">#393</span>\n  <span class=\"hljs-attribute\">border-left</span>\n  20px\n  solid\n  transparent\n  <span class=\"hljs-attribute\">border-right</span>\n  20px\n  solid\n  transparent;\n</code></pre>\n<p><img src=\"https://ws1.sinaimg.cn/large/0069RVTdgy1fuwd59x6bsj306w04gwec.jpg\" alt=\"\"></p>\n<p><a id='id7'></a></p>\n<h2 id=\"css-绘制正五边形\">css 绘制正五边形</h2>\n<p>正五边形可以拆分成上下两个部分：上边一个等腰三角形，下面一个等腰梯形，具体长宽计算这里不做介绍</p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-class\">.pentagon</span> {\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0px</span>;\n  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">0px</span>;\n  <span class=\"hljs-attribute\">border-top</span>: <span class=\"hljs-number\">0px</span>;\n  <span class=\"hljs-attribute\">border-right</span>: <span class=\"hljs-number\">81px</span> solid transparent;\n  <span class=\"hljs-attribute\">border-left</span>: <span class=\"hljs-number\">81px</span> solid transparent;\n  <span class=\"hljs-attribute\">border-bottom</span>: <span class=\"hljs-number\">59px</span> solid <span class=\"hljs-number\">#393</span>;\n}\n<span class=\"hljs-selector-class\">.pentagon</span>:after {\n  position: relative;\n  <span class=\"hljs-attribute\">left</span>: -<span class=\"hljs-number\">81px</span>;\n  <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">59px</span>;\n  <span class=\"hljs-attribute\">display</span>: block;\n  <span class=\"hljs-attribute\">content</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>;\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;\n  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">0px</span>;\n  <span class=\"hljs-attribute\">border-top</span>: <span class=\"hljs-number\">95px</span> solid <span class=\"hljs-number\">#393</span>;\n  <span class=\"hljs-attribute\">border-left</span>: <span class=\"hljs-number\">31px</span> solid transparent;\n  <span class=\"hljs-attribute\">border-right</span>: <span class=\"hljs-number\">31px</span> solid transparent;\n}\n</code></pre>\n<p><img src=\"https://ws3.sinaimg.cn/large/0069RVTdgy1fuwdlbgoi3j30be0a8t8r.jpg\" alt=\"\"></p>\n<p><a id='id8'></a></p>\n<h2 id=\"css-绘制正七边形\">css 绘制正七边形</h2>\n<p>正七边形比较复杂，需要将整个图形分成 3 份来做<br><img src=\"https://ws1.sinaimg.cn/large/0069RVTdgy1fuwdo5l0qrj307s07974m.jpg\" alt=\"\"><br>上：等腰三角形<br>中：等腰梯形<br>下：等腰梯形</p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-class\">.heptagon</span> {\n  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">0px</span>;\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">180px</span>;\n  <span class=\"hljs-attribute\">border-left</span>: <span class=\"hljs-number\">22px</span> solid transparent;\n  <span class=\"hljs-attribute\">border-right</span>: <span class=\"hljs-number\">22px</span> solid transparent;\n  <span class=\"hljs-attribute\">border-bottom</span>: <span class=\"hljs-number\">97px</span> solid <span class=\"hljs-number\">#393</span>;\n  <span class=\"hljs-attribute\">margin-top</span>: <span class=\"hljs-number\">63px</span>;\n}\n<span class=\"hljs-selector-class\">.heptagon</span>:before {\n  display: block;\n  <span class=\"hljs-attribute\">content</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>;\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0px</span>;\n  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">0px</span>;\n  <span class=\"hljs-attribute\">border-right</span>: <span class=\"hljs-number\">90px</span> solid transparent;\n  <span class=\"hljs-attribute\">border-left</span>: <span class=\"hljs-number\">90px</span> solid transparent;\n  <span class=\"hljs-attribute\">border-bottom</span>: <span class=\"hljs-number\">43px</span> solid <span class=\"hljs-number\">#393</span>;\n  <span class=\"hljs-attribute\">position</span>: relative;\n  <span class=\"hljs-attribute\">top</span>: -<span class=\"hljs-number\">43px</span>;\n}\n<span class=\"hljs-selector-class\">.heptagon</span>:after {\n  width: <span class=\"hljs-number\">100px</span>;\n  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">0px</span>;\n  <span class=\"hljs-attribute\">content</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>;\n  <span class=\"hljs-attribute\">display</span>: block;\n  <span class=\"hljs-attribute\">border-top</span>: <span class=\"hljs-number\">78px</span> solid <span class=\"hljs-number\">#393</span>;\n  <span class=\"hljs-attribute\">border-left</span>: <span class=\"hljs-number\">62px</span> solid transparent;\n  <span class=\"hljs-attribute\">border-right</span>: <span class=\"hljs-number\">62px</span> solid transparent;\n  <span class=\"hljs-attribute\">position</span>: relative;\n  <span class=\"hljs-attribute\">left</span>: -<span class=\"hljs-number\">22px</span>;\n  <span class=\"hljs-attribute\">bottom</span>: -<span class=\"hljs-number\">54px</span>;\n}\n</code></pre>\n<p><img src=\"https://ws3.sinaimg.cn/large/0069RVTdgy1fuwe4xtv6lj30ec0dowen.jpg\" alt=\"\"></p>\n"},"blog":{"path":"_blogs/微信小程序/小程序的运行.md","url":"/blog/微信小程序/小程序的运行","title":"小程序的运行","author":"yrobot","keywords":"小程序,运行","createTime":1535904000000,"length":1360,"content":"<p><strong>本页目录：</strong><br><a href=\"#id1\">小程序的运行环境</a><br><a href=\"#id2\">小程序目录结</a><br><a href=\"#id3\">小程序运行机制</a>  </p>\n<p><a id='id1'></a></p>\n<h2 id=\"小程序的运行环境\">小程序的运行环境</h2>\n<p>微信小程序运行在三端：iOS、Android 和 用于调试的开发者工具。</p>\n<p>三端的脚本执行环境以及用于渲染非原生组件的环境是各不相同的：</p>\n<ul>\n<li>在 iOS 上，小程序的 javascript 代码是运行在 JavaScriptCore 中，是由 WKWebView 来渲染的，环境有 - iOS8、iOS9、iOS10  </li>\n<li>在 Android 上，小程序的 javascript 代码是通过 X5 JSCore来解析，是由 X5 基于 Mobile Chrome 53/57 内- 核来渲染的  </li>\n<li>在 开发工具上， 小程序的 javascript 代码是运行在 nwjs 中，是由 Chrome Webview 来渲染的  </li>\n</ul>\n<p>尽管三端的环境是十分相似的，但是还是有些许区别：  </p>\n<ol>\n<li>ES6 语法支持不一致：语法上开发者可以通过开启 ES6 转 ES5 的功能来规避。详情</li>\n<li>wxss 渲染表现不一致：尽管可以通过开启样式补全来规避大部分的问题 详情，还是建议开发者需要在 iOS 和 Android 上分别检查小程序的真实表现。</li>\n</ol>\n<p><a id='id2'></a></p>\n<h2 id=\"小程序目录结\">小程序目录结</h2>\n<pre><code>project\n├── pages\n|   ├── <span class=\"hljs-keyword\">index</span>\n|   |   ├── <span class=\"hljs-keyword\">index</span>.json  <span class=\"hljs-keyword\">index</span> 页面配置\n|   |   ├── <span class=\"hljs-keyword\">index</span>.js    <span class=\"hljs-keyword\">index</span> 页面逻辑\n|   |   ├── <span class=\"hljs-keyword\">index</span>.wxml  <span class=\"hljs-keyword\">index</span> 页面结构\n|   |   └── <span class=\"hljs-keyword\">index</span>.wxss  <span class=\"hljs-keyword\">index</span> 页面样式表\n|   └── <span class=\"hljs-keyword\">log</span>\n|       ├── <span class=\"hljs-keyword\">log</span>.json    <span class=\"hljs-keyword\">log</span> 页面配置\n|       ├── <span class=\"hljs-keyword\">log</span>.wxml    <span class=\"hljs-keyword\">log</span> 页面逻辑\n|       ├── <span class=\"hljs-keyword\">log</span>.js      <span class=\"hljs-keyword\">log</span> 页面结构\n|       └── <span class=\"hljs-keyword\">log</span>.wxss    <span class=\"hljs-keyword\">log</span> 页面样式表·\n├── app.js              小程序逻辑\n├── app.json            小程序公共设置\n└── app.wxss            小程序公共样式表\n</code></pre>\n<p><a id='id3'></a></p>\n<h2 id=\"小程序运行机制\">小程序运行机制</h2>\n<ul>\n<li>小程序没有重启的概念</li>\n<li><strong>前台、后台定义：</strong> 当用户点击左上角关闭，或者按了设备 Home 键离开微信，小程序并没有直接销毁，而是进入了后台；当再次进入微信或再次打开小程序，又会从后台进入前台。需要注意的是：只有当小程序进入后台一定时间，或者系统资源占用过高，才会被真正的销毁。</li>\n<li>当小程序进入后台，客户端会维持一段时间的运行状态，超过一定时间后（目前是5分钟）会被微信主动销毁</li>\n<li>当短时间内（5s）连续收到两次以上收到系统内存告警，会进行小程序的销毁\n<img src=\"https://ws3.sinaimg.cn/large/0069RVTdgy1fuwgqm9y1oj30my0bxgmx.jpg\" alt=\"\"></li>\n</ul>\n"},"next":{"path":"_blogs/CSS3/CSS3-3D转换/README.md","url":"/blog/CSS3/CSS3-3D转换","title":"CSS3-3D转换","author":"yrobot","keywords":"3D,CSS3,转换","createTime":1535644800000,"length":5401,"content":"<p><strong>本页目录：</strong><br><a href=\"#id1\">3D\b 元素的属性</a></p>\n<ul>\n<li><a href=\"#id11\">transform</a></li>\n<li><a href=\"#id12\">transform-origin</a></li>\n<li><a href=\"#id13\">transform-style</a></li>\n<li><a href=\"#id14\">perspective</a></li>\n<li><a href=\"#id15\">perspective-origin</a></li>\n<li><a href=\"#id16\">backface-visibility</a></li>\n</ul>\n<p><a href=\"#id2\">3D 元素的方法</a></p>\n<p><strong>CSS3 新增的 3D 变换属性：</strong> CSS3 3D 转换支持开发者在 css 代码中利用 css3 的 3D 函数，在页面里开发出一些简单的 3D 效果。</p>\n<p><strong>本节内容要点：</strong></p>\n<ul>\n<li>利用 transform 改变各个元素位置</li>\n<li>利用 transition 增加动态效果</li>\n<li>利用 perspective 属性改变视角</li>\n</ul>\n<p><a href=\"\" id=\"id1\"></a></p>\n<h2 id=\"3d\b-元素的属性\">3D\b 元素的属性</h2>\n<p><a href=\"\" id=\"id11\"></a></p>\n<ol>\n<li><strong>transform</strong>：利用一些方法对元素进行 2D 或者 3D 转换。具体 \b 转换方法参看 <a href=\"#id2\">3D 元素的方法</a><br><strong>语法：</strong> <code>transform: none|transform-functions;</code><ul>\n<li><code>none</code> 定义不进行转换。</li>\n<li><code>transform-functions</code> 使用<a href=\"#id2\">3D 元素的方法</a></li>\n</ul>\n</li>\n</ol>\n<p><a href=\"\" id=\"id12\"></a></p>\n<ol start=\"2\">\n<li><p><strong>transform-origin</strong>：设置元素坐标系原点的位置，影响到 2D、3D 的旋转效果<br> <strong>语法：</strong> <code>transform-origin: x-axis y-axis z-axis;</code></p>\n<ul>\n<li>x-axis 定义视图被置于 X 轴的何处。可能的值：<br><em>left</em><br><em>center</em><br><em>right</em><br><em>length</em><br><em>%</em></li>\n<li>y-axis 定义视图被置于 Y 轴的何处。可能的值：<br><em>top</em><br><em>center</em><br><em>bottom</em><br><em>length</em><br><em>%</em></li>\n<li>z-axis 定义视图被置于 Z 轴的何处。可能的值：<br><em>length</em></li>\n</ul>\n<p><strong>示例：</strong> <code>-webkit-transform-origin:20% 40%; /* Safari 和 Chrome */</code></p>\n<p><strong>取值对比：</strong> 1.数字和百分比相对于左上角 2.关键字相对于整个元素</p>\n<pre><code> <span class=\"hljs-built_in\">top</span> = <span class=\"hljs-built_in\">top</span> center = center <span class=\"hljs-built_in\">top</span> = <span class=\"hljs-number\">50</span>% <span class=\"hljs-number\">0</span>\n <span class=\"hljs-built_in\">right</span> = <span class=\"hljs-built_in\">right</span> center = center <span class=\"hljs-built_in\">right</span> = <span class=\"hljs-number\">100</span>%或(<span class=\"hljs-number\">100</span>% <span class=\"hljs-number\">50</span>%)\n <span class=\"hljs-built_in\">bottom</span> = <span class=\"hljs-built_in\">bottom</span> center = center <span class=\"hljs-built_in\">bottom</span> = <span class=\"hljs-number\">50</span>% <span class=\"hljs-number\">100</span>%\n <span class=\"hljs-built_in\">left</span> = <span class=\"hljs-built_in\">left</span> center = center <span class=\"hljs-built_in\">left</span> = <span class=\"hljs-number\">0</span>或(<span class=\"hljs-number\">0</span> <span class=\"hljs-number\">50</span>%)\n center = center center = <span class=\"hljs-number\">50</span>%或（<span class=\"hljs-number\">50</span>% <span class=\"hljs-number\">50</span>%）\n <span class=\"hljs-built_in\">top</span> <span class=\"hljs-built_in\">left</span> = <span class=\"hljs-built_in\">left</span> <span class=\"hljs-built_in\">top</span> = <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span>\n <span class=\"hljs-built_in\">right</span> <span class=\"hljs-built_in\">top</span> = <span class=\"hljs-built_in\">top</span> <span class=\"hljs-built_in\">right</span> = <span class=\"hljs-number\">100</span>% <span class=\"hljs-number\">0</span>\n <span class=\"hljs-built_in\">bottom</span> <span class=\"hljs-built_in\">right</span> = <span class=\"hljs-built_in\">right</span> <span class=\"hljs-built_in\">bottom</span> = <span class=\"hljs-number\">100</span>% <span class=\"hljs-number\">100</span>%\n <span class=\"hljs-built_in\">bottom</span> <span class=\"hljs-built_in\">left</span> = <span class=\"hljs-built_in\">left</span> <span class=\"hljs-built_in\">bottom</span> = <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">100</span>%\n</code></pre>\n<p><strong>浏览器支持</strong><br><img src=\"https://ws1.sinaimg.cn/large/006tNbRwgy1fut27g9rczj30v806oabn.jpg\" alt=\"\">\nInternet Explorer 10、Firefox、Opera 支持 transform-origin 属性。<br>Internet Explorer 9 支持替代的 -ms-transform-origin 属性（仅适用于 2D 转换）。<br>Safari 和 Chrome 支持替代的 -webkit-transform-origin 属性（3D 和 2D 转换）。<br>Opera 只支持 2D 转换。</p>\n</li>\n</ol>\n<p><a href=\"\" id=\"id13\"></a></p>\n<ol start=\"3\">\n<li><p><strong>transform-style</strong>：规定如何在 3D 空间中呈现被嵌套的元素<br> <strong>语法：</strong> <code>transform-style: flat|preserve-3d;</code> \b</p>\n<ul>\n<li><code>flat</code> 所有子元素在 2D 平面呈现。<br> 沿着 X 轴或 Y 轴方向旋转该元素将导致位于正或负 Z 轴位置的子元素显示在该元素的平面上，而不是它的前面或者后面。著作权归作者所有。</li>\n<li><code>preserve-3d</code> 子元素将保留其 3D 位置。</li>\n</ul>\n<p><strong>示例：</strong> <code>-webkit-transform-style: preserve-3d; /* Safari 和 Chrome */</code></p>\n<p><strong>浏览器支持</strong><br><img src=\"https://ws1.sinaimg.cn/large/006tNbRwgy1fut2ohsc19j30v006mtae.jpg\" alt=\"\">\nFirefox 支持 transform-style 属性。<br>Chrome、Safari 和 Opera 支持替代的 -webkit-transform-style 属性。</p>\n</li>\n</ol>\n<p><a href=\"\" id=\"id14\"></a></p>\n<ol start=\"4\">\n<li><p><strong>perspective</strong>：perspective 属性定义 3D 元素距视图的距离，以像素计。（改变视角距离）</p>\n<ul>\n<li>提示：请与 perspective-origin 属性一同使用该属性，这样您就能够改变 3D 元素的底部位置。\n<strong>语法：</strong> <code>perspective: number|none;</code></li>\n<li><code>number</code> 元素距离视图的距离，以像素计。</li>\n<li><code>none</code> 默认值。与 0 相同。不设置透视。</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">div</span> {\n  <span class=\"hljs-attribute\">perspective</span>: <span class=\"hljs-number\">500</span>;\n  -webkit-<span class=\"hljs-attribute\">perspective</span>: <span class=\"hljs-number\">500</span>; <span class=\"hljs-comment\">/* Safari 和 Chrome */</span>\n}\n</code></pre>\n<p><strong>浏览器支持</strong><br>目前浏览器都不支持 perspective 属性。<br>Chrome 和 Safari 支持替代的 -webkit-perspective 属性。</p>\n</li>\n</ol>\n<p><a href=\"\" id=\"id15\"></a></p>\n<ol start=\"5\">\n<li><p><strong>perspective-origin</strong>：改变 3D 元素的底部位置（改变视角的朝向）<br> <strong>语法：</strong> <code>perspective-origin: x-axis y-axis;</code> 数字和百分比相对于左上角</p>\n<ul>\n<li>x-axis 定义视图被置于 X 轴的何处。可能的值：<br><em>left</em><br><em>center</em><br><em>right</em><br><em>length</em><br><em>%</em></li>\n<li>y-axis 定义视图被置于 Y 轴的何处。可能的值：<br><em>top</em><br><em>center</em><br><em>bottom</em><br><em>length</em><br><em>%</em></li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">div</span> {\n  <span class=\"hljs-attribute\">perspective</span>: <span class=\"hljs-number\">150</span>;\n  <span class=\"hljs-attribute\">perspective-origin</span>: <span class=\"hljs-number\">10%</span> <span class=\"hljs-number\">10%</span>;\n  -webkit-<span class=\"hljs-attribute\">perspective</span>: <span class=\"hljs-number\">150</span>; <span class=\"hljs-comment\">/* Safari 和 Chrome */</span>\n  -webkit-<span class=\"hljs-attribute\">perspective-origin</span>: <span class=\"hljs-number\">10%</span> <span class=\"hljs-number\">10%</span>; <span class=\"hljs-comment\">/* Safari 和 Chrome */</span>\n}\n</code></pre>\n<p><strong>浏览器支持</strong><br>目前浏览器都不支持 perspective-origin 属性。<br>Chrome 和 Safari 支持替代的 -webkit-perspecitve-origin 属性。</p>\n</li>\n</ol>\n<p><a href=\"\" id=\"id16\"></a></p>\n<ol start=\"6\">\n<li><p><strong>backface-visibility</strong>：backface-visibility 属性定义当元素不面向屏幕时是否可见。<br> <strong>语法：</strong> <code>backface-visibility 属性定义当元素不面向屏幕时是否可见。</code></p>\n<ul>\n<li><code>visible</code> 背面是可见的。</li>\n<li><code>hidden</code> 背面是不可见的。</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">div</span> {\n  <span class=\"hljs-attribute\">backface-visibility</span>: hidden;\n  -webkit-<span class=\"hljs-attribute\">backface-visibility</span>: hidden; <span class=\"hljs-comment\">/* Chrome 和 Safari */</span>\n  -moz-<span class=\"hljs-attribute\">backface-visibility</span>: hidden; <span class=\"hljs-comment\">/* Firefox */</span>\n  -ms-<span class=\"hljs-attribute\">backface-visibility</span>: hidden; <span class=\"hljs-comment\">/* Internet Explorer */</span>\n}\n</code></pre>\n<p><strong>浏览器支持</strong><br> 只有 Internet Explorer 10+ 和 Firefox 支持 backface-visibility 属性。<br> Opera 15+、Safari 和 Chrome 支持替代的 -webkit-backface-visibility 属性。<br><a id='id2'></a></p>\n</li>\n</ol>\n<h2 id=\"3d-元素的方法\">3D 元素的方法</h2>\n<p><strong>语法：</strong> <code>transform: none|transform-functions;</code> 方法使用应该加<code>transform:</code>前缀</p>\n<ul>\n<li><code>none</code> 定义不进行转换。</li>\n<li><code>transform-functions</code> 3D 变换函数。具体函数及功能如下：<ul>\n<li><em>matrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n)</em> 定义 3D 转换，使用 16 个值的 4x4 矩阵。</li>\n<li><em>translate3d(x,y,z)</em> 定义 3D 转化。</li>\n<li><em>translateX(x)</em> 定义 3D 转化，仅使用用于 X 轴的值。</li>\n<li><em>translateY(y)</em> 定义 3D 转化，仅使用用于 Y 轴的值。</li>\n<li><em>translateZ(z)</em> 定义 3D 转化，仅使用用于 Z 轴的值。</li>\n<li><em>scale3d(x,y,z)</em> 定义 3D 缩放转换。</li>\n<li><em>scaleX(x)</em> 定义 3D 缩放转换，通过给定一个 X 轴的值。</li>\n<li><em>scaleY(y)</em> 定义 3D 缩放转换，通过给定一个 Y 轴的值。</li>\n<li><em>scaleZ(z)</em> 定义 3D 缩放转换，通过给定一个 Z 轴的值。</li>\n<li><em>rotate3d(x,y,z,angle)</em> 定义 3D 旋转。</li>\n<li><em>rotateX(angle)</em> 定义沿 X 轴的 3D 旋转。</li>\n<li><em>rotateY(angle)</em> 定义沿 Y 轴的 3D 旋转。</li>\n<li><em>rotateZ(angle)</em> 定义沿 Z 轴的 3D 旋转。</li>\n<li><em>perspective(n)</em> 定义 3D 转换元素的透视视图。</li>\n</ul>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">div</span> {\n  <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">rotate</span>(<span class=\"hljs-number\">7deg</span>);\n  -ms-<span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">rotate</span>(<span class=\"hljs-number\">7deg</span>); <span class=\"hljs-comment\">/* IE 9 */</span>\n  -moz-<span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">rotate</span>(<span class=\"hljs-number\">7deg</span>); <span class=\"hljs-comment\">/* Firefox */</span>\n  -webkit-<span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">rotate</span>(<span class=\"hljs-number\">7deg</span>); <span class=\"hljs-comment\">/* Safari 和 Chrome */</span>\n  -o-<span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">rotate</span>(<span class=\"hljs-number\">7deg</span>); <span class=\"hljs-comment\">/* Opera */</span>\n}\n</code></pre>\n<p><strong>浏览器支持</strong><br><img src=\"https://ws4.sinaimg.cn/large/006tNbRwgy1fuqf7u1vz0j30u204ot9y.jpg\" alt=\"\">\nInternet Explorer 10、Firefox、Opera 支持 transform 属性。<br>Internet Explorer 9 支持替代的 -ms-transform 属性（仅适用于 2D 转换）。<br>Safari 和 Chrome 支持替代的 -webkit-transform 属性（3D 和 2D 转换）。<br>Opera 只支持 2D 转换。</p>\n"}},"__N_SSG":true}