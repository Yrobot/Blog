{"pageProps":{"pre":{"path":"_blogs/CSS3/CSS3-3D转换/README.md","url":"/blog/CSS3/CSS3-3D转换","title":"CSS3-3D转换","author":"yrobot","keywords":"3D,CSS3,转换","createTime":1535644800000,"length":5401,"content":"<p><strong>本页目录：</strong><br><a href=\"#id1\">3D\b 元素的属性</a></p>\n<ul>\n<li><a href=\"#id11\">transform</a></li>\n<li><a href=\"#id12\">transform-origin</a></li>\n<li><a href=\"#id13\">transform-style</a></li>\n<li><a href=\"#id14\">perspective</a></li>\n<li><a href=\"#id15\">perspective-origin</a></li>\n<li><a href=\"#id16\">backface-visibility</a></li>\n</ul>\n<p><a href=\"#id2\">3D 元素的方法</a></p>\n<p><strong>CSS3 新增的 3D 变换属性：</strong> CSS3 3D 转换支持开发者在 css 代码中利用 css3 的 3D 函数，在页面里开发出一些简单的 3D 效果。</p>\n<p><strong>本节内容要点：</strong></p>\n<ul>\n<li>利用 transform 改变各个元素位置</li>\n<li>利用 transition 增加动态效果</li>\n<li>利用 perspective 属性改变视角</li>\n</ul>\n<p><a href=\"\" id=\"id1\"></a></p>\n<h2 id=\"3d\b-元素的属性\">3D\b 元素的属性</h2>\n<p><a href=\"\" id=\"id11\"></a></p>\n<ol>\n<li><strong>transform</strong>：利用一些方法对元素进行 2D 或者 3D 转换。具体 \b 转换方法参看 <a href=\"#id2\">3D 元素的方法</a><br><strong>语法：</strong> <code>transform: none|transform-functions;</code><ul>\n<li><code>none</code> 定义不进行转换。</li>\n<li><code>transform-functions</code> 使用<a href=\"#id2\">3D 元素的方法</a></li>\n</ul>\n</li>\n</ol>\n<p><a href=\"\" id=\"id12\"></a></p>\n<ol start=\"2\">\n<li><p><strong>transform-origin</strong>：设置元素坐标系原点的位置，影响到 2D、3D 的旋转效果<br> <strong>语法：</strong> <code>transform-origin: x-axis y-axis z-axis;</code></p>\n<ul>\n<li>x-axis 定义视图被置于 X 轴的何处。可能的值：<br><em>left</em><br><em>center</em><br><em>right</em><br><em>length</em><br><em>%</em></li>\n<li>y-axis 定义视图被置于 Y 轴的何处。可能的值：<br><em>top</em><br><em>center</em><br><em>bottom</em><br><em>length</em><br><em>%</em></li>\n<li>z-axis 定义视图被置于 Z 轴的何处。可能的值：<br><em>length</em></li>\n</ul>\n<p><strong>示例：</strong> <code>-webkit-transform-origin:20% 40%; /* Safari 和 Chrome */</code></p>\n<p><strong>取值对比：</strong> 1.数字和百分比相对于左上角 2.关键字相对于整个元素</p>\n<pre><code> <span class=\"hljs-built_in\">top</span> = <span class=\"hljs-built_in\">top</span> center = center <span class=\"hljs-built_in\">top</span> = <span class=\"hljs-number\">50</span>% <span class=\"hljs-number\">0</span>\n <span class=\"hljs-built_in\">right</span> = <span class=\"hljs-built_in\">right</span> center = center <span class=\"hljs-built_in\">right</span> = <span class=\"hljs-number\">100</span>%或(<span class=\"hljs-number\">100</span>% <span class=\"hljs-number\">50</span>%)\n <span class=\"hljs-built_in\">bottom</span> = <span class=\"hljs-built_in\">bottom</span> center = center <span class=\"hljs-built_in\">bottom</span> = <span class=\"hljs-number\">50</span>% <span class=\"hljs-number\">100</span>%\n <span class=\"hljs-built_in\">left</span> = <span class=\"hljs-built_in\">left</span> center = center <span class=\"hljs-built_in\">left</span> = <span class=\"hljs-number\">0</span>或(<span class=\"hljs-number\">0</span> <span class=\"hljs-number\">50</span>%)\n center = center center = <span class=\"hljs-number\">50</span>%或（<span class=\"hljs-number\">50</span>% <span class=\"hljs-number\">50</span>%）\n <span class=\"hljs-built_in\">top</span> <span class=\"hljs-built_in\">left</span> = <span class=\"hljs-built_in\">left</span> <span class=\"hljs-built_in\">top</span> = <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span>\n <span class=\"hljs-built_in\">right</span> <span class=\"hljs-built_in\">top</span> = <span class=\"hljs-built_in\">top</span> <span class=\"hljs-built_in\">right</span> = <span class=\"hljs-number\">100</span>% <span class=\"hljs-number\">0</span>\n <span class=\"hljs-built_in\">bottom</span> <span class=\"hljs-built_in\">right</span> = <span class=\"hljs-built_in\">right</span> <span class=\"hljs-built_in\">bottom</span> = <span class=\"hljs-number\">100</span>% <span class=\"hljs-number\">100</span>%\n <span class=\"hljs-built_in\">bottom</span> <span class=\"hljs-built_in\">left</span> = <span class=\"hljs-built_in\">left</span> <span class=\"hljs-built_in\">bottom</span> = <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">100</span>%\n</code></pre>\n<p><strong>浏览器支持</strong><br><img src=\"https://ws1.sinaimg.cn/large/006tNbRwgy1fut27g9rczj30v806oabn.jpg\" alt=\"\">\nInternet Explorer 10、Firefox、Opera 支持 transform-origin 属性。<br>Internet Explorer 9 支持替代的 -ms-transform-origin 属性（仅适用于 2D 转换）。<br>Safari 和 Chrome 支持替代的 -webkit-transform-origin 属性（3D 和 2D 转换）。<br>Opera 只支持 2D 转换。</p>\n</li>\n</ol>\n<p><a href=\"\" id=\"id13\"></a></p>\n<ol start=\"3\">\n<li><p><strong>transform-style</strong>：规定如何在 3D 空间中呈现被嵌套的元素<br> <strong>语法：</strong> <code>transform-style: flat|preserve-3d;</code> \b</p>\n<ul>\n<li><code>flat</code> 所有子元素在 2D 平面呈现。<br> 沿着 X 轴或 Y 轴方向旋转该元素将导致位于正或负 Z 轴位置的子元素显示在该元素的平面上，而不是它的前面或者后面。著作权归作者所有。</li>\n<li><code>preserve-3d</code> 子元素将保留其 3D 位置。</li>\n</ul>\n<p><strong>示例：</strong> <code>-webkit-transform-style: preserve-3d; /* Safari 和 Chrome */</code></p>\n<p><strong>浏览器支持</strong><br><img src=\"https://ws1.sinaimg.cn/large/006tNbRwgy1fut2ohsc19j30v006mtae.jpg\" alt=\"\">\nFirefox 支持 transform-style 属性。<br>Chrome、Safari 和 Opera 支持替代的 -webkit-transform-style 属性。</p>\n</li>\n</ol>\n<p><a href=\"\" id=\"id14\"></a></p>\n<ol start=\"4\">\n<li><p><strong>perspective</strong>：perspective 属性定义 3D 元素距视图的距离，以像素计。（改变视角距离）</p>\n<ul>\n<li>提示：请与 perspective-origin 属性一同使用该属性，这样您就能够改变 3D 元素的底部位置。\n<strong>语法：</strong> <code>perspective: number|none;</code></li>\n<li><code>number</code> 元素距离视图的距离，以像素计。</li>\n<li><code>none</code> 默认值。与 0 相同。不设置透视。</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">div</span> {\n  <span class=\"hljs-attribute\">perspective</span>: <span class=\"hljs-number\">500</span>;\n  -webkit-<span class=\"hljs-attribute\">perspective</span>: <span class=\"hljs-number\">500</span>; <span class=\"hljs-comment\">/* Safari 和 Chrome */</span>\n}\n</code></pre>\n<p><strong>浏览器支持</strong><br>目前浏览器都不支持 perspective 属性。<br>Chrome 和 Safari 支持替代的 -webkit-perspective 属性。</p>\n</li>\n</ol>\n<p><a href=\"\" id=\"id15\"></a></p>\n<ol start=\"5\">\n<li><p><strong>perspective-origin</strong>：改变 3D 元素的底部位置（改变视角的朝向）<br> <strong>语法：</strong> <code>perspective-origin: x-axis y-axis;</code> 数字和百分比相对于左上角</p>\n<ul>\n<li>x-axis 定义视图被置于 X 轴的何处。可能的值：<br><em>left</em><br><em>center</em><br><em>right</em><br><em>length</em><br><em>%</em></li>\n<li>y-axis 定义视图被置于 Y 轴的何处。可能的值：<br><em>top</em><br><em>center</em><br><em>bottom</em><br><em>length</em><br><em>%</em></li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">div</span> {\n  <span class=\"hljs-attribute\">perspective</span>: <span class=\"hljs-number\">150</span>;\n  <span class=\"hljs-attribute\">perspective-origin</span>: <span class=\"hljs-number\">10%</span> <span class=\"hljs-number\">10%</span>;\n  -webkit-<span class=\"hljs-attribute\">perspective</span>: <span class=\"hljs-number\">150</span>; <span class=\"hljs-comment\">/* Safari 和 Chrome */</span>\n  -webkit-<span class=\"hljs-attribute\">perspective-origin</span>: <span class=\"hljs-number\">10%</span> <span class=\"hljs-number\">10%</span>; <span class=\"hljs-comment\">/* Safari 和 Chrome */</span>\n}\n</code></pre>\n<p><strong>浏览器支持</strong><br>目前浏览器都不支持 perspective-origin 属性。<br>Chrome 和 Safari 支持替代的 -webkit-perspecitve-origin 属性。</p>\n</li>\n</ol>\n<p><a href=\"\" id=\"id16\"></a></p>\n<ol start=\"6\">\n<li><p><strong>backface-visibility</strong>：backface-visibility 属性定义当元素不面向屏幕时是否可见。<br> <strong>语法：</strong> <code>backface-visibility 属性定义当元素不面向屏幕时是否可见。</code></p>\n<ul>\n<li><code>visible</code> 背面是可见的。</li>\n<li><code>hidden</code> 背面是不可见的。</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">div</span> {\n  <span class=\"hljs-attribute\">backface-visibility</span>: hidden;\n  -webkit-<span class=\"hljs-attribute\">backface-visibility</span>: hidden; <span class=\"hljs-comment\">/* Chrome 和 Safari */</span>\n  -moz-<span class=\"hljs-attribute\">backface-visibility</span>: hidden; <span class=\"hljs-comment\">/* Firefox */</span>\n  -ms-<span class=\"hljs-attribute\">backface-visibility</span>: hidden; <span class=\"hljs-comment\">/* Internet Explorer */</span>\n}\n</code></pre>\n<p><strong>浏览器支持</strong><br> 只有 Internet Explorer 10+ 和 Firefox 支持 backface-visibility 属性。<br> Opera 15+、Safari 和 Chrome 支持替代的 -webkit-backface-visibility 属性。<br><a id='id2'></a></p>\n</li>\n</ol>\n<h2 id=\"3d-元素的方法\">3D 元素的方法</h2>\n<p><strong>语法：</strong> <code>transform: none|transform-functions;</code> 方法使用应该加<code>transform:</code>前缀</p>\n<ul>\n<li><code>none</code> 定义不进行转换。</li>\n<li><code>transform-functions</code> 3D 变换函数。具体函数及功能如下：<ul>\n<li><em>matrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n)</em> 定义 3D 转换，使用 16 个值的 4x4 矩阵。</li>\n<li><em>translate3d(x,y,z)</em> 定义 3D 转化。</li>\n<li><em>translateX(x)</em> 定义 3D 转化，仅使用用于 X 轴的值。</li>\n<li><em>translateY(y)</em> 定义 3D 转化，仅使用用于 Y 轴的值。</li>\n<li><em>translateZ(z)</em> 定义 3D 转化，仅使用用于 Z 轴的值。</li>\n<li><em>scale3d(x,y,z)</em> 定义 3D 缩放转换。</li>\n<li><em>scaleX(x)</em> 定义 3D 缩放转换，通过给定一个 X 轴的值。</li>\n<li><em>scaleY(y)</em> 定义 3D 缩放转换，通过给定一个 Y 轴的值。</li>\n<li><em>scaleZ(z)</em> 定义 3D 缩放转换，通过给定一个 Z 轴的值。</li>\n<li><em>rotate3d(x,y,z,angle)</em> 定义 3D 旋转。</li>\n<li><em>rotateX(angle)</em> 定义沿 X 轴的 3D 旋转。</li>\n<li><em>rotateY(angle)</em> 定义沿 Y 轴的 3D 旋转。</li>\n<li><em>rotateZ(angle)</em> 定义沿 Z 轴的 3D 旋转。</li>\n<li><em>perspective(n)</em> 定义 3D 转换元素的透视视图。</li>\n</ul>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">div</span> {\n  <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">rotate</span>(<span class=\"hljs-number\">7deg</span>);\n  -ms-<span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">rotate</span>(<span class=\"hljs-number\">7deg</span>); <span class=\"hljs-comment\">/* IE 9 */</span>\n  -moz-<span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">rotate</span>(<span class=\"hljs-number\">7deg</span>); <span class=\"hljs-comment\">/* Firefox */</span>\n  -webkit-<span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">rotate</span>(<span class=\"hljs-number\">7deg</span>); <span class=\"hljs-comment\">/* Safari 和 Chrome */</span>\n  -o-<span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">rotate</span>(<span class=\"hljs-number\">7deg</span>); <span class=\"hljs-comment\">/* Opera */</span>\n}\n</code></pre>\n<p><strong>浏览器支持</strong><br><img src=\"https://ws4.sinaimg.cn/large/006tNbRwgy1fuqf7u1vz0j30u204ot9y.jpg\" alt=\"\">\nInternet Explorer 10、Firefox、Opera 支持 transform 属性。<br>Internet Explorer 9 支持替代的 -ms-transform 属性（仅适用于 2D 转换）。<br>Safari 和 Chrome 支持替代的 -webkit-transform 属性（3D 和 2D 转换）。<br>Opera 只支持 2D 转换。</p>\n"},"blog":{"path":"_blogs/CSS3/CSS3-2D转换/README.md","url":"/blog/CSS3/CSS3-2D转换","title":"CSS3-2D转换","author":"yrobot","keywords":"2D,CSS3,转换","createTime":1535385600000,"length":2138,"content":"<p><strong>本页目录：</strong><br><a href=\"#id1\">怎么使用</a>  </p>\n<ul>\n<li><a href=\"#id11\">平移函数translate()</a></li>\n<li><a href=\"#id12\">旋转函数rotate()</a></li>\n<li><a href=\"#id13\">缩放函数scale()</a></li>\n<li><a href=\"#id14\">倾斜函数skew()</a></li>\n<li><a href=\"#id15\">矩阵操作matrix()</a>  </li>\n</ul>\n<p><a href=\"#id2\">浏览器支持</a>  </p>\n<p><strong>CSS3新增的2D变换属性：</strong>   通过 CSS3 转换，我们能够对元素进行移动、缩放、转动、拉长或拉伸。</p>\n<p><a href=\"\" id=\"id1\"></a></p>\n<h2 id=\"怎么使用\">怎么使用</h2>\n<p><a href=\"\" id=\"id11\"></a></p>\n<ol>\n<li><p>__translate()__：设置元素相对于当前的位置。<br><strong>语法：</strong> <code>transform: translate(length,length);</code>  </p>\n<ul>\n<li>设置元素基于当前位置向右向下偏移。\b   </li>\n<li><code>length</code> 偏离的距离数据。<br><strong>示例：</strong> <code>transform: translate(50px,100px);</code><br><img src=\"https://ws1.sinaimg.cn/large/006tNbRwgy1fuockbel15j30ai0euwey.jpg\" alt=\"\"> \n<a href=\"\" id=\"id12\"></a></li>\n</ul>\n</li>\n<li><p>__rotate()__：将元素进行顺时针旋转，旋转中心<code>transform-origin</code>进行设置，默认为元素中心<br><strong>语法：</strong> <code>transform: rotate(rot);</code>     </p>\n<ul>\n<li><code>rot</code> 元素顺时针转动的角度数据。<br><strong>示例：</strong> <code>transform: rotate(30deg);</code><br><img src=\"https://ws4.sinaimg.cn/large/006tNbRwgy1fuockq1b1rj308i0aggmc.jpg\" alt=\"\">\n<a href=\"\" id=\"id13\"></a>   </li>\n</ul>\n</li>\n<li><p>__scale()__：使用scale方法来实现文字或图像的缩放处理<br><strong>语法：</strong> <code>transform: scale(times);</code>  \b   </p>\n<ul>\n<li><code>times</code> 数字，表示相对于当前元素缩放的倍数。可以有两个参数，表示长宽。<br><strong>示例：</strong> <code>transform: scale(0.5, 2);</code><br><img src=\"https://ws4.sinaimg.cn/large/006tNbRwgy1fuoclaoa1uj30fa0lqjsf.jpg\" alt=\"\">\n<a href=\"\" id=\"14\"></a></li>\n</ul>\n</li>\n<li><p>__skew()__：使用skew方法来实现文字或图像的倾斜处理，默认坐标中心在元素中心<br><strong>语法：</strong> <code>transform: skew(rot);</code>  </p>\n<ul>\n<li>参数中分布指定水平方向上的倾斜角度与垂直方向上的倾斜角度。第一个围绕X轴，第二个围绕Y轴    </li>\n<li><code>rot</code> 一方向的倾斜角度。<br><strong>示例：</strong> <code>transform: skew(30deg, 30deg);</code><br><img src=\"https://ws1.sinaimg.cn/large/006tNbRwgy1fuocmattrhj30880a4jrw.jpg\" alt=\"\">\n<a href=\"\" id=\"15\"></a></li>\n</ul>\n</li>\n<li><p>__matrix()__：矩阵操作。matrix() 方法可以把所有 2D 转换方法组合在一起<br><strong>语法：</strong> <code>transform: matrix(a,b,c,d,e,f);</code>  </p>\n<ul>\n<li>实际上，这6参数，对应的矩阵如下： <em>注意书写方向是竖着的\b</em><br><img src=\"https://ws1.sinaimg.cn/large/006tNbRwgy1fuoak0zwuhj304302kq2w.jpg\" alt=\"\">  </li>\n<li>进行运算：<br><img src=\"https://ws1.sinaimg.cn/large/006tNbRwgy1fuoaq82zpxj30cm02xwep.jpg\" alt=\"\"><br>坐标就从[x,y]变成了[ax+cy+e,bx+dy+f]  </li>\n<li>关于为什么要<code>3*3</code>的矩阵？<br>主要是为了统一用矩阵乘的操作，其实平移只需要<code>2*2</code>，为了统一利用<code>3*3</code>乘法变相实现加法(平移)效果。具体思想参考计算机图形学<br><strong>示例：</strong> <code>transform: matrix(1, 0, 0, 1, 30, 30);</code>根据运算，可以得出此矩阵可以将元素向右下平移[30,30]   </li>\n</ul>\n</li>\n</ol>\n<p><a id='id2'></a></p>\n<h2 id=\"浏览器支持\">浏览器支持</h2>\n<p><img src=\"https://ws4.sinaimg.cn/large/006tNbRwgy1fuo7z8j9byj318s04s3zs.jpg\" alt=\"\"><br>Chrome 和 Safari 需要前缀 -webkit-<br>Internet Explorer 9 需要前缀 -ms-  </p>\n"},"next":{"path":"_blogs/CSS3/CSS3动画/README.md","url":"/blog/CSS3/CSS3动画","title":"CSS3动画","author":"yrobot","keywords":"CSS3,动画","createTime":1535385600000,"length":4304,"content":"<p><strong>本页目录：</strong><br><a href=\"#id1\">怎么使用</a></p>\n<ul>\n<li><a href=\"#id11\">定义动画</a></li>\n<li><a href=\"#id12\">引用动画，设定参数</a></li>\n</ul>\n<p><a href=\"#id3\">浏览器支持</a></p>\n<p><strong>CSS3 新增的动画属性：</strong> 通过 CSS3 动画，我们能够创建动画，这可以在许多网页中取代动画图片、Flash 动画 以及 JavaScript。作为页面切换的交互动画。</p>\n<p><strong>NOTE：</strong></p>\n<ol>\n<li>\b\b 一个元素要使用多个动画时（比如前一秒动画 1，后面动画 2），可以在 css 属性中用一个 animation 表示，动画之间用逗号相隔。例子：<code>animation: animation1 1s, animation2 1s 1s infinite alternate ;</code></li>\n</ol>\n<p><a id='id1'></a></p>\n<h2 id=\"怎么使用\">怎么使用</h2>\n<p>首先用我的话来大致概括一下 css3 动画的使用流程：</p>\n<ol>\n<li>首先定义一个动画，使用<code>@keyframes</code>来定义动画(包括动画名、动画过程状态)</li>\n<li>在一个元素的 class 中引用刚定义的动画，设定相关参数(动画时长、动画线性、动画延迟、元素开始和结束的状态、动画是否暂停 \b)</li>\n</ol>\n<p>这样一个 css3 动画就被定义和使用了。</p>\n<p><a href=\"\" id=\"id11\"></a></p>\n<h4 id=\"1-定义动画\">1. 定义动画</h4>\n<h4 id=\"语法：\"><strong>语法：</strong></h4>\n<ul>\n<li><p><code>@keyframes</code> @keyframes 规则用于创建动画。在 @keyframes 中规定某项 CSS 样式，就能作为动画中某一帧的状态。<br> <strong>示例：</strong> 规定一个名叫<code>myAnimation</code>的动画</p>\n<pre><code class=\"language-css\"><span class=\"hljs-keyword\">@keyframes</span> myAnimation {\n  0% {\n    <span class=\"hljs-attribute\">background</span>: red;\n  }\n  25% {\n    <span class=\"hljs-attribute\">background</span>: yellow;\n  }\n  50% {\n    <span class=\"hljs-attribute\">background</span>: blue;\n  }\n  100% {\n    <span class=\"hljs-attribute\">background</span>: green;\n  }\n}\n\n<span class=\"hljs-keyword\">@-moz-keyframes</span> myAnimation /* Firefox */ {\n  0% {\n    <span class=\"hljs-attribute\">background</span>: red;\n  }\n  25% {\n    <span class=\"hljs-attribute\">background</span>: yellow;\n  }\n  50% {\n    <span class=\"hljs-attribute\">background</span>: blue;\n  }\n  100% {\n    <span class=\"hljs-attribute\">background</span>: green;\n  }\n}\n\n<span class=\"hljs-keyword\">@-webkit-keyframes</span> myAnimation /* Safari 和 Chrome */ {\n  0% {\n    <span class=\"hljs-attribute\">background</span>: red;\n  }\n  25% {\n    <span class=\"hljs-attribute\">background</span>: yellow;\n  }\n  50% {\n    <span class=\"hljs-attribute\">background</span>: blue;\n  }\n  100% {\n    <span class=\"hljs-attribute\">background</span>: green;\n  }\n}\n\n<span class=\"hljs-keyword\">@-o-keyframes</span> myAnimation /* Opera */ {\n  0% {\n    <span class=\"hljs-attribute\">background</span>: red;\n  }\n  25% {\n    <span class=\"hljs-attribute\">background</span>: yellow;\n  }\n  50% {\n    <span class=\"hljs-attribute\">background</span>: blue;\n  }\n  100% {\n    <span class=\"hljs-attribute\">background</span>: green;\n  }\n}\n</code></pre>\n</li>\n</ul>\n<p><a href=\"\" id=\"id12\"></a></p>\n<h4 id=\"2-引用动画，设定参数\">2. 引用动画，设定参数</h4>\n<p>在要设定动画的元素 class 上使用</p>\n<h4 id=\"语法：-1\"><strong>语法：</strong></h4>\n<ul>\n<li><p><code>animation</code> 所有动画属性的简写属性，除了 animation-play-state 和 animation-fill-mode 属性。<br> <strong>语法：</strong> <code>animation: name duration timing-function delay iteration-count direction;</code><br> 语法参数含义参看后面的语法解析。<br> <strong>示例：</strong></p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">div</span> {\n  <span class=\"hljs-attribute\">animation</span>: myAnimation <span class=\"hljs-number\">5s</span> infinite;\n  -webkit-<span class=\"hljs-attribute\">animation</span>: myAnimation <span class=\"hljs-number\">5s</span> infinite; <span class=\"hljs-comment\">/* Safari 和 Chrome */</span>\n}\n</code></pre>\n</li>\n<li><p><code>animation-name</code> 要引用 @keyframes 动画的名称。</p>\n</li>\n<li><p><code>animation-duration</code> 规定动画完成一个周期所花费的秒或毫秒。默认是 0。</p>\n</li>\n<li><p><code>animation-timing-function</code> 规定动画的速度曲线。默认是 &quot;ease&quot;。<br> <strong>语法：</strong> <code>animation-timing-function: value;</code><br> _linear_： 动画从头到尾的速度是相同的。<br> _ease_： 默认。动画以低速开始，然后加快，在结束前变慢。<br> _ease-in_： 动画以低速开始。<br> _ease-out_： 动画以低速结束。<br> _ease-in-out_： 动画以低速开始和结束。<br> _cubic-bezier(n,n,n,n)_： 在 cubic-bezier 函数中自己的值。可能的值是从 0 到 1 的数值。<br> <strong>示例：</strong></p>\n<pre><code class=\"language-css\"><span class=\"hljs-regexp\">/* W3C 和 Opera: */</span>\n<span class=\"hljs-comment\">#div1 {</span>\n  animation-timing-<span class=\"hljs-keyword\">function</span>: linear;\n}\n\n<span class=\"hljs-regexp\">/* Firefox: */</span>\n<span class=\"hljs-comment\">#div1 {</span>\n  -moz-animation-timing-<span class=\"hljs-keyword\">function</span>: linear;\n}\n\n<span class=\"hljs-regexp\">/* Safari 和 Chrome: */</span>\n<span class=\"hljs-comment\">#div1 {</span>\n  -webkit-animation-timing-<span class=\"hljs-keyword\">function</span>: linear;\n}\n</code></pre>\n</li>\n<li><p><code>animation-delay</code> 规定动画何时开始。默认是 0。</p>\n</li>\n<li><p><code>animation-iteration-count</code> 规定动画被播放的次数。默认是 1。<br> <strong>语法：</strong> <code>animation-iteration-count: value;</code><br> _n_： 定义动画播放次数的数值。<br> _infinite_： 规定动画应该无限次播放。<br> <strong>示例：</strong></p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">div</span> {\n  <span class=\"hljs-attribute\">animation-iteration-count</span>: <span class=\"hljs-number\">3</span>;\n  -webkit-<span class=\"hljs-attribute\">animation-iteration-count</span>: <span class=\"hljs-number\">3</span>; <span class=\"hljs-comment\">/* Safari 和 Chrome */</span>\n}\n</code></pre>\n</li>\n<li><p><code>animation-direction</code> 规定动画是否在下一周期逆向地播放。默认是 &quot;normal&quot;。<br> <strong>语法：</strong> <code>animation-direction: normal|alternate;</code><br> _normal_： 默认值。动画应该正常播放。<br> _alternate_： 动画应该轮流反向播放。<br> <strong>示例：</strong></p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">div</span> {\n  <span class=\"hljs-attribute\">animation-direction</span>: alternate;\n  -webkit-<span class=\"hljs-attribute\">animation-direction</span>: alternate; <span class=\"hljs-comment\">/* Safari 和 Chrome */</span>\n}\n</code></pre>\n</li>\n<li><p><code>animation-play-state</code> 规定动画是否正在运行或暂停。默认是 &quot;running&quot;。<br> <strong>语法：</strong> <code>animation-play-state: paused|running;</code><br> _paused_： 规定动画已暂停。<br> _running_： 规定动画正在播放。<br> <strong>示例：</strong></p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">div</span> {\n  <span class=\"hljs-attribute\">animation-play-state</span>: paused;\n  -webkit-<span class=\"hljs-attribute\">animation-play-state</span>: paused; <span class=\"hljs-comment\">/* Safari 和 Chrome */</span>\n}\n</code></pre>\n</li>\n<li><p><code>animation-fill-mode</code> 规定对象动画时间之外的状态。<br> <strong>语法：</strong> <code>animation-fill-mode : none | forwards | backwards | both;</code><br> _none_： 不改变默认行为。<br> _forwards_： 当动画完成后，保持最后一个属性值（在最后一个关键帧中定义）。<br> _backwards_： 在 animation-delay 所指定的一段时间内，在动画显示之前，应用开始属性值（在第一个关键帧中定义）。<br> _both_： 向前和向后填充模式都被应用。<br> <strong>示例：</strong></p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">div</span> {\n  <span class=\"hljs-attribute\">animation-fill-mode</span>: forwards;\n  -webkit-<span class=\"hljs-attribute\">animation-fill-mode</span>: forwards; <span class=\"hljs-comment\">/* Safari 和 Chrome */</span>\n}\n</code></pre>\n</li>\n</ul>\n<h4 id=\"效果：\"><strong>效果：</strong></h4>\n<p><a href=\"http://www.w3school.com.cn/tiy/t.asp?f=css3_animation4\">\b 参考 W3school 的 demo</a></p>\n<p><a href=\"\" id=\"id3\"></a></p>\n<h2 id=\"浏览器支持\">浏览器支持</h2>\n<p><img src=\"https://ws2.sinaimg.cn/large/0069RVTdgy1fupd51aiv4j30u209k76w.jpg\" alt=\"\"><br>Internet Explorer 10、Firefox 以及 Opera 支持 @keyframes 规则和 animation 属性。<br>Chrome 和 Safari 需要前缀 -webkit-。</p>\n"}},"__N_SSG":true}