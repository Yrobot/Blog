{"pageProps":{"pre":{"path":"_blogs/JS/JS函数与闭包/README.md","url":"/blog/JS/JS函数与闭包","title":"JS函数与闭包","author":"yrobot","keywords":"闭包,JS,函数","createTime":1535040000000,"length":1911,"content":"<p><strong>本页目录：</strong><br><a href=\"#func\">JS 函数</a><br><a href=\"#bibao\">闭包</a></p>\n<p><a id='func'></a></p>\n<h2 id=\"js-函数\">JS 函数</h2>\n<h4 id=\"1-js-函数的scope\">1. <strong>js 函数的[[scope]]</strong></h4>\n<ul>\n<li>每个 javascript 函数都是一个对象，对象中有些属性我们可以访问，但有些仅供 javascript 引擎存取，比如[[scope]]，他就是我们所指的作用域，其中储存了 <strong>运行期上下文的集合</strong>。</li>\n<li>可以将[[scope]]理解为函数仓库链，函数寻找变量的时候就根据这个链来查找。</li>\n</ul>\n<h4 id=\"2-运行期上下文\">2. <strong>运行期上下文</strong></h4>\n<ul>\n<li>函数执行前创建的对象（AO=运行期上下文：理解为本函数自带的仓库），用于定义函数运行时的环境。函数被多次调用时，会创建多个运行期上下文。</li>\n<li>当函数执行完毕，其运行期上下文引用被自动销毁（只是切断引用，其 AO 仍然存在，AO 只有在没有被函数链接时才被回收）。</li>\n</ul>\n<h4 id=\"3-运行期上下文如何从内存中销毁\">3. <strong>运行期上下文如何从内存中销毁</strong></h4>\n<ul>\n<li>当此上下文没有被任何函数链接时，js 引擎会自动将其回收。但只要还有函数在引用此上下文（存在闭包的情况），则此上下文不会被回收。</li>\n<li>所以只要通过 <strong>将闭包变量设置为等于 null</strong> 解除该函数（以及其上下文）的引用，就等于通知垃圾回收例程将其清除。</li>\n</ul>\n<h4 id=\"4-函数如何查找变量\">4. <strong>函数如何查找变量</strong></h4>\n<ul>\n<li>从[[scope]]作用域链的顶端开始向下查找。即从自身 \b 的执行器上下文开始找变量，未找到则转向[[scope]]的下一个上下文。</li>\n</ul>\n<h4 id=\"例子\">例子</h4>\n<ul>\n<li><p>例 1：<br><img src=\"https://ws4.sinaimg.cn/large/006tNbRwgy1fukrtxws7nj30jf0o0n3w.jpg\" alt=\"\"><br><img src=\"https://ws3.sinaimg.cn/large/006tNbRwgy1fukru71y2pj30s30lhqpc.jpg\" alt=\"\"><br><img src=\"https://ws4.sinaimg.cn/large/006tNbRwgy1fukrucycgnj30tl0nekhv.jpg\" alt=\"\"></p>\n</li>\n<li><p>例 2：<br><img src=\"https://ws4.sinaimg.cn/large/006tNbRwgy1fukrw1ajtzj30ki0m2wr1.jpg\" alt=\"\"><br><img src=\"https://ws4.sinaimg.cn/large/006tNbRwgy1fukrw1ajtzj30ki0m2wr1.jpg\" alt=\"\"></p>\n</li>\n</ul>\n<p><a id='bibao'></a></p>\n<h2 id=\"闭包\">闭包</h2>\n<ul>\n<li><strong>闭包是指 有权访问另一个函数作用域中的变量 的函数</strong></li>\n<li>由于在 Javascript 语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成“定义在一个函数内部的函数”。所以，在本质上，<strong>闭包就是将函数内部和函数外部连接起来的一座桥梁</strong>。</li>\n</ul>\n<pre><code class=\"language-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createComparisonFunction</span><span class=\"hljs-params\">(propertyName)</span> </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(object1, object2)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> value1 = object1[propertyName];\n    <span class=\"hljs-keyword\">var</span> value2 = object2[propertyName];\n    <span class=\"hljs-keyword\">if</span> (value1 &lt; value2) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (value1 &gt; value2) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n  };\n}\n\n<span class=\"hljs-comment\">//创建函数</span>\n<span class=\"hljs-keyword\">var</span> compareNames = createComparisonFunction(<span class=\"hljs-string\">&#x27;name&#x27;</span>);\n\n<span class=\"hljs-comment\">//调用函数</span>\n<span class=\"hljs-keyword\">var</span> result = compareNames({ name: <span class=\"hljs-string\">&#x27;Nicholas&#x27;</span> }, { name: <span class=\"hljs-string\">&#x27;Greg&#x27;</span> });\n\n<span class=\"hljs-comment\">//解除对匿名函数的引用（以便释放内存）</span>\ncompareNames = <span class=\"hljs-literal\">null</span>;\n</code></pre>\n<h4 id=\"闭包作用：\">闭包作用：</h4>\n<ol>\n<li>实现公有变量</li>\n<li>可以做缓存</li>\n<li>可以实现封装，属性私有化</li>\n<li>模块化开发，防止污染全局变量</li>\n</ol>\n<h4 id=\"闭包注意点：\">闭包注意点：</h4>\n<ol>\n<li>由于闭包会携带包含它的函数的作用域，因此会比其他函数占用更多的内存。过度使用闭包可能会导致内存占用过多，造成内存泄漏。</li>\n<li>作用域链的这种配置机制引出了一个值得注意的副作用，即闭包只能取得包含函数中任何变量的后一个值。</li>\n</ol>\n"},"blog":{"path":"_blogs/JS/JS异步编程/README.md","url":"/blog/JS/JS异步编程","title":"JS异步编程","author":"yrobot","keywords":"JS,异步,编程","createTime":1535040000000,"length":4344,"content":"<p><strong>本页目录：</strong><br><a href=\"#gn\">概念学习</a><br><a href=\"#eventLoop\">浏览器线程和Event Loop</a><br><a href=\"#mechanism\">JS的任务执行机制</a><br><a href=\"#unds\">JS异步的理解</a><br><a href=\"#cometrue\">JS的异步编程实现</a><br><a href=\"#better\">JS异步优化页面卡顿</a>   </p>\n<p><a id='gn'></a></p>\n<h2 id=\"概念学习\">概念学习</h2>\n<ul>\n<li><p>__并发__：同一时间段有几个程序都处于已经启动到运行完毕之间，并且这几个程序都在同一个处理机上运行，并发的两种关系是同步和互斥；</p>\n</li>\n<li><p>__互斥__：进程之间访问临界资源时相互排斥的现象；</p>\n</li>\n<li><p>__同步__：进程之间存在依赖关系，一个进程结束的输出作为另一个进程的输入。具有同步关系的一组并发进程之间发送的信息称为消息或者事件；</p>\n</li>\n<li><p>__并行__：单处理器中进程被交替执行，表现出一种并发的外部特征；在多处理器中，进程可以交替执行，还能重叠执行，实现并行处理，并行就是同事发生的多个并发事件，具有并发的含义，但并发不一定是并行，也就是说事件之间不一定要同一时刻发生；</p>\n</li>\n<li><p>__多线程__：多线程是进程中并发运行的一段代码，能够实现线程之间的切换执行；</p>\n</li>\n<li><p>__异步(不按顺序)__：和同步相对，同步是顺序执行，而异步是彼此独立，在等待某个事件的过程中继续做自己的事，不要等待这一事件完成后再工作。线程是实现异步的一个方式，异步是让调用方法的主线程不需要同步等待另一个线程的完成，从而让主线程干其他事情。  </p>\n</li>\n<li><ul>\n<li>所谓&quot;异步&quot;，简单说就是一个任务分成两段，先执行第一段，然后转而执行其他任务，等做好了准备，再回过头执行第二段。比如，有一个任务是读取文件进行处理，异步的执行过程就是下面这样。  </li>\n</ul>\n</li>\n<li><ul>\n<li>这种不连续的执行，就叫做异步。相应地，连续的执行，就叫做同步。\n<img src=\"https://ws3.sinaimg.cn/large/006tNbRwgy1fukonjqddzj30t20gs0yu.jpg\" alt=\"\"></li>\n</ul>\n</li>\n<li><p>__异步和多线程__：不是同等关系，异步是目的，多线程只是实现异步的一个手段，实现异步可以采用多线程技术或者交给其他进程来处理。</p>\n</li>\n</ul>\n<p><a id='eventLoop'></a></p>\n<h2 id=\"浏览器线程和event-loop\">浏览器线程和Event Loop</h2>\n<ul>\n<li><p>js既然是单线程,那么肯定是排队执行代码，那么怎么去排这个队，就是Event Loop。虽然JS是单线程，但浏览器不是单线程。  </p>\n</li>\n<li><p>浏览器中分为以下几个线程:</p>\n<ol>\n<li>js线程</li>\n<li>UI线程(浏览器内核)</li>\n<li>事件线程(onclick,onchange,...)：触发事件发生后，绑定的函数由Event Table移入Event Queue，等待被js主线程调用</li>\n<li>定时器线程(setTimeout, setInterval)： 确保js定时器和异步触发的准确性</li>\n<li>异步http请求线程(ajax)  </li>\n</ol>\n<ul>\n<li>其中JS线程和UI线程相互互斥，也就是说，当UI线程在渲染的时候，JS线程会挂起，等待UI线程完成，再执行JS线程</li>\n</ul>\n</li>\n<li><p>名词解析：</p>\n<ol>\n<li>__浏览器事件触发线程__：当一个事件被触发时该线程会把事件添加到待处理队列的队尾，等待 JavaScript 引擎的处理。这些事件可以是当前执行的代码块如定时任务、也可来自浏览器内核的其他线程如鼠标点击、AJAX 异步请求等，但由于 JavaScript 的单线程关系所有这些事件都得排队等待 JavaScript 引擎处理；</li>\n<li>__定时触发器线程__：浏览器定时计数器并不是由 JavaScript 引擎计数的, 因为 JavaScript 引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确, 因此通过单独线程来计时并触发定时是更为合理的方案；</li>\n<li>__异步 HTTP 请求线程__：在 XMLHttpRequest 在连接后是通过浏览器新开一个线程请求， 将检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件放到 JavaScript 引擎的处理队列中等待处理；</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tNbRwgy1fukonkymdvj30cv08v751.jpg\" alt=\"\">  </p>\n<ul>\n<li>在点击按钮之后，页面卡顿，连续点击按钮时，页面无反应，等到loop运行完时，连续弹出alert。证明 事件线程 独立于 js线程，而同时 UI线程 被挂起。 \n代码：<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">&quot;myClick()&quot;</span>&gt;</span>yep<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n      <span class=\"hljs-keyword\">let</span> count =<span class=\"hljs-number\">0</span>;\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">myClick</span>(<span class=\"hljs-params\"></span>)</span>{\n          alert(count++)\n          <span class=\"hljs-keyword\">if</span>(count==<span class=\"hljs-number\">1</span>)\n              loop();\n      }\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">loop</span>(<span class=\"hljs-params\"></span>)</span>{\n          <span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">99999</span>;\n          <span class=\"hljs-keyword\">while</span>(i--){\n              <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1</span>);\n          }\n      }\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<a id='mechanism'></a></li>\n</ul>\n<h2 id=\"js的任务执行机制\">JS的任务执行机制</h2>\n<p><img src=\"https://ws4.sinaimg.cn/large/006tNbRwgy1fukopfdw9oj30vk0ugwpy.jpg\" alt=\"\"><br><strong>导图要表达的内容用文字来表述的话：</strong></p>\n<ul>\n<li>同步和异步任务分别进入不同的执行&quot;场所&quot;，同步的进入主线程，异步的进入Event Table并注册函数。</li>\n<li>当指定的事情完成时(条件函数完成，绑定的按钮发生点击，请求返回etc)，Event Table会将这个函数移入Event Queue。</li>\n<li>主线程内的任务执行完毕为空，会去Event Queue读取对应的函数，进入主线程执行。</li>\n<li>上述过程会不断重复，也就是常说的Event Loop(事件循环)。</li>\n</ul>\n<p><a id='unds'></a></p>\n<h2 id=\"js异步的理解\">JS异步的理解</h2>\n<ul>\n<li>如概念学习里所说的，js异步主要是：对于占用主线程的操作，利用js任务执行机制，将其放入Event Queue中，等待主线程空闲了才执行。 </li>\n</ul>\n<p><a id='cometrue'></a></p>\n<h2 id=\"js的异步编程实现\">JS的异步编程实现</h2>\n<p>ES 6以前：</p>\n<ul>\n<li>定时器(setTimeout, setInterval)</li>\n<li>回调函数</li>\n<li>事件监听(事件发布/订阅)</li>\n<li>Promise对象  </li>\n</ul>\n<p>ES 6：</p>\n<ul>\n<li>Generator函数(协程coroutine) </li>\n</ul>\n<p>ES 7:</p>\n<ul>\n<li>async和await</li>\n</ul>\n<p><a id='better'></a></p>\n<h2 id=\"js异步优化页面卡顿\">JS异步优化页面卡顿</h2>\n<p>__方案1__：针对支持html5 webworker的现代浏览器方案:<br><em>代码1.</em> 你的大量计算，放到一个js文件中。如下：</p>\n<pre><code><span class=\"hljs-regexp\">//</span>job.js\nonmessage = <span class=\"hljs-keyword\">function</span> (evt){  <span class=\"hljs-regexp\">//</span><span class=\"hljs-keyword\">do</span> massive job.在这里你进行大量耗时的计算过程。 \n  postMessage( data );<span class=\"hljs-regexp\">//</span>将计算结果的数据发送会主线程\n}\n</code></pre>\n<p>你的页面代码：</p>\n<pre><code><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">HTML</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;Content-Type&quot;</span>  <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"javascript\">\n        <span class=\"hljs-comment\">//WEB页主线程var worker =new Worker(&quot;job.js&quot;); </span>\n        <span class=\"hljs-comment\">//创建一个Worker对象并向它传递将在新线程中执行的脚本的URL </span>\n        worker.postMessage(<span class=\"hljs-string\">&#x27;开始计算&#x27;</span>);\n        worker.onmessage = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">evt</span>) </span>{<span class=\"hljs-comment\">//接收worker传过来的数据函数   </span>\n            <span class=\"hljs-built_in\">console</span>.log(evt.data);<span class=\"hljs-comment\">//输出worker发送来的数据，这里就获取到了大量计算的结果。 </span>\n        } \n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<p><em>方案2：</em> 对于不支持WebWorker线程的浏览器。\n可以考虑分批处理。即是说创造一个间隔定时器setInterval。<br>每隔一小段时间，处理大量数据中的一部分。<br>这样就可以避免大量计算导致浏览器卡死。<br>大致代码如下(这里是简单的例子，具体情况具体分析)<br>假设我们要计算1000万个数据的和：  </p>\n<pre><code><span class=\"hljs-keyword\">var</span> jobData = [];<span class=\"hljs-comment\">//假设是一个数组。里面有1000万个数据  </span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>  <span class=\"hljs-title\">sliceJob</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">var</span>  num  =  (jobData.length  /  <span class=\"hljs-number\">100</span>)  +  <span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">//把任务数据划分为100份。    </span>\n    <span class=\"hljs-keyword\">var</span>  portion  =  <span class=\"hljs-number\">100000</span>;<span class=\"hljs-comment\">//每份有10万个数字。    </span>\n    <span class=\"hljs-keyword\">var</span>  addition  =  <span class=\"hljs-number\">0</span>;<span class=\"hljs-comment\">//这里用来保存最后的结果。一开始是0；    </span>\n    <span class=\"hljs-keyword\">var</span>  intv  =  <span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n            <span class=\"hljs-keyword\">if</span> (num--) {            <span class=\"hljs-comment\">//然后每一份结果。            </span>\n        additoin  +=  every;\n    }  <span class=\"hljs-keyword\">else</span>  {            <span class=\"hljs-comment\">//计算最后一份，然后输出结果。            </span>\n        alert(<span class=\"hljs-string\">&#x27;最终结果是:&#x27;</span>,  addition);\n        <span class=\"hljs-built_in\">window</span>.clearInterval(intv);\n    }\n        },  <span class=\"hljs-number\">50</span>);\n}\n</code></pre>\n<p>此外。jQuery的deferred对象无法实现你的要求。<br>因为deferred对象的目的是为了串行处理异步过程。<br>但是异步过程在执行的过程中，如果耗时过长，仍然会阻塞浏览器线程，导致浏览器不可操作（卡死）。  </p>\n<hr>\n"},"next":{"path":"_blogs/JS/JS的三个定时器/README.md","url":"/blog/JS/JS的三个定时器","title":"JS的三个定时器","author":"yrobot","keywords":"JS,定时器,三个","createTime":1535040000000,"length":4090,"content":"<p><strong>本页目录：</strong><br><a href=\"#setTimeout\">setTimeout</a><br><a href=\"#setInterval\">setInterval</a><br><a href=\"#requestAnimationFrame\">requestAnimationFrame</a><br><a href=\"#jsAnimation\">JS动画</a><br><a href=\"#useAnimation\">推荐使用requestAnimationFrame绘制JS动画</a>   </p>\n<p><a id='setTimeout'></a></p>\n<h2 id=\"settimeout\">setTimeout</h2>\n<ul>\n<li>在执行时,是在载入后延迟指定时间后执行一次表达式（仅执行一次）  </li>\n</ul>\n<p><a id='setInterval'></a></p>\n<h2 id=\"setinterval\">setInterval</h2>\n<ul>\n<li>在执行时,它从载入后,每隔指定的时间就执行一次表达式  </li>\n<li>在代码运行到间歇调用和超时调用时，定时器（浏览器中 __独立于js线程的一个线程__）会在相应的时间，将相应的代码放入宏代码队列中，所以不必考虑放代码时，js是否有程序在运行。所以这两个函数只能保证按时将代码放入队列，但具体的执行时间要看队列前的函数执行情况（什么时候轮到放入的函数）。由于这三个函数都是js异步编程的一种实现，所以详情参看<a href=\"/blog/JS/JS%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B#eventLoop\">JS异步编程 #浏览器线程和Event Loop</a>\n<img src=\"https://ws1.sinaimg.cn/large/006tNbRwgy1fukmxrd5ixj30m409smxx.jpg\" alt=\"\"></li>\n</ul>\n<p><a id='requestAnimationFrame'></a></p>\n<h2 id=\"requestanimationframe\">requestAnimationFrame</h2>\n<ul>\n<li>不能指定延迟时间，而是根据浏览器的刷新频率而定（帧），即浏览器页面刷新一次函数就执行一次，适合实现页面动画  </li>\n</ul>\n<p><a id='jsAnimation'></a></p>\n<h2 id=\"js动画\">JS动画</h2>\n<p>理解了上面的概念以后，我们不难发现，setTimeout 其实就是通过设置一个间隔时间来不断的改变元素属性，从而达到动画效果的。但我们会发现，利用 seTimeout 实现的动画在某些低端机上会出现卡顿、抖动的现象。 这种现象的产生有两个原因：</p>\n<ol>\n<li>setTimeout 的执行时间并不是确定的。在JavaScript中， setTimeout 任务被放进了异步队列中，只有当主线程上的任务执行完以后，才会去检查该队列里的任务是否需要开始执行，所以 setTimeout 的实际执行时机一般要比其设定的时间晚一些。</li>\n<li>刷新频率受 屏幕分辨率 和 屏幕尺寸 的影响，不同设备的屏幕绘制频率可能会不同，而 setTimeout 只能设置一个固定的时间间隔，这个时间不一定和屏幕的刷新时间相同。  </li>\n</ol>\n<p>以上两种情况都会导致 setTimeout 的执行步调和屏幕的刷新步调不一致，从而引起丢帧现象。 那为什么步调不一致就会引起丢帧呢？   </p>\n<p>首先要明白，setTimeout 的执行只是在内存中对元素属性进行改变，这个变化必须要等到屏幕下次绘制时才会被更新到屏幕上。如果两者的步调不一致，就可能会导致中间某一帧的操作被跨越过去，而直接更新下一帧的元素。假设屏幕每隔16.7ms刷新一次，而setTimeout 每隔10ms设置图像向左移动1px， 就会出现如下绘制过程：</p>\n<ul>\n<li>第0ms：屏幕未绘制，  等待中，setTimeout 也未执行，等待中；</li>\n<li>第10ms：屏幕未绘制，等待中，setTimeout 开始执行并设置元素属性 left=1px；</li>\n<li>第16.7ms：屏幕开始绘制，屏幕上的元素向左移动了 1px， setTimeout 未执行，继续等待中；</li>\n<li>第20ms：屏幕未绘制，等待中，setTimeout 开始执行并设置 left=2px;</li>\n<li>第30ms：屏幕未绘制，等待中，setTimeout 开始执行并设置 left=3px;</li>\n<li>第33.4ms：屏幕开始绘制，屏幕上的元素向左移动了 3px， setTimeout 未执行，继续等待中；</li>\n<li>...  </li>\n</ul>\n<p>从上面的绘制过程中可以看出，屏幕没有更新 left=2px 的那一帧画面，元素直接从left=1px 的位置跳到了 left=3px 的的位置，这就是丢帧现象，这种现象就会引起动画卡顿。</p>\n<p><a href=\"\" id=\"useAnimation\"></a></p>\n<h2 id=\"推荐使用requestanimationframe绘制js动画\">推荐使用requestAnimationFrame绘制JS动画</h2>\n<p>与 setTimeout 相比，requestAnimationFrame() 最大的优势是 __由系统来决定回调函数的执行时机__。具体一点讲就是，系统每次绘制之前会主动调用 requestAnimationFrame() 中的回调函数，如果系统绘制率是 60Hz，那么回调函数就每16.7ms 被执行一次，如果绘制频率是75Hz，那么这个间隔时间就变成了 1000/75=13.3ms。换句话说就是，requestAnimationFrame() 的执行步伐跟着系统的绘制频率走。它能保证回调函数在屏幕每一次的绘制间隔中只被执行一次，这样就不会引起丢帧现象，也不会导致动画出现卡顿的问题。</p>\n<p>这个API的调用很简单，如下所示：</p>\n<pre><code>var progress = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-regexp\">//</span>回调函数\n<span class=\"hljs-keyword\">function</span> render() {\n    progress += <span class=\"hljs-number\">1</span>; <span class=\"hljs-regexp\">//</span>修改图像的位置\n \n    <span class=\"hljs-keyword\">if</span> (progress &lt; <span class=\"hljs-number\">100</span>) {\n           <span class=\"hljs-regexp\">//</span>在动画没有结束前，递归渲染\n           window.requestAnimationFrame(render);\n    }\n}\n \n<span class=\"hljs-regexp\">//</span>第一帧渲染\nwindow.requestAnimationFrame(render);\n</code></pre>\n<p>除此之外，requestAnimationFrame 还有以下两个优势：</p>\n<ol>\n<li><p>__PU节能__：使用 setTimeout 实现的动画，当页面被隐藏或最小化时，setTimeout 仍然在后台执行动画任务，由于此时页面处于不可见或不可用状态，刷新动画是没有意义的，而且还浪费 CPU 资源。而 rAF 则完全不同，当页面处理未激活的状态下，该页面的屏幕绘制任务也会被系统暂停，因此跟着系统步伐走的 rAF 也会停止渲染，当页面被激活时，动画就从上次停留的地方继续执行，有效节省了 CPU 开销。</p>\n</li>\n<li><p>__函数节流__：在高频率事件(resize,scroll 等)中，为了防止在一个刷新间隔内发生多次函数执行，使用 rAF 可保证每个绘制间隔内，函数只被执行一次，这样既能保证流畅性，也能更好的节省函数执行的开销。一个绘制间隔内函数执行多次时没有意义的，因为显示器每16.7ms 绘制一次，多次绘制并不会在屏幕上体现出来。</p>\n</li>\n</ol>\n<p><a href=\"\" id=\"suitDown\"></a></p>\n<h2 id=\"适配低版本\">适配低版本</h2>\n<p>以下代码考虑到部分浏览器不支持requestAnimationFrame的情况，对requestAnimationFrame和cancelAnimationFrame进行降级适配。</p>\n<pre><code><span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">Date</span>.now)\n    <span class=\"hljs-built_in\">Date</span>.now = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getTime(); };\n \n(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n<span class=\"hljs-meta\">    &#x27;use strict&#x27;</span>;\n     \n    <span class=\"hljs-keyword\">var</span> vendors = [<span class=\"hljs-string\">&#x27;webkit&#x27;</span>, <span class=\"hljs-string\">&#x27;moz&#x27;</span>];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; vendors.length &amp;&amp; !<span class=\"hljs-built_in\">window</span>.requestAnimationFrame; ++i) {\n        <span class=\"hljs-keyword\">var</span> vp = vendors[i];\n        <span class=\"hljs-built_in\">window</span>.requestAnimationFrame = <span class=\"hljs-built_in\">window</span>[vp+<span class=\"hljs-string\">&#x27;RequestAnimationFrame&#x27;</span>];\n        <span class=\"hljs-built_in\">window</span>.cancelAnimationFrame = (<span class=\"hljs-built_in\">window</span>[vp+<span class=\"hljs-string\">&#x27;CancelAnimationFrame&#x27;</span>]\n                                   || <span class=\"hljs-built_in\">window</span>[vp+<span class=\"hljs-string\">&#x27;CancelRequestAnimationFrame&#x27;</span>]);\n    }\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-regexp\">/iP(ad|hone|od).*OS 6/</span>.test(<span class=\"hljs-built_in\">window</span>.navigator.userAgent) <span class=\"hljs-comment\">// iOS6 is buggy</span>\n        || !<span class=\"hljs-built_in\">window</span>.requestAnimationFrame || !<span class=\"hljs-built_in\">window</span>.cancelAnimationFrame) {\n        <span class=\"hljs-keyword\">var</span> lastTime = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-built_in\">window</span>.requestAnimationFrame = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">callback</span>) </span>{\n            <span class=\"hljs-keyword\">var</span> now = <span class=\"hljs-built_in\">Date</span>.now();\n            <span class=\"hljs-keyword\">var</span> nextTime = <span class=\"hljs-built_in\">Math</span>.max(lastTime + <span class=\"hljs-number\">16</span>, now);\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ callback(lastTime = nextTime); },\n                              nextTime - now);\n        };\n        <span class=\"hljs-built_in\">window</span>.cancelAnimationFrame = <span class=\"hljs-built_in\">clearTimeout</span>;\n    }\n}());\n<span class=\"hljs-string\">``</span><span class=\"hljs-string\">`---  \n*\b本章节部分参考[一像素 博客](https://www.cnblogs.com/onepixel/p/7078617.html)，在此感谢！*\n\n</span>\n</code></pre>\n"}},"__N_SSG":true}