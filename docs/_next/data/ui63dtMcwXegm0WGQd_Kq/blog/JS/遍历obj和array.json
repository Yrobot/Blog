{"pageProps":{"pre":{"path":"_blogs/JS/THIS的指向/README.md","url":"/blog/JS/THIS的指向","title":"THIS的指向","author":"yrobot","keywords":"THIS,指向","createTime":1535040000000,"length":807,"content":"<p><strong>本页目录：</strong><br><a href=\"#build\">this的建立</a><br><a href=\"#index\">this指向</a><br><a href=\"#rule\">this规则概括</a>  </p>\n<p><a id='build'></a></p>\n<h2 id=\"this的建立\">this的建立</h2>\n<ul>\n<li>一般函数在预编译过程中生成的AO上下文  </li>\n<li>AO中除了函数内的一些属性和函数参数外，还有<code>arguments</code>和<code>this</code>(箭头函数没有)。  </li>\n<li>所以函数（除了箭头函数）预编译过程会生成<code>this</code>隐式对象，并 <strong>默认指向window。</strong>  </li>\n</ul>\n<p><a id='index'></a></p>\n<h2 id=\"this指向\">this指向</h2>\n<ul>\n<li>而在预编译过程中，<code>this</code>会默认指向<code>window</code>。  </li>\n<li>而<code>new</code>操作时，会在函数内生成一个隐式<code>this</code>对象，而同时改变AO中<code>this</code>指向为本<code>this</code></li>\n<li>用<code>obj.func()</code>调用的时候，会将<code>func()</code>内的<code>this</code>指向改为<code>obj</code>  </li>\n<li><h4 id=\"以上this的修改是在func有this的情况下，箭头函数没有this，直接沿着作用域链向上寻找this\">以上<code>this</code>的修改是在<code>func</code>有<code>this</code>的情况下，箭头函数没有this，直接沿着作用域链向上寻找this</h4>\n</li>\n<li><h4 id=\"注意函数作用域链的数据是由函数参数、函数内声明组成，funprop无法\b增加或更改作用域\">注意函数作用域链的数据是由函数参数、函数内声明组成，fun.prop无法\b增加或更改作用域</h4>\n</li>\n</ul>\n<p><a id='rule'></a></p>\n<h2 id=\"this规则概括\">this规则概括</h2>\n<ol>\n<li>函数编译过程中AO上下文中<code>this</code>默认指向<code>window</code>  </li>\n<li>全局作用域里<code>this</code>指向<code>window</code>  </li>\n<li><code>call</code>/<code>apply</code>可以利用参数改变<code>this</code>的指向  </li>\n<li><code>obj.fun()</code>调用时，<code>fun()</code>AO中<code>this</code>指向obj (<code>new</code> 生成对象时默认<code>return this</code>，所以只有<code>this.xxx</code>的属性才能被访问到)  </li>\n<li>html元素脚本中，函数参数中的<code>this</code>指向元素本身  </li>\n</ol>\n<hr>\n"},"blog":{"path":"_blogs/JS/遍历obj和array/README.md","url":"/blog/JS/遍历obj和array","title":"遍历obj和array","author":"yrobot","keywords":"array,obj,遍历","createTime":1535040000000,"length":1377,"content":"<p><strong>本页目录：</strong><br><a href=\"#for\">基础for循环</a><br><a href=\"#forin\">for in 循环</a><br><a href=\"#forof\">for of 循环</a><br><a href=\"#foreach\">array.forEach()方法</a><br><a href=\"#summary\">总结</a>  </p>\n<p><a id='for'></a></p>\n<h2 id=\"1-基础for循环\">1. 基础for循环</h2>\n<pre><code><span class=\"hljs-keyword\">for</span> (var <span class=\"hljs-keyword\">index</span> = <span class=\"hljs-number\">0</span>; <span class=\"hljs-keyword\">index</span> &lt; myArray.<span class=\"hljs-built_in\">length</span>; <span class=\"hljs-keyword\">index</span>++) {\n  console.<span class=\"hljs-built_in\">log</span>(myArray[<span class=\"hljs-keyword\">index</span>]);\n}\n</code></pre>\n<p><a id='forin'></a></p>\n<h2 id=\"2-for-in-循环\">2. for in 循环</h2>\n<ul>\n<li>for...in 语句用于对数组或者对象的属性进行循环操作。<pre><code><span class=\"hljs-function\"><span class=\"hljs-title\">for</span><span class=\"hljs-params\">(let i in array)</span></span>  <span class=\"hljs-comment\">// i为数组的index：0，1，2，3.....</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">for</span><span class=\"hljs-params\">(let i in obj)</span></span>  <span class=\"hljs-comment\">// i为obj 的属性名</span>\n</code></pre>\n<img src=\"https://ws3.sinaimg.cn/large/006tNbRwgy1fukqtphbb9j31e60bwgmv.jpg\" alt=\"\">\n<a id='forof'></a></li>\n</ul>\n<h2 id=\"3-for-of-循环\">3. for of 循环</h2>\n<p>参考链接：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of</a></p>\n<pre><code><span class=\"hljs-keyword\">for</span> (let value of iterable) {  <span class=\"hljs-regexp\">//</span> value为属性值\n    <span class=\"hljs-regexp\">//</span>statements\n}\n</code></pre>\n<p><strong>value</strong><br>在每次迭代中，将不同属性的值分配给变量。 </p>\n<p><strong>iterable</strong> ( Array，Map，Set，String，TypedArray，arguments 对象等等) (obj不是iterable)<br>被迭代枚举其属性的对象。<br><img src=\"https://ws4.sinaimg.cn/large/006tNbRwgy1fukqtq7vk6j31e60fqmzh.jpg\" alt=\"\">  </p>\n<p><a id='foreach'></a></p>\n<h2 id=\"4-arrayforeach方法\">4. array.forEach()方法</h2>\n<pre><code>arr.<span class=\"hljs-keyword\">for</span><span class=\"hljs-constructor\">Each(<span class=\"hljs-params\">function</span> <span class=\"hljs-params\">callback</span>(<span class=\"hljs-params\">value</span>[, <span class=\"hljs-params\">index</span>[, <span class=\"hljs-params\">array</span>]])</span> { <span class=\"hljs-comment\">// value:属性值，index:当前索引，array:当前遍历数组</span>\n    <span class=\"hljs-comment\">//your iterator</span>\n}<span class=\"hljs-literal\">[, <span class=\"hljs-identifier\">thisArg</span>]</span>);   <span class=\"hljs-comment\">// thisArg:作为callback函数的this值</span>\n</code></pre>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tNbRwgy1fukqto6spyj31ec0c0dh4.jpg\" alt=\"\"></p>\n<p><a id='summary'></a></p>\n<h2 id=\"总结\">总结</h2>\n<ol>\n<li>少用for of，支持不好。性能也一般。性能基础for优化较好</li>\n<li>遍历array，以上方法均可</li>\n<li>遍历obj思路：<ol>\n<li>获取obj的keys，利用基础for遍历</li>\n<li>for in利用属性名获取属性值</li>\n<li>利用object.keys()方法获取keys，再用keys.forEach()遍历获取属性值</li>\n</ol>\n</li>\n</ol>\n"},"next":{"path":"_blogs/MarkDown/markdown注意点.md","url":"/blog/MarkDown/markdown注意点","title":"markdown注意点","author":"yrobot","keywords":"markdown,注意","createTime":1535040000000,"length":377,"content":"<p><strong>本页目录：</strong><br><a href=\"#url\">链接</a><br><a href=\"#snippet\">VS-Code:snippet</a>  </p>\n<p><a id='url'></a></p>\n<h2 id=\"链接\">链接</h2>\n<p><strong>链接跳转：</strong> <code>[描述](url)</code><br><strong>图片：</strong><code>![](url)</code>  </p>\n<p><strong>markdown语法要求：</strong>  </p>\n<ol>\n<li>页内锚点链接：字母要统统小写，空格统统要替换成 &#39;-&#39;。  </li>\n<li>外部链接：不可包含空格。  </li>\n</ol>\n<p>__解决方案__：直接使用a标签即可  </p>\n<p><a id='snippet'></a></p>\n<h2 id=\"vs-codesnippet\">VS-Code:snippet</h2>\n<ul>\n<li>可以在vscode用户代码块添加对markdown的snippet。</li>\n<li>个人vscode的.md文件一直不提示，无奈修改&quot;editor.action.triggerSuggest&quot;快捷键，强制唤醒md文件的代码提示。</li>\n</ul>\n"}},"__N_SSG":true}