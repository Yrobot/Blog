{"pageProps":{"pre":{"path":"_blogs/CSS3/CSS3动画/README.md","url":"/blog/CSS3/CSS3动画","title":"CSS3动画","author":"yrobot","keywords":"CSS3,动画","createTime":1535385600000,"length":4304,"content":"<p><strong>本页目录：</strong><br><a href=\"#id1\">怎么使用</a></p>\n<ul>\n<li><a href=\"#id11\">定义动画</a></li>\n<li><a href=\"#id12\">引用动画，设定参数</a></li>\n</ul>\n<p><a href=\"#id3\">浏览器支持</a></p>\n<p><strong>CSS3 新增的动画属性：</strong> 通过 CSS3 动画，我们能够创建动画，这可以在许多网页中取代动画图片、Flash 动画 以及 JavaScript。作为页面切换的交互动画。</p>\n<p><strong>NOTE：</strong></p>\n<ol>\n<li>\b\b 一个元素要使用多个动画时（比如前一秒动画 1，后面动画 2），可以在 css 属性中用一个 animation 表示，动画之间用逗号相隔。例子：<code>animation: animation1 1s, animation2 1s 1s infinite alternate ;</code></li>\n</ol>\n<p><a id='id1'></a></p>\n<h2 id=\"怎么使用\">怎么使用</h2>\n<p>首先用我的话来大致概括一下 css3 动画的使用流程：</p>\n<ol>\n<li>首先定义一个动画，使用<code>@keyframes</code>来定义动画(包括动画名、动画过程状态)</li>\n<li>在一个元素的 class 中引用刚定义的动画，设定相关参数(动画时长、动画线性、动画延迟、元素开始和结束的状态、动画是否暂停 \b)</li>\n</ol>\n<p>这样一个 css3 动画就被定义和使用了。</p>\n<p><a href=\"\" id=\"id11\"></a></p>\n<h4 id=\"1-定义动画\">1. 定义动画</h4>\n<h4 id=\"语法：\"><strong>语法：</strong></h4>\n<ul>\n<li><p><code>@keyframes</code> @keyframes 规则用于创建动画。在 @keyframes 中规定某项 CSS 样式，就能作为动画中某一帧的状态。<br> <strong>示例：</strong> 规定一个名叫<code>myAnimation</code>的动画</p>\n<pre><code class=\"language-css\"><span class=\"hljs-keyword\">@keyframes</span> myAnimation {\n  0% {\n    <span class=\"hljs-attribute\">background</span>: red;\n  }\n  25% {\n    <span class=\"hljs-attribute\">background</span>: yellow;\n  }\n  50% {\n    <span class=\"hljs-attribute\">background</span>: blue;\n  }\n  100% {\n    <span class=\"hljs-attribute\">background</span>: green;\n  }\n}\n\n<span class=\"hljs-keyword\">@-moz-keyframes</span> myAnimation /* Firefox */ {\n  0% {\n    <span class=\"hljs-attribute\">background</span>: red;\n  }\n  25% {\n    <span class=\"hljs-attribute\">background</span>: yellow;\n  }\n  50% {\n    <span class=\"hljs-attribute\">background</span>: blue;\n  }\n  100% {\n    <span class=\"hljs-attribute\">background</span>: green;\n  }\n}\n\n<span class=\"hljs-keyword\">@-webkit-keyframes</span> myAnimation /* Safari 和 Chrome */ {\n  0% {\n    <span class=\"hljs-attribute\">background</span>: red;\n  }\n  25% {\n    <span class=\"hljs-attribute\">background</span>: yellow;\n  }\n  50% {\n    <span class=\"hljs-attribute\">background</span>: blue;\n  }\n  100% {\n    <span class=\"hljs-attribute\">background</span>: green;\n  }\n}\n\n<span class=\"hljs-keyword\">@-o-keyframes</span> myAnimation /* Opera */ {\n  0% {\n    <span class=\"hljs-attribute\">background</span>: red;\n  }\n  25% {\n    <span class=\"hljs-attribute\">background</span>: yellow;\n  }\n  50% {\n    <span class=\"hljs-attribute\">background</span>: blue;\n  }\n  100% {\n    <span class=\"hljs-attribute\">background</span>: green;\n  }\n}\n</code></pre>\n</li>\n</ul>\n<p><a href=\"\" id=\"id12\"></a></p>\n<h4 id=\"2-引用动画，设定参数\">2. 引用动画，设定参数</h4>\n<p>在要设定动画的元素 class 上使用</p>\n<h4 id=\"语法：-1\"><strong>语法：</strong></h4>\n<ul>\n<li><p><code>animation</code> 所有动画属性的简写属性，除了 animation-play-state 和 animation-fill-mode 属性。<br> <strong>语法：</strong> <code>animation: name duration timing-function delay iteration-count direction;</code><br> 语法参数含义参看后面的语法解析。<br> <strong>示例：</strong></p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">div</span> {\n  <span class=\"hljs-attribute\">animation</span>: myAnimation <span class=\"hljs-number\">5s</span> infinite;\n  -webkit-<span class=\"hljs-attribute\">animation</span>: myAnimation <span class=\"hljs-number\">5s</span> infinite; <span class=\"hljs-comment\">/* Safari 和 Chrome */</span>\n}\n</code></pre>\n</li>\n<li><p><code>animation-name</code> 要引用 @keyframes 动画的名称。</p>\n</li>\n<li><p><code>animation-duration</code> 规定动画完成一个周期所花费的秒或毫秒。默认是 0。</p>\n</li>\n<li><p><code>animation-timing-function</code> 规定动画的速度曲线。默认是 &quot;ease&quot;。<br> <strong>语法：</strong> <code>animation-timing-function: value;</code><br> _linear_： 动画从头到尾的速度是相同的。<br> _ease_： 默认。动画以低速开始，然后加快，在结束前变慢。<br> _ease-in_： 动画以低速开始。<br> _ease-out_： 动画以低速结束。<br> _ease-in-out_： 动画以低速开始和结束。<br> _cubic-bezier(n,n,n,n)_： 在 cubic-bezier 函数中自己的值。可能的值是从 0 到 1 的数值。<br> <strong>示例：</strong></p>\n<pre><code class=\"language-css\"><span class=\"hljs-regexp\">/* W3C 和 Opera: */</span>\n<span class=\"hljs-comment\">#div1 {</span>\n  animation-timing-<span class=\"hljs-keyword\">function</span>: linear;\n}\n\n<span class=\"hljs-regexp\">/* Firefox: */</span>\n<span class=\"hljs-comment\">#div1 {</span>\n  -moz-animation-timing-<span class=\"hljs-keyword\">function</span>: linear;\n}\n\n<span class=\"hljs-regexp\">/* Safari 和 Chrome: */</span>\n<span class=\"hljs-comment\">#div1 {</span>\n  -webkit-animation-timing-<span class=\"hljs-keyword\">function</span>: linear;\n}\n</code></pre>\n</li>\n<li><p><code>animation-delay</code> 规定动画何时开始。默认是 0。</p>\n</li>\n<li><p><code>animation-iteration-count</code> 规定动画被播放的次数。默认是 1。<br> <strong>语法：</strong> <code>animation-iteration-count: value;</code><br> _n_： 定义动画播放次数的数值。<br> _infinite_： 规定动画应该无限次播放。<br> <strong>示例：</strong></p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">div</span> {\n  <span class=\"hljs-attribute\">animation-iteration-count</span>: <span class=\"hljs-number\">3</span>;\n  -webkit-<span class=\"hljs-attribute\">animation-iteration-count</span>: <span class=\"hljs-number\">3</span>; <span class=\"hljs-comment\">/* Safari 和 Chrome */</span>\n}\n</code></pre>\n</li>\n<li><p><code>animation-direction</code> 规定动画是否在下一周期逆向地播放。默认是 &quot;normal&quot;。<br> <strong>语法：</strong> <code>animation-direction: normal|alternate;</code><br> _normal_： 默认值。动画应该正常播放。<br> _alternate_： 动画应该轮流反向播放。<br> <strong>示例：</strong></p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">div</span> {\n  <span class=\"hljs-attribute\">animation-direction</span>: alternate;\n  -webkit-<span class=\"hljs-attribute\">animation-direction</span>: alternate; <span class=\"hljs-comment\">/* Safari 和 Chrome */</span>\n}\n</code></pre>\n</li>\n<li><p><code>animation-play-state</code> 规定动画是否正在运行或暂停。默认是 &quot;running&quot;。<br> <strong>语法：</strong> <code>animation-play-state: paused|running;</code><br> _paused_： 规定动画已暂停。<br> _running_： 规定动画正在播放。<br> <strong>示例：</strong></p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">div</span> {\n  <span class=\"hljs-attribute\">animation-play-state</span>: paused;\n  -webkit-<span class=\"hljs-attribute\">animation-play-state</span>: paused; <span class=\"hljs-comment\">/* Safari 和 Chrome */</span>\n}\n</code></pre>\n</li>\n<li><p><code>animation-fill-mode</code> 规定对象动画时间之外的状态。<br> <strong>语法：</strong> <code>animation-fill-mode : none | forwards | backwards | both;</code><br> _none_： 不改变默认行为。<br> _forwards_： 当动画完成后，保持最后一个属性值（在最后一个关键帧中定义）。<br> _backwards_： 在 animation-delay 所指定的一段时间内，在动画显示之前，应用开始属性值（在第一个关键帧中定义）。<br> _both_： 向前和向后填充模式都被应用。<br> <strong>示例：</strong></p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">div</span> {\n  <span class=\"hljs-attribute\">animation-fill-mode</span>: forwards;\n  -webkit-<span class=\"hljs-attribute\">animation-fill-mode</span>: forwards; <span class=\"hljs-comment\">/* Safari 和 Chrome */</span>\n}\n</code></pre>\n</li>\n</ul>\n<h4 id=\"效果：\"><strong>效果：</strong></h4>\n<p><a href=\"http://www.w3school.com.cn/tiy/t.asp?f=css3_animation4\">\b 参考 W3school 的 demo</a></p>\n<p><a href=\"\" id=\"id3\"></a></p>\n<h2 id=\"浏览器支持\">浏览器支持</h2>\n<p><img src=\"https://ws2.sinaimg.cn/large/0069RVTdgy1fupd51aiv4j30u209k76w.jpg\" alt=\"\"><br>Internet Explorer 10、Firefox 以及 Opera 支持 @keyframes 规则和 animation 属性。<br>Chrome 和 Safari 需要前缀 -webkit-。</p>\n"},"blog":{"path":"_blogs/CSS3/CSS3过渡/README.md","url":"/blog/CSS3/CSS3过渡","title":"CSS3过渡","author":"yrobot","keywords":"CSS3,过渡","createTime":1535385600000,"length":1456,"content":"<p><strong>本页目录：</strong><br><a href=\"#id1\">用前思考</a><br><a href=\"#id2\">怎么使用</a><br><a href=\"#id3\">浏览器支持</a>  </p>\n<p><strong>CSS3的过渡属性：</strong>  过渡属性可以设定元素在某些属性改变时，对变化过程填充逐渐变换的动画，类似于flash的补间动画</p>\n<p><a id='id1'></a></p>\n<h2 id=\"用前思考\">用前思考</h2>\n<p>CSS3 过渡是元素从一种样式逐渐改变为另一种的效果<br>那么我们仔细来分析一下，机器需要哪些数据来控制这个补间动画\n首先我们问问自己，如果别人要求我们来实现一种补间动画，我们会问要求人哪些问题呢？</p>\n<ol>\n<li>是对哪些变化进行\b补间动画效果？- what  </li>\n<li>是怎么变的？补间时长、补间线性(渐入渐出|平滑变化) - how  </li>\n<li>\b\b补间是马上就开始吗？ - when  </li>\n</ol>\n<p>好了，有了这些的问题，看下面的内容也就顺多了。    </p>\n<p><a id='id2'></a></p>\n<h2 id=\"怎么使用\">怎么使用</h2>\n<h4 id=\"语法：\"><strong>语法：</strong></h4>\n<ul>\n<li><code>transition</code>  简写属性，用于在一个属性中设置下面\b四个过渡属性。<br>  <strong>示例：</strong>   <code>transition: width 1s linear 2s;</code>  </li>\n<li><code>transition-property</code> all/propertys/none  规定应用过渡的 CSS 属性的名称。propertys间用逗号分隔。\n  <strong>示例：</strong>   <code>transition-property: width,margin;</code>  </li>\n<li><code>transition-duration</code> Number 定义过渡效果花费的时间。默认是 0。  </li>\n<li><code>transition-timing-function</code>  规定过渡效果的时间曲线。默认是 &quot;ease&quot;。<br><em>linear</em> ： 规定以相同速度开始至结束的过渡效果（等于 cubic-bezier(0,0,1,1)）。<br><em>ease</em> ： 规定慢速开始，然后变快，然后慢速结束的过渡效果（cubic-bezier(0.25,0.1,0.25,1)）。<br><em>ease-in</em> ： 规定以慢速开始的过渡效果（等于 cubic-bezier(0.42,0,1,1)）。<br><em>ease-out</em> ： 规定以慢速结束的过渡效果（等于 cubic-bezier(0,0,0.58,1)）。<br><em>ease-in-out</em> ： 规定以慢速开始和结束的过渡效果（等于 cubic-bezier(0.42,0,0.58,1)）。<br><em>cubic-bezier(n,n,n,n)</em> ： 在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值。  </li>\n<li><code>transition-delay</code> 规定过渡效果何时开始。默认是 0。     </li>\n</ul>\n<h4 id=\"效果：\"><strong>效果：</strong></h4>\n<p><a href=\"http://www.w3school.com.cn/tiy/t.asp?f=css3_transition1\">\b参考W3school的demo</a></p>\n<p><a id='id3'></a></p>\n<h2 id=\"浏览器支持\">浏览器支持</h2>\n<p><img src=\"https://ws1.sinaimg.cn/large/0069RVTdgy1fup7uarmc3j30u204sjsn.jpg\" alt=\"\"><br>Internet Explorer 10、Firefox、Chrome 以及 Opera 支持 transition 属性。<br>Safari 需要前缀 -webkit-。</p>\n"},"next":{"path":"_blogs/CSS3/CSS3新增属性/README.md","url":"/blog/CSS3/CSS3新增属性","title":"CSS3新增属性","author":"yrobot","keywords":"CSS3,属性,新增","createTime":1535299200000,"length":10859,"content":"<p><strong>本页目录：</strong><br><a href=\"#id1\">CSS3 边框</a><br><a href=\"#id2\">CSS3 背景</a><br><a href=\"#id3\">CSS3 文本效果</a><br><a href=\"#id4\">CSS3 字体</a><br><a href=\"#id5\">CSS3 2D 转换</a><br><a href=\"#id6\">CSS3 3D 转换</a><br><a href=\"#id7\">CSS3 过渡</a><br><a href=\"#id8\">CSS3 动画</a><br><a href=\"#id9\">CSS3 多列</a><br><a href=\"#id10\">CSS3 用户界面</a></p>\n<p>本文框架主要参考<a href=\"http://www.w3school.com.cn/css3/index.asp\">W3school 的 CSS 教程</a>，在此感谢!</p>\n<p><a id='id1'></a></p>\n<h2 id=\"css3-边框\">CSS3 边框</h2>\n<p><strong>CSS3 新增的边框属性：</strong></p>\n<ol>\n<li><strong>border-radius</strong>：设置元素的圆角，还支持单个圆角设置，<code>border-top(bottom)-left(right)-radius</code>。<br><strong>语法：</strong> <code>border-radius: 1-4 length|% / 1-4 length|%;</code><ul>\n<li>按此顺序设置每个 radii 的四个值(类似 margin 属性设置，\b 对边相同可简写)。\b</li>\n<li><code>ength</code> 定义圆角的形状。</li>\n<li><code>%</code> 以百分比定义圆角的形状。<br><strong>示例：</strong> <code>border-radius:2em;</code><br><strong>示例：</strong> <code>border-radius: 2em 1em 4em 3em;</code><br><img src=\"https://ws1.sinaimg.cn/large/006tNbRwgy1fuocgpiov7j30hg0380su.jpg\" alt=\"\"></li>\n</ul>\n</li>\n<li><strong>box-shadow</strong>：设置元素方框阴影<br><strong>语法：</strong><code>box-shadow: h-shadow v-shadow blur spread color inset;</code><ul>\n<li><code>h-shadow</code> 必需。水平阴影的位置。允许负值</li>\n<li><code>v-shadow</code> 必需。垂直阴影的位置。允许负值</li>\n<li><code>blur</code> 可选。模糊距离</li>\n<li><code>spread</code> 可选。阴影的尺寸</li>\n<li><code>color</code> 可选。阴影的颜色</li>\n<li><code>inset</code> 可选。将外部阴影 (outset) 改为内部阴影<br><strong>示例：</strong> <code>box-shadow: 10px 10px 5px #888888;</code><br><img src=\"https://ws4.sinaimg.cn/large/006tNbRwgy1fuoch950z7j30j007kglk.jpg\" alt=\"\"></li>\n</ul>\n</li>\n<li><strong>border-image</strong>：设置元素的边框为图片<br><strong>语法：</strong> border-image 属性是一个简写属性<ul>\n<li><code>border-image-source</code> 用在边框的图片的路径。</li>\n<li><code>border-image-slice</code> 图片边框向内偏移。</li>\n<li><code>border-image-width</code> 图片边框的宽度。</li>\n<li><code>border-image-outset</code> 边框图像区域超出边框的量。</li>\n<li><code>border-image-repeat</code> 图像边框是否应平铺(repeated)、铺满(rounded)或拉伸(stretched)。<br><strong>示例：</strong> <code>border-image: url(/i/border_image_button.png) 0 14 0 14 stretch;</code><br><img src=\"https://ws1.sinaimg.cn/large/006tNbRwgy1fuochr5fydj30lo04i0tb.jpg\" alt=\"\"></li>\n</ul>\n</li>\n</ol>\n<p><strong>浏览器支持：</strong>\n<img src=\"https://ws1.sinaimg.cn/large/006tNbRwgy1fuo2czkkuaj318w0eidkx.jpg\" alt=\"\"></p>\n<p><a id='id2'></a></p>\n<h2 id=\"css3-背景\">CSS3 背景</h2>\n<p><strong>CSS3 新增的背景属性：</strong></p>\n<ol>\n<li><strong>background-size</strong>: 规定背景图像的尺寸<br><strong>语法：</strong> <code>background-size: length|percentage|cover|contain; </code><ul>\n<li><code>length</code> 设置背景图像的高度和宽度。第一个值设置宽度，第二个值设置高度。如果只设置一个值，则第二个值会被设置为 &quot;auto&quot;。</li>\n<li><code>percentage</code> 以父元素的百分比来设置背景图像的宽度和高度。第一个值设置宽度，第二个值设置高度。如果只设置一个值，则第二个值会被设置为 &quot;auto&quot;。</li>\n<li><strong><code>cover</code></strong> 把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。背景图像的某些部分也许无法显示在背景定位区域中。</li>\n<li><strong><code>contain</code></strong> 把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域。<br><strong>示例：</strong> <code>border-radius:50%;</code></li>\n</ul>\n</li>\n<li><strong>background-origin</strong>: background-origin 属性规定 background-position 属性相对于什么位置来定位<br><strong>语法：</strong> <code>background-origin: padding-box|border-box|content-box; </code><ul>\n<li><code>padding-box</code> 背景图像相对于内边距框来定位。</li>\n<li><code>border-box</code> 背景图像相对于边框盒来定位。</li>\n<li><code>content-box</code> 背景图像相对于内容框来定位。<br><strong>示例：</strong> <code>background-origin:content-box;</code></li>\n</ul>\n</li>\n</ol>\n<p><strong>浏览器支持：</strong>\n<img src=\"https://ws2.sinaimg.cn/large/006tNbRwgy1fuo7a1mn2mj318w09q77m.jpg\" alt=\"\"></p>\n<p><a id='id3'></a></p>\n<h2 id=\"css3-文本效果\">CSS3 文本效果</h2>\n<p><strong>CSS3 新增的文本效果属性：</strong></p>\n<ol>\n<li><strong>text-shadow</strong>: text-shadow 属性向文本设置阴影<br><strong>语法：</strong> <code>text-shadow: h-shadow v-shadow blur color;</code><ul>\n<li><code>h-shadow</code> 必需。水平阴影的位置。允许负值。</li>\n<li><code>v-shadow</code> 必需。垂直阴影的位置。允许负值。</li>\n<li><code>blur</code> 可选。模糊的距离。</li>\n<li><code>color</code> 可选。阴影的颜色。<br><strong>示例：</strong> <code>text-shadow:2px 2px 8px #FF0000;</code><br><img src=\"https://ws2.sinaimg.cn/large/006tNbRwgy1fuocifrqvpj30eo03odgz.jpg\" alt=\"\"></li>\n</ul>\n</li>\n<li><strong>word-wrap</strong>: word-wrap 属性允许长单词或 URL 地址换行到下一行<br><strong>语法：</strong> <code>word-wrap: normal|break-word;</code><ul>\n<li><code>normal</code> 只在允许的断字点换行（浏览器保持默认处理）。</li>\n<li><code>break-word</code> 在长单词或 URL 地址内部进行换行。<br><strong>示例：</strong> <code>word-wrap:break-word;</code><br><img src=\"https://ws1.sinaimg.cn/large/006tNbRwgy1fuocjavfcdj313y0mogpb.jpg\" alt=\"\"></li>\n</ul>\n</li>\n</ol>\n<p><strong>浏览器支持：</strong>\n<img src=\"https://ws3.sinaimg.cn/large/006tNbRwgy1fuo7ays4aaj318s09iada.jpg\" alt=\"\"></p>\n<p><a id='id4'></a></p>\n<h2 id=\"css3-字体\">CSS3 字体</h2>\n<p><strong>CSS3 新增的字体属性：</strong></p>\n<ol>\n<li><p><strong>@font-face</strong>: 它允许网页开发者为其网页指定在线字体,便于在后面 font-family 中调用<br><strong>语法：</strong></p>\n<pre><code class=\"language-css\"> <span class=\"hljs-meta\">@font-face</span> {\n [ font-family: <span class=\"hljs-variable\">&lt;family-name&gt;</span>; ] ||\n [ src: [ <span class=\"hljs-variable\">&lt;url&gt;</span> [ format(<span class=\"hljs-variable\">&lt;string&gt;</span><span class=\"hljs-comment\">#) ]? | &lt;font-face-name&gt; ]#; ] ||</span>\n [ unicode-range: <span class=\"hljs-variable\">&lt;urange&gt;</span><span class=\"hljs-comment\">#; ] ||</span>\n [ font-variant: <span class=\"hljs-variable\">&lt;font-variant&gt;</span>; ] ||\n [ font-feature-settings: normal |<span class=\"hljs-string\"> &lt;feature-tag-value&gt;#; ] </span>||\n [ font-variation-settings: normal |<span class=\"hljs-string\"> [ &lt;string&gt; &lt;number&gt;] # </span>||\n [ font-stretch: <span class=\"hljs-variable\">&lt;font-stretch&gt;</span>; ] ||\n [ font-weight: <span class=\"hljs-variable\">&lt;weight&gt;</span>; ] ||\n [ font-style: <span class=\"hljs-variable\">&lt;style&gt;</span>; ]\n }\n</code></pre>\n<ul>\n<li><code>font-family</code> name 必需。规定字体的名称。</li>\n<li><code>src</code> URL 必需。定义字体文件的 URL。</li>\n<li><code>font-stretch</code> 可选。定义如何拉伸字体。默认是 &quot;normal&quot;。<br> normal<br> condensed<br> ultra-condensed<br> extra-condensed<br> semi-condensed<br> expanded<br> semi-expanded<br> extra-expanded<br> ultra-expanded</li>\n<li><code>font-style</code> 可选。定义字体的样式。默认是 &quot;normal&quot;。<br> ormal<br> italic<br> oblique</li>\n<li><code>font-weight</code> 可选。定义字体的粗细。默认是 &quot;normal&quot;。<br> normal<br> bold<br> 100<br> 200<br> 300<br> 400<br> 500<br> 600<br> 700<br> 800<br> 900</li>\n<li><code>unicode-range</code> unicode-range 可选。定义字体支持的 UNICODE 字符范围。默认是 &quot;U+0-10FFFF&quot;。<br><strong>示例：</strong></li>\n</ul>\n<pre><code class=\"language-css\"><span class=\"hljs-keyword\">@font-face</span> {\n  <span class=\"hljs-attribute\">font-family</span>: <span class=\"hljs-string\">&#x27;Bitstream Vera Serif Bold&#x27;</span>;\n  <span class=\"hljs-attribute\">src</span>: <span class=\"hljs-built_in\">url</span>(<span class=\"hljs-string\">&#x27;http://developer.mozilla.org/@api/deki/files/2934/=VeraSeBd.ttf&#x27;</span>);\n}\n\n<span class=\"hljs-selector-tag\">body</span> {\n  <span class=\"hljs-attribute\">font-family</span>: <span class=\"hljs-string\">&#x27;Bitstream Vera Serif Bold&#x27;</span>, serif;\n}\n</code></pre>\n</li>\n</ol>\n<p><strong>浏览器支持：</strong>\n<img src=\"https://ws3.sinaimg.cn/large/006tNbRwgy1fuo7ituu00j318q04odhc.jpg\" alt=\"\"></p>\n<p><a id='id5'></a></p>\n<h2 id=\"css3-2d-转换\">CSS3 2D 转换</h2>\n<p><strong>CSS3 新增的 2D 变换属性：</strong> 通过 CSS3 转换，我们能够对元素进行移动、缩放、转动、拉长或拉伸。</p>\n<p>跳转 <a href=\"../CSS3-2D%E8%BD%AC%E6%8D%A2\">CSS3-2D 转换</a></p>\n<p><strong>浏览器支持：</strong>\n<img src=\"https://ws4.sinaimg.cn/large/006tNbRwgy1fuo7z8j9byj318s04s3zs.jpg\" alt=\"\"><br>Chrome 和 Safari 需要前缀 -webkit-<br>Internet Explorer 9 需要前缀 -ms-</p>\n<p><a id='id6'></a></p>\n<h2 id=\"css3-3d-转换\">CSS3 3D 转换</h2>\n<p><strong>CSS3 新增的 3D 变换属性：</strong> CSS3 3D 转换支持开发者在 css 代码中利用 css3 的 3D 函数，在页面里开发出一些简单的 3D 效果。</p>\n<p>跳转 <a href=\"../CSS3-3D%E8%BD%AC%E6%8D%A2\">CSS3-3D 转换</a></p>\n<p><strong>浏览器支持：</strong>\n<img src=\"https://ws4.sinaimg.cn/large/006tNbRwgy1fuqf7u1vz0j30u204ot9y.jpg\" alt=\"\">\nInternet Explorer 10 和 Firefox 支持 3D 转换。<br>Chrome 和 Safari 需要前缀 -webkit-。<br>Opera 仍然不支持 3D 转换（它只支持 2D 转换）。</p>\n<p><a id='id7'></a></p>\n<h2 id=\"css3-过渡\">CSS3 过渡</h2>\n<p><strong>CSS3 的过渡属性：</strong> 过渡属性可以设定元素在某些属性改变时，对变化过程填充逐渐变换的动画，类似于 flash 的补间动画</p>\n<p>跳转 <a href=\"../CSS3%E8%BF%87%E6%B8%A1\">CSS3 过渡</a></p>\n<p><strong>浏览器支持：</strong>\n<img src=\"https://ws1.sinaimg.cn/large/0069RVTdgy1fup7uarmc3j30u204sjsn.jpg\" alt=\"\"></p>\n<p><a id='id8'></a></p>\n<h2 id=\"css3-动画\">CSS3 动画</h2>\n<p><strong>CSS3 新增的动画属性：</strong> 通过 CSS3 动画，我们能够创建动画，这可以在许多网页中取代动画图片、Flash 动画 以及 JavaScript。作为页面切换的交互动画。</p>\n<p>跳转 <a href=\"../CSS3%E5%8A%A8%E7%94%BB\">CSS3 动画</a></p>\n<p><strong>浏览器支持：</strong>\n<img src=\"https://ws2.sinaimg.cn/large/0069RVTdgy1fupd51aiv4j30u209k76w.jpg\" alt=\"\"><br>Internet Explorer 10、Firefox 以及 Opera 支持 @keyframes 规则和 animation 属性。<br>Chrome 和 Safari 需要前缀 -webkit-。</p>\n<p><a id='id9'></a></p>\n<h2 id=\"css3-多列\">CSS3 多列</h2>\n<p><strong>CSS3 新增的多列属性：</strong> 使用 css3 多列属性，可以将内容 \b 分成几列，类似报纸中文章的形式。</p>\n<ol>\n<li><p><strong>column-count</strong>: 规定元素应该被分隔的列数。<br><strong>语法：</strong> <code>column-count: number|auto;</code></p>\n<ul>\n<li><code>number</code> 元素内容将被划分的最佳列数。</li>\n<li><code>auto</code> 由其他属性决定列数，比如 &quot;column-width&quot;。<br><strong>示例：</strong></li>\n</ul>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">div</span> {\n  -moz-<span class=\"hljs-attribute\">column-count</span>: <span class=\"hljs-number\">3</span>; <span class=\"hljs-comment\">/* Firefox */</span>\n  -webkit-<span class=\"hljs-attribute\">column-count</span>: <span class=\"hljs-number\">3</span>; <span class=\"hljs-comment\">/* Safari 和 Chrome */</span>\n  <span class=\"hljs-attribute\">column-count</span>: <span class=\"hljs-number\">3</span>;\n}\n</code></pre>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tNbRwgy1fuqrbczw9jj30x80d679n.jpg\" alt=\"\"></p>\n</li>\n<li><p><strong>column-fill</strong>: 规定如何填充列。<br><strong>语法：</strong> <code>column-fill: balance|auto;</code></p>\n<ul>\n<li><code>balance</code> 对列进行协调。浏览器应对列长度的差异进行最小化处理。</li>\n<li><code>auto</code> 按顺序对列进行填充，列长度会各有不同。<br><strong>示例：</strong></li>\n</ul>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">div</span> {\n  <span class=\"hljs-attribute\">column-fill</span>: auto;\n}\n</code></pre>\n</li>\n<li><p><strong>column-gap</strong>: 规定列之间的间隔。<br><strong>语法：</strong> <code>column-gap: length|normal;</code></p>\n<ul>\n<li><code>length</code> 把列间的间隔设置为指定的长度。</li>\n<li><code>normal</code> 规定列间间隔为一个常规的间隔。W3C 建议的值是 1em。<br><strong>示例：</strong><pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">div</span> {\n-moz-<span class=\"hljs-attribute\">column-gap</span>: <span class=\"hljs-number\">40px</span>; <span class=\"hljs-comment\">/* Firefox */</span>\n-webkit-<span class=\"hljs-attribute\">column-gap</span>: <span class=\"hljs-number\">40px</span>; <span class=\"hljs-comment\">/* Safari 和 Chrome */</span>\n<span class=\"hljs-attribute\">column-gap</span>: <span class=\"hljs-number\">40px</span>;\n}\n</code></pre>\n<img src=\"https://ws3.sinaimg.cn/large/006tNbRwgy1fuqrjcfhi9j30xi08wdiy.jpg\" alt=\"\"></li>\n</ul>\n</li>\n<li><p><strong>column-rule</strong>: 设置所有 column-rule-* 属性的简写属性。包括 列之间 的 颜色、样式、宽度<br><strong>语法：</strong> <code>column-rule: column-rule-width column-rule-style column-rule-color;</code></p>\n<ul>\n<li><p><strong><code>column-rule-width</code></strong> 设置列之间的宽度规则。</p>\n<ul>\n<li><strong>语法：</strong> <code>column-rule-width: thin|medium|thick|length;</code></li>\n<li><code>thin</code> 定义纤细规则。</li>\n<li><code>medium</code> 定义中等规则。</li>\n<li><code>thick</code> 定义宽厚规则。</li>\n<li><code>length</code> 规定规则的宽度。</li>\n</ul>\n</li>\n<li><p><strong><code>column-rule-style</code></strong> 设置列之间的样式规则。</p>\n<ul>\n<li><strong>语法：</strong> <code>column-rule-style: none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset;</code></li>\n<li><code>none</code> 定义没有规则。</li>\n<li><code>hidden</code> 定义隐藏规则。</li>\n<li><code>dotted</code> 定义点状规则。</li>\n<li><code>dashed</code> 定义虚线规则。</li>\n<li><code>solid</code> 定义实线规则。</li>\n<li><code>double</code> 定义双线规则。</li>\n<li><code>groove</code> 定义 3D grooved 规则。该效果取决于宽度和颜色值。</li>\n<li><code>ridge</code> 定义 3D ridged 规则。该效果取决于宽度和颜色值。</li>\n<li><code>inset</code> 定义 3D inset 规则。该效果取决于宽度和颜色值。</li>\n<li><code>outset</code> 定义 3D outset 规则。该效果取决于宽度和颜色值。</li>\n</ul>\n</li>\n<li><p><strong><code>column-rule-color</code></strong> 设置列之间的颜色规则。</p>\n<ul>\n<li><strong>语法：</strong> <code>column-rule-color: color;</code></li>\n<li><code>color</code> 规定颜色规则。请参阅 <a href=\"http://www.w3school.com.cn/cssref/css_colors_legal.asp\">CSS 颜色值</a>。</li>\n</ul>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">div</span> {\n  -moz-<span class=\"hljs-attribute\">column-rule</span>: <span class=\"hljs-number\">3px</span> outset <span class=\"hljs-number\">#ff0000</span>; <span class=\"hljs-comment\">/* Firefox */</span>\n  -webkit-<span class=\"hljs-attribute\">column-rule</span>: <span class=\"hljs-number\">3px</span> outset <span class=\"hljs-number\">#ff0000</span>; <span class=\"hljs-comment\">/* Safari and Chrome */</span>\n  <span class=\"hljs-attribute\">column-rule</span>: <span class=\"hljs-number\">3px</span> outset <span class=\"hljs-number\">#ff0000</span>;\n}\n</code></pre>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tNbRwgy1fusmomdnszj30xg09mgpn.jpg\" alt=\"\"></p>\n</li>\n</ol>\n<p><strong>浏览器支持：</strong>\n<img src=\"https://ws3.sinaimg.cn/large/006tNbRwgy1fuqqzk5gl6j30u20eewi4.jpg\" alt=\"\">\nInternet Explorer 10 和 Opera 支持多列属性。<br>Firefox 需要前缀 -moz-。<br>Chrome 和 Safari 需要前缀 -webkit-。</p>\n<p><a id='id10'></a></p>\n<h2 id=\"css3-用户界面\">CSS3 用户界面</h2>\n<p><strong>CSS3 新增的用户界面属性：</strong> 利用 css3 的用户界面属性，可以重设元素尺寸、盒尺寸以及轮廓等。</p>\n<p><strong>先看所有的用户界面属性</strong></p>\n<ul>\n<li><code>appearance</code> 允许您将元素设置为标准用户界面元素的外观</li>\n<li><code>box-sizing</code> 允许您以确切的方式定义适应某个区域的具体内容。</li>\n<li><code>icon</code> 为创作者提供使用图标化等价物来设置元素样式的能力。</li>\n<li><code>nav-down</code> 规定在使用 arrow-down 导航键时向何处导航。</li>\n<li><code>nav-index</code> 设置元素的 tab 键控制次序。</li>\n<li><code>nav-left</code> 规定在使用 arrow-left 导航键时向何处导航。</li>\n<li><code>nav-right</code> 规定在使用 arrow-right 导航键时向何处导航。</li>\n<li><code>nav-up</code> 规定在使用 arrow-up 导航键时向何处导航。</li>\n<li><code>outline-offset</code> 对轮廓进行偏移，并在超出边框边缘的位置绘制轮廓。</li>\n<li><code>resize</code> 规定是否可由用户对元素的尺寸进行调整。</li>\n</ul>\n<p><strong>\b 我这边简单介绍一下 浏览器支持比较好的 几个属性</strong></p>\n<ol>\n<li><p><strong>box-sizing</strong>: 改变 css 的 width、height 在盒模型中的指向。</p>\n<ul>\n<li>因为 css 默认 width 指向的是盒模型的内容宽度(图中蓝色部分)，而 整个盒模型的宽度 = padding + border + 内容 width，整个盒模型所占据文本流的位置还要包括其 margin 值。</li>\n<li>而一般我们所想的，我们设置的 width 值，应该是 整个 \b 盒模型的宽度，所以问题就产生了。</li>\n<li>那么这个<code>box-sizing</code>，就是用来解决 \bwidth、height 在盒模型中的指向问题的。<br><img src=\"https://ws4.sinaimg.cn/large/006tNbRwgy1fusoa0l7n5j30ak0aa74j.jpg\" alt=\"\"></li>\n</ul>\n<p><strong>语法：</strong> <code>box-sizing: content-box|border-box|inherit;</code></p>\n<ul>\n<li><code>content-box</code> 默认，CSS2.1 规定的宽度高度行为。将 width、height 指向内容宽度，padding、border 不被包括在内。<br><em>width、height 指向如下图：</em><br><img src=\"https://ws3.sinaimg.cn/large/006tNbRwgy1fusob65rl6j30au0aeaam.jpg\" alt=\"\"></li>\n<li><code>border-box</code> width 指向 内容宽度+padding+border，内容宽度根据减法自适应。height 同理。<br><em>width、height 指向如下图：</em><br><img src=\"https://ws2.sinaimg.cn/large/006tNbRwgy1fusob3mmr2j30au0aeq3i.jpg\" alt=\"\"></li>\n<li><code>inherit</code> 继承 父元素 box-sizing 属性的值。</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">div</span> {\n  <span class=\"hljs-attribute\">box-sizing</span>: border-box;\n  -moz-<span class=\"hljs-attribute\">box-sizing</span>: border-box; <span class=\"hljs-comment\">/* Firefox */</span>\n  -webkit-<span class=\"hljs-attribute\">box-sizing</span>: border-box; <span class=\"hljs-comment\">/* Safari */</span>\n}\n</code></pre>\n<p><strong>浏览器支持：</strong>\n<img src=\"https://ws4.sinaimg.cn/large/006tNbRwgy1fusofkoju7j30vc06oabn.jpg\" alt=\"\">\nInternet Explorer、Opera 以及 Chrome 支持 box-sizing 属性。<br> Firefox 支持替代的 -moz-box-sizing 属性。</p>\n</li>\n<li><p><strong>outline-offset</strong>: 此属性对轮廓进行偏移。<br><strong>语法：</strong> <code>outline-offset: length|inherit;</code></p>\n<ul>\n<li><code>length</code> 轮廓与边框边缘的距离。</li>\n<li><code>inherit</code> 规定应从父元素继承 outline-offset 属性的值。</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">div</span> {\n  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">2px</span> solid black;\n  <span class=\"hljs-attribute\">outline</span>: <span class=\"hljs-number\">2px</span> solid red;\n  <span class=\"hljs-attribute\">outline-offset</span>: <span class=\"hljs-number\">15px</span>;\n}\n</code></pre>\n<p><strong>使用对比：</strong> <em>后者为使用了<code>outline-offset:15px;</code></em><br><img src=\"https://ws1.sinaimg.cn/large/006tNbRwgy1fuson2ha9gj30ck07mwev.jpg\" alt=\"\">\n<img src=\"https://ws2.sinaimg.cn/large/006tNbRwgy1fusomvlpg6j30cs08ajrs.jpg\" alt=\"\"><br><strong>浏览器支持：</strong><br> 所有主流浏览器都支持 outline-offset 属性，除了 Internet Explorer。</p>\n</li>\n</ol>\n<p><strong>\b 其余几个属性只有小部分浏览器支持</strong><br><a href=\"http://www.w3school.com.cn/css3/css3_user_interface.asp\"><strong>参看所有转换属性的使用</strong></a></p>\n"}},"__N_SSG":true}