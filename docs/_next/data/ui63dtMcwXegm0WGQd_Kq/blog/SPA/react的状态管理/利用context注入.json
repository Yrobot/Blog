{"pageProps":{"pre":{"path":"_blogs/SPA/react的状态管理/利用react-redux.md","url":"/blog/SPA/react的状态管理/利用react-redux","title":"react的状态管理—利用react-redux","author":"yrobot","keywords":"react,redux,状态管理,利用","createTime":1537632000000,"length":3545,"content":"<p><strong>本页目录：</strong><br><a href=\"#index\">场景思考</a><br><a href=\"#redux\">利用react-redux</a><br><a href=\"#result\">查看效果</a><br><a href=\"#code\">查看代码</a>  </p>\n<p><a id='index'></a></p>\n<h2 id=\"场景思考\">场景思考</h2>\n<p>现在我们用react去写一篇博客<br>博客包含 <code>标题</code> 和 <code>内容</code><br>而我期望<code>标题</code>和<code>内容</code>的颜色可以一键修改  </p>\n<p>当然最暴力的实现方式就是利用dom操作去被动的修改<br>但是有没有更优雅更可控的方式呢？  </p>\n<p>首先来看看项目的组件树：<br><img src=\"https://ws1.sinaimg.cn/large/006tNbRwgy1fvekxo7hlhj30c00aj0sy.jpg\" alt=\"\"></p>\n<p>那么有什么好的优雅的方式使<code>Title</code>和<code>Content</code>的颜色保持一致呢？<br>换句话说，怎么更好的管理<code>Title</code>和<code>Content</code>的状态呢？ </p>\n<h4 id=\"回顾上一节\">回顾上一节</h4>\n<p>上一节我们使用react自带的 <a href=\"../%E5%88%A9%E7%94%A8context%E6%B3%A8%E5%85%A5\">\b利用context注入</a> 方法<br>利用react的context去实现状态共享很方便<br>但是react的context还是实验性的，何时会更新无法预知<br>所以为了保证软件的稳定性，我们还是使用react推荐的第三方状态管理redux   </p>\n<p><a id='redux'></a></p>\n<h2 id=\"利用react-redux\">利用react-redux</h2>\n<p>redux 是一套专业解决应用状态管理的独立的通用模块\b<br>它不仅可以和react结合，形成react-redux，也可以和vue、angular结合  </p>\n<p><strong>react-redux的作用：</strong> 类似于\breact的context，\breact-redux在顶层组件利用Provider将store注入，在需要用到状态的组件处用connect函数包裹，从组件的props中获取store  </p>\n<p><strong>react-redux的使用方法：</strong>  </p>\n<ol>\n<li>根据全局数据，将其拆分为多个<code>reducer</code></li>\n<li>对于每个<code>reducer</code>分配<code>state</code>（<code>reducers.reducer</code>）和<code>action</code>，处理对应的<code>action</code>操作，生成行的<code>state</code></li>\n<li>将<code>reducer</code>合并成<code>reducers</code>,<code>reducers</code>分配传入的<code>state</code>和<code>action</code>操作到<code>reducer</code> </li>\n<li><code>createStore()</code>传入<code>reducers</code>生成<code>store</code>，并用<code>Provider</code>将<code>store</code>注入顶层组件</li>\n<li>在要引用<code>store</code>的组件部分用<code>connect()</code>连接，<code>connect()</code>会注册监听、将<code>dispatch()</code>[默认写入]和<code>mapStateToProps</code>的属性写入<code>props</code>，当然如果使用<code>mapDispatchToProps</code>生成的<code>action creator</code>也会写入<code>props</code>。</li>\n<li>在组件中通过<code>props</code>获取5中写入<code>props</code>的数据即可使用。</li>\n<li>通过<code>dispatch()</code>的参数会触发<code>reducers</code>的<code>action</code>操作，从而更新状态  </li>\n</ol>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tNbRwgy1fvlqv6xb3uj30yu0sagqj.jpg\" alt=\"\"></p>\n<p><strong>react-redux的优势：</strong> </p>\n<ol>\n<li>相对于react自带的context，react-redux更加稳定成熟，并对性能进行了优化  </li>\n<li>相对于props的状态提升，react-redux更加的方便简洁，整个全局状态也更加清晰   </li>\n</ol>\n<p><strong>老话说的好，杀鸡焉用牛刀，在简单场景直接使用状态提升即可</strong>  </p>\n<p><a id='result'></a></p>\n<h2 id=\"查看效果\">查看效果</h2>\n<ol>\n<li><img src=\"https://ws3.sinaimg.cn/large/006tNbRwgy1fvhmmoieh4j31kw0nxdpk.jpg\" alt=\"\"></li>\n<li><img src=\"https://ws2.sinaimg.cn/large/006tNbRwgy1fvhmmukgfyj31kw0o2qcy.jpg\" alt=\"\"></li>\n</ol>\n<p><a id='code'></a></p>\n<h2 id=\"查看代码\">查看代码</h2>\n<p>reducers.js生成全局状态：  </p>\n<pre><code>import { combineReducers } <span class=\"hljs-keyword\">from</span> &#x27;redux&#x27;\n\n<span class=\"hljs-keyword\">const</span> mainColor = (<span class=\"hljs-keyword\">state</span> = &#x27;black&#x27;,action)=&gt;{\n    switch (action.type){\n        case &#x27;CHANGE_COLOR&#x27;:\n            <span class=\"hljs-keyword\">state</span> = action.color;\n            return <span class=\"hljs-keyword\">state</span>;\n        <span class=\"hljs-keyword\">default</span>:\n            return <span class=\"hljs-keyword\">state</span>;\n    }\n}\n\nexport <span class=\"hljs-keyword\">default</span> combineReducers({\n    mainColor,\n})\n</code></pre>\n<p>BlogPage.js中\b生成store，并利用Provider注入顶层组件：</p>\n<pre><code><span class=\"hljs-keyword\">import</span> reducers <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./reducers.js&#x27;</span>\n\n<span class=\"hljs-keyword\">const</span> store = createStore(reducers);\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BlogPage</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span> {\n        <span class=\"hljs-built_in\">super</span>(props);\n        <span class=\"hljs-built_in\">this</span>.state = {\n        }\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {\n        <span class=\"hljs-keyword\">return</span> (\n            <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Provider</span> <span class=\"hljs-attr\">store</span> = <span class=\"hljs-string\">{store}</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span> =<span class=\"hljs-string\">&quot;blogContainer&quot;</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Header</span> &gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Header</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Main</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Main</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Provider</span>&gt;</span></span>\n        );\n    }\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> BlogPage;\n</code></pre>\n<p>Content.js中利用connect()函数将状态写入组件props：  </p>\n<pre><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Content</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span> {\n        <span class=\"hljs-built_in\">super</span>(props);\n        <span class=\"hljs-built_in\">this</span>.state = {}\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {\n        <span class=\"hljs-keyword\">const</span> {mainColor,changeMainColor} = <span class=\"hljs-built_in\">this</span>.props;\n        <span class=\"hljs-keyword\">return</span> (\n            <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;content&quot;</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">color:</span> <span class=\"hljs-attr\">mainColor</span> }}&gt;</span>\n                内容...\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;button&quot;</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> { changeMainColor(&#x27;#&#x27; + (Math.random() * 0xffffff &lt;&lt; 0).toString(16)) }}&gt;切换颜色<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n\n        );\n    }\n}\n\n<span class=\"hljs-keyword\">const</span> mapStateToProps = <span class=\"hljs-function\"><span class=\"hljs-params\">state</span> =&gt;</span> ({  <span class=\"hljs-comment\">//引入状态到props，并注册监听变化</span>\n    <span class=\"hljs-attr\">mainColor</span>: state.mainColor\n})\n\n<span class=\"hljs-keyword\">const</span> mapDispatchToProps = <span class=\"hljs-function\"><span class=\"hljs-params\">dispatch</span> =&gt;</span> ({ <span class=\"hljs-comment\">//引入方法到props</span>\n    <span class=\"hljs-attr\">changeMainColor</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">color</span> =&gt;</span> {\n        dispatch({\n            <span class=\"hljs-attr\">type</span>:<span class=\"hljs-string\">&#x27;CHANGE_COLOR&#x27;</span>,\n            color,\n        })\n    }\n})\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> connect(  <span class=\"hljs-comment\">//绑定组件 //高阶组件:函数接受一个组件作为参数，并返回一个新的组件</span>\n    mapStateToProps,\n    mapDispatchToProps\n)(Content);\n</code></pre>\n"},"blog":{"path":"_blogs/SPA/react的状态管理/利用context注入.md","url":"/blog/SPA/react的状态管理/利用context注入","title":"react的状态管理—利用context注入","author":"yrobot","keywords":"context,状态管理,react,注入,利用","createTime":1537545600000,"length":3383,"content":"<p><strong>本页目录：</strong><br><a href=\"#index\">场景思考</a><br><a href=\"#context\">利用context注入</a><br><a href=\"#result\">查看效果</a><br><a href=\"#code\">查看代码</a>  </p>\n<p><a id='index'></a></p>\n<h2 id=\"场景思考\">场景思考</h2>\n<p>现在我们用react去写一篇博客<br>博客包含 <code>标题</code> 和 <code>内容</code><br>而我期望<code>标题</code>和<code>内容</code>的颜色可以一键修改  </p>\n<p>当然最暴力的实现方式就是利用dom操作去被动的修改<br>但是有没有更优雅更可控的方式呢？  </p>\n<p>首先来看看项目的组件树：<br><img src=\"https://ws1.sinaimg.cn/large/006tNbRwgy1fvekxo7hlhj30c00aj0sy.jpg\" alt=\"\"></p>\n<p>那么有什么好的优雅的方式使<code>Title</code>和<code>Content</code>的颜色保持一致呢？<br>换句话说，怎么更好的管理<code>Title</code>和<code>Content</code>的状态呢？ </p>\n<h4 id=\"回顾上一节\">回顾上一节</h4>\n<p>上一节我们使用最基础的<a href=\"../%E5%88%A9%E7%94%A8props%E7%8A%B6%E6%80%81%E6%8F%90%E5%8D%87\">props状态提升</a>的方法<br>但当组件链很长的时候，新增一个状态就必须修改每个组件的props<br>那有没有跟直接的方法，搞一个共享状态，每个组件可以自由访问呢<br>react自带的context就是用来实现这一点的  </p>\n<p><a id='context'></a></p>\n<h2 id=\"利用context注入\">利用context注入</h2>\n<p>react的context可以代替props的传递工作  </p>\n<p><strong>context的作用：</strong> 将顶部\b组件的状态和方法与子组件共享  </p>\n<p><strong>context的使用方法：</strong>  </p>\n<ol>\n<li>利用<code>React.createContext()</code>生成一对<code>{Provider,Consumer}</code>  </li>\n<li>用生成的<code>Provider</code>包裹\b顶部组件，利用他props的value字段传入共享状态与方法  <pre><code><span class=\"xml\"> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Provider</span> <span class=\"hljs-attr\">value</span>=</span></span><span class=\"hljs-template-variable\">{{<span class=\"hljs-name\">状态和方法</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span>\n     &lt;顶层组件&gt;\n <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Provider</span>&gt;</span></span>\n</code></pre>\n</li>\n<li>用生成的<code>Consumer</code>包裹使用共享状态的组件，在Consumer内子组件外用函数传入共享的状态  <pre><code> <span class=\"hljs-attribute\">&lt;Consumer&gt;</span>\n     {value =&gt; (\n         <span class=\"hljs-attribute\">&lt;子组件 使用value&gt;</span>\n     )}\n <span class=\"hljs-attribute\">&lt;/Consumer&gt;</span>\n</code></pre>\n</li>\n<li>保证状态位于顶层组件的<code>state</code>中，而共享的方法要更新状态也是利用<code>setState</code>，这样UI层才会刷新  </li>\n</ol>\n<p><img src=\"https://ws4.sinaimg.cn/large/006tNbRwgy1fvhm1xim52j30yg0pqads.jpg\" alt=\"\"></p>\n<p><strong>context的优势：</strong> </p>\n<ol>\n<li>只需要在顶层组件和用到状态的子组件进行操作，省去了props状态提升中对中间组件的数据传递操作。代码更清晰。   </li>\n<li>无需引入第三方状态管理，学习成本也相对较低  </li>\n</ol>\n<p><strong>尽管context相对于props状态提升方便很多，\b但是react官网还是 <em>不建议</em> 使用context，因为context的API是实验性的，在未来的react版本中会被修改。</strong>  </p>\n<p><strong>在简单场景,推荐使用props状态提升</strong><br><strong>在较复杂的场景，应该考虑引入第三方状态管理(如Redux、Mobx)</strong>  </p>\n<p><a id='result'></a></p>\n<h2 id=\"查看效果\">查看效果</h2>\n<ol>\n<li><img src=\"https://ws3.sinaimg.cn/large/006tNbRwgy1fvhmmoieh4j31kw0nxdpk.jpg\" alt=\"\"></li>\n<li><img src=\"https://ws2.sinaimg.cn/large/006tNbRwgy1fvhmmukgfyj31kw0o2qcy.jpg\" alt=\"\"></li>\n</ol>\n<p><a id='code'></a></p>\n<h2 id=\"查看代码\">查看代码</h2>\n<p>mainColorContext.js暴露React.createContext：  </p>\n<pre><code><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> mainColorContext = React.createContext(\n    {\n        <span class=\"hljs-attr\">mainColor</span>:<span class=\"hljs-string\">&#x27;black&#x27;</span>\n    } <span class=\"hljs-comment\">// 默认值</span>\n);\n</code></pre>\n<p>BlogPage.js中引入mainColorContext，定义全局状态mainColor和方法changeMainColor()并传入Provider： </p>\n<pre><code><span class=\"hljs-keyword\">import</span> {mainColorContext} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./mainColorContext.js&#x27;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BlogPage</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span> {\n        <span class=\"hljs-built_in\">super</span>(props);\n        <span class=\"hljs-built_in\">this</span>.state = {\n            <span class=\"hljs-attr\">mainColor</span>: <span class=\"hljs-string\">&#x27;black&#x27;</span>\n        }\n    }\n    changeMainColor = <span class=\"hljs-function\">(<span class=\"hljs-params\">color</span>) =&gt;</span> {\n        <span class=\"hljs-built_in\">this</span>.setState({ <span class=\"hljs-comment\">//this的绑定//运行时//但是箭头函数没有this//直接沿着作用域链往上找找到BlogPage类的this //换成function就不行了，obj.func()会修改this指向为obj</span>\n            <span class=\"hljs-attr\">mainColor</span>: color\n        })\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {\n        <span class=\"hljs-keyword\">const</span> { mainColor } = <span class=\"hljs-built_in\">this</span>.state;\n        <span class=\"hljs-keyword\">return</span> (\n            <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mainColorContext.Provider</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{{mainColor,changeMainColor:this.changeMainColor}}</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;blogContainer&quot;</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Header</span> &gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Header</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Main</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Main</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mainColorContext.Provider</span>&gt;</span></span>\n        );\n    }\n}\n</code></pre>\n<p>Content.js组件中获取使用Consumer传递的数据和方法：</p>\n<pre><code><span class=\"hljs-keyword\">import</span> {mainColorContext} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../../BlogPage/mainColorContext.js&#x27;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Content</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span> {\n        <span class=\"hljs-built_in\">super</span>(props);\n        <span class=\"hljs-built_in\">this</span>.state = {}\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {\n        <span class=\"hljs-keyword\">return</span> (\n            <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mainColorContext.Consumer</span>&gt;</span>\n                {value =&gt; (\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;content&quot;</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">color:</span> <span class=\"hljs-attr\">value.mainColor</span> }}&gt;</span>\n                        文本...\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;button&quot;</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span>=&gt;</span>{value.changeMainColor(&#x27;#&#x27; + (Math.random() * 0xffffff &lt;&lt; 0).toString(16))}}&gt;切换颜色<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n                )}\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mainColorContext.Consumer</span>&gt;</span></span>\n\n        );\n    }\n}\n</code></pre>\n"},"next":{"path":"_blogs/SPA/react的状态管理/利用props状态提升.md","url":"/blog/SPA/react的状态管理/利用props状态提升","title":"react的状态管理—利用props状态提升","author":"yrobot","keywords":"状态管理,props,react,状态,提升,利用","createTime":1537200000000,"length":2341,"content":"<p><strong>本页目录：</strong><br><a href=\"#index\">场景思考</a><br><a href=\"#props\">利用props状态提升</a><br><a href=\"#result\">查看效果</a><br><a href=\"#code\">查看代码</a>  </p>\n<p><a id='index'></a></p>\n<h2 id=\"场景思考\">场景思考</h2>\n<p>现在我们用react去写一篇博客<br>博客包含 <code>标题</code> 和 <code>内容</code><br>而我期望<code>标题</code>和<code>内容</code>的颜色可以一键修改  </p>\n<p>当然最暴力的实现方式就是利用dom操作去被动的修改<br>但是有没有更优雅更可控的方式呢？  </p>\n<p>首先来看看项目的组件树：<br><img src=\"https://ws1.sinaimg.cn/large/006tNbRwgy1fvekxo7hlhj30c00aj0sy.jpg\" alt=\"\"></p>\n<p>那么有什么好的优雅的方式使<code>Title</code>和<code>Content</code>的颜色保持一致呢？<br>换句话说，怎么更好的管理<code>Title</code>和<code>Content</code>的状态呢？  </p>\n<p><a id='props'></a></p>\n<h2 id=\"利用props状态提升\">利用props状态提升</h2>\n<p>学习了react，就知道组件间数据交互最普遍的方式就是利用props传递<br>而目我们要做的就是Title和Content引用的是同一个颜色变量，而且在变量改变时组件自动重新渲染<br>利用react最基础的方法就是利用状态提升:<br>把一些共享的状态放在最顶端的组件中，子组件通过props去访问和修改这些状态  </p>\n<p>本场景中需要共享的状态只有一个<code>mainColor</code>和一个修改mainColor的函数<code>changeMainColor()</code><br>具体流程如下图：<br><img src=\"https://ws1.sinaimg.cn/large/006tNbRwgy1fvexnc4cbcj30ss0poacx.jpg\" alt=\"\">\n\b可以看到，需要在content和title中用mainColor，需要通过组件props层层传递到需要用状态的组件，函数也是同理  </p>\n<p><a id='result'></a></p>\n<h2 id=\"查看效果\">查看效果</h2>\n<ol>\n<li><img src=\"https://ws3.sinaimg.cn/large/006tNbRwgy1fvey3e0sw6j31kw0lmdoe.jpg\" alt=\"\"></li>\n<li><img src=\"https://ws1.sinaimg.cn/large/006tNbRwgy1fvey3n6qu4j31kw0n1aju.jpg\" alt=\"\"></li>\n<li><img src=\"https://ws4.sinaimg.cn/large/006tNbRwgy1fvey3xqxwpj31kw0nntin.jpg\" alt=\"\"></li>\n</ol>\n<p><a id='code'></a></p>\n<h2 id=\"查看代码\">查看代码</h2>\n<p>BlogPage中定义全局状态mainColor和方法changeMainColor()并传递： </p>\n<pre><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BlogPage</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span> {\n        <span class=\"hljs-built_in\">super</span>(props);\n        <span class=\"hljs-built_in\">this</span>.state = {\n            <span class=\"hljs-attr\">mainColor</span>: <span class=\"hljs-string\">&#x27;black&#x27;</span>\n        }\n    }\n    changeMainColor = <span class=\"hljs-function\">(<span class=\"hljs-params\">color</span>) =&gt;</span> {\n        <span class=\"hljs-built_in\">this</span>.setState({\n            <span class=\"hljs-attr\">mainColor</span>: color\n        })\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {\n        <span class=\"hljs-keyword\">const</span> { mainColor } = <span class=\"hljs-built_in\">this</span>.state;\n        <span class=\"hljs-keyword\">return</span> (\n            <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;blogContainer&quot;</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Header</span> <span class=\"hljs-attr\">mainColor</span>=<span class=\"hljs-string\">{mainColor}</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Header</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Main</span> <span class=\"hljs-attr\">mainColor</span>=<span class=\"hljs-string\">{mainColor}</span> <span class=\"hljs-attr\">changeMainColor</span>=<span class=\"hljs-string\">{this.changeMainColor}</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Main</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n        );\n    }\n}\n</code></pre>\n<p>Content组件中使用props传递的数据和方法：</p>\n<pre><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Content</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span> {\n        <span class=\"hljs-built_in\">super</span>(props);\n        <span class=\"hljs-built_in\">this</span>.state = {}\n    }\n    randomColor = <span class=\"hljs-function\">() =&gt;</span> {\n        <span class=\"hljs-built_in\">this</span>.props.changeMainColor(<span class=\"hljs-string\">&#x27;#&#x27;</span> + (<span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">0xffffff</span> &lt;&lt; <span class=\"hljs-number\">0</span>).toString(<span class=\"hljs-number\">16</span>));\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {\n        <span class=\"hljs-keyword\">const</span> {mainColor}=<span class=\"hljs-built_in\">this</span>.props;\n        <span class=\"hljs-keyword\">return</span> (\n            <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;content&quot;</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{color:mainColor}}</span>&gt;</span>\n                内容...\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;button&quot;</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.randomColor}</span>&gt;</span>切换颜色<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n        );\n    }\n}\n</code></pre>\n<hr>\n<p><em>\b本章节部分参考<a href=\"http://huziketang.mangojuice.top/books/react/lesson29\">React.js 小书</a>，在此感谢！</em></p>\n"}},"__N_SSG":true}