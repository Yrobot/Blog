{"pageProps":{"pre":{"path":"_blogs/HTML&CSS/display属性/README.md","url":"/blog/HTML&CSS/display属性","title":"display 属性","author":"yrobot","keywords":"display,属性","createTime":1535040000000,"length":662,"content":"<p><strong>本页目录：</strong><br><a href=\"#display\">display有哪些值,以及作用</a><br><a href=\"#nest\">html元素嵌套规则</a>  </p>\n<p><a id='display'></a></p>\n<h2 id=\"display有哪些值以及作用\">display有哪些值,以及作用</h2>\n<ul>\n<li>block 块类型。默认宽度为父元素宽度，可设置宽高，换行显示。</li>\n<li>none 缺省值。像行内元素类型一样显示。</li>\n<li>inline 行内元素类型。默认宽度为内容宽度，__不可设置宽高、margin上下、padding上下__，同行显示。</li>\n<li>inline-block 默认宽度为内容宽度，可以设置宽高，同行显示。__元素间会有间隙__（HTML 中的换行符、空格符、制表符等合并为空白符，字体大小不为 0 的情况下，空白符自然占据一定的宽度，使用inline-block 会产生元素间的空隙）</li>\n<li>list-item 像块类型元素一样显示，并添加样式列表标记。</li>\n<li>table 此元素会作为块级表格来显示。</li>\n<li>inherit 规定应该从父元素继承display属性的值</li>\n</ul>\n<p><a id='nest'></a></p>\n<h2 id=\"html元素嵌套规则\">html元素嵌套规则</h2>\n<ol>\n<li>块级元素可以包含内联元素或某些块级元素，但内联元素不能包含块级元素，它只能包含其它内联元素。</li>\n<li>块级元素不能放在p里面。</li>\n<li>有几个特殊的块级元素只能包含内联元素，不能包含块级元素。如h1,h2,h3,h4,h5,h6,p,dt</li>\n<li>li内可以包含div</li>\n<li>块级元素与块级元素并列、内联元素与内联元素并列。</li>\n</ol>\n"},"blog":{"path":"_blogs/JS/JS-DOM事件触发机制/README.md","url":"/blog/JS/JS-DOM事件触发机制","title":"JS-DOM事件触发机制","author":"yrobot","keywords":"DOM,JS,触发,机制,事件","createTime":1535040000000,"length":3266,"content":"<p><strong>本页目录：</strong><br><a href=\"#id1\">问题的起因</a><br><a href=\"#id2\">事件冒泡</a><br><a href=\"#id3\">事件捕获</a><br><a href=\"#id4\">addEventListener的第三个参数</a><br><a href=\"#id5\">事件捕获先还是事件冒泡先？</a>  </p>\n<hr>\n<p><a id='id'></a></p>\n<h2 id=\"问题的起因\">问题的起因</h2>\n<ul>\n<li>事件冒泡和事件捕获分别由微软和网景公司提出，这两个概念都是为了解决页面中事件流（事件发生顺序）的问题。  </li>\n<li>考虑下面这段代码，就不写html-&gt;head,body之类的代码了，自行脑补  <pre><code>&lt;div id=&quot;outer&quot;&gt;\n    &lt;p id=&quot;inner&quot;&gt;Click me!&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>上面的代码当中一个div元素当中有一个p子元素，如果两个元素都有一个click的处理函数，那么我们怎么才能知道哪一个函数会首先被触发呢？  </li>\n<li>为了解决这个问题微软和网景提出了两种几乎完全相反的概念：__事件冒泡 和 事件捕获__。 </li>\n</ul>\n<p><a id='id2'></a></p>\n<h2 id=\"事件冒泡\">事件冒泡</h2>\n<ul>\n<li><p>微软提出了名为事件冒泡(event bubbling)的事件流。事件冒泡可以形象地比喻为把一颗石头投入水中，泡泡会一直从水底冒出水面。也就是说，事件会从最内层的元素开始发生，一直向上传播，直到document对象。  </p>\n</li>\n<li><p>因此在事件冒泡的概念下在p元素上发生click事件的顺序应该是 <strong>p -&gt; div -&gt; body -&gt; html -&gt; document</strong> \n<a id='id3'></a></p>\n</li>\n</ul>\n<h2 id=\"事件捕获\">事件捕获</h2>\n<ul>\n<li><p>网景提出另一种事件流名为事件捕获(event capturing)。与事件冒泡相反，事件会从最外层开始发生，直到最具体的元素。</p>\n</li>\n<li><p>因此在事件捕获的概念下在p元素上发生click事件的顺序应该是 <strong>document -&gt; html -&gt; body -&gt; div -&gt; p</strong></p>\n</li>\n</ul>\n<p><a id='id4'></a></p>\n<h2 id=\"addeventlistener的第三个参数\">addEventListener的第三个参数</h2>\n<ul>\n<li>网景 和 微软 曾经的战争还是比较火热的，当时， 网景主张捕获方式，微软主张冒泡方式。后来 w3c 采用折中的方式，平息了战火，制定了统一的标准—— __先捕获再冒泡__。 </li>\n<li><strong>document -&gt; html -&gt; body -&gt; div -&gt; p -&gt; div -&gt; body -&gt; html -&gt; document</strong></li>\n</ul>\n<p>addEventListener的第三个参数就是为冒泡和捕获准备的.   </p>\n<p><code>element.addEventListener(event, function, useCapture)</code></p>\n<p>第一个参数<code>event</code>是需要绑定的事件(string,例：&#39;click&#39;)<br>第二个参数<code>function</code>是触发事件后要执行的函数<br>第三个参数<code>useCapture</code>默认值是false，表示在事件冒泡阶段调用事件处理函数; 如果参数为true，则表示在事件捕获阶段调用处理函数。  </p>\n<p><a id='id5'></a></p>\n<h2 id=\"事件捕获先还是事件冒泡先？\">事件捕获先还是事件冒泡先？</h2>\n<ul>\n<li><p>当事件捕获和事件冒泡一起存在的情况，事件又是如何触发呢？  </p>\n</li>\n<li><p>这里记被点击的DOM节点为<code>target</code>节点：  </p>\n<ol>\n<li><p><code>document</code> 往 <code>target</code>节点，捕获前进，遇到注册的捕获事件立即触发执行  </p>\n</li>\n<li><p>到达<code>target</code>节点，触发事件（对于<code>target</code>节点上，是先捕获还是先冒泡则捕获事件和冒泡事件的注册顺序，先注册先执行）  </p>\n</li>\n<li><p><code>target</code>节点 往 <code>document </code>方向，冒泡前进，遇到注册的冒泡事件立即触发</p>\n</li>\n</ol>\n</li>\n<li><p><strong>总结</strong> :  </p>\n</li>\n</ul>\n<ol>\n<li>对于非target节点则先执行捕获在执行冒泡  </li>\n<li>对于target节点则是先执行先注册的事件，无论冒泡还是捕获</li>\n</ol>\n<h4 id=\"例子\">例子</h4>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;TestJSevent&lt;/title&gt;\n    &lt;style&gt;\n        #son {\n            width: 100px;\n            height: 100px;\n            background-color: #0f0;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div id=&quot;father&quot;&gt;\n        &lt;div id=&quot;mather&quot;&gt;\n            &lt;div id=&quot;son&quot;&gt;&lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div id=&quot;text&quot;&gt;&lt;/div&gt;\n    &lt;script&gt;  \n        var Son = document.getElementById(&quot;son&quot;);\n        var Father = document.getElementById(&quot;father&quot;);\n        function Click(Id, Type) {\n            document.getElementById(&quot;text&quot;).innerHTML += Id + &quot;  &quot; + Type + &quot; clicked  ||   &quot;;\n        }\n        Son.addEventListener(&quot;click&quot;, function () { Click(&quot;son&quot;, &quot;false&quot;) }, false);\n        Son.addEventListener(&quot;click&quot;, function () { Click(&quot;son&quot;, &quot;true&quot;) }, true);\n        Father.addEventListener(&quot;click&quot;, function () { Click(&quot;father&quot;, &quot;true&quot;) }, true);\n        Father.addEventListener(&quot;click&quot;, function () { Click(&quot;father&quot;, &quot;false&quot;) }, false);\n        mather.addEventListener(&quot;click&quot;, function () { Click(&quot;mather&quot;, &quot;true&quot;) }, true);\n        mather.addEventListener(&quot;click&quot;, function () { Click(&quot;mather&quot;, &quot;false&quot;) }, false);  \n    &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n<p>输出：\nfather true clicked || mather true clicked || son false clicked || son true clicked || mather false clicked || father false clicked ||\n<br><br></p>\n<h4 id=\"ie浏览器兼容\">IE浏览器兼容</h4>\n<p>IE浏览器对addEventListener兼容性并不算太好，只有IE9以上可以使用。要兼容旧版本的IE浏览器，可以使用IE的attachEvent函数</p>\n<p><code>object.attachEvent(event, function)</code></p>\n<p>两个参数与<code>addEventListener</code>相似，分别是事件和处理函数，默认是事件冒泡阶段调用处理函数，要注意的是，写事件名时候要加上&quot;<code>on</code>&quot;前缀（&quot;<code>onload</code>&quot;、&quot;<code>onclick</code>&quot;等）。</p>\n"},"next":{"path":"_blogs/JS/JS函数与闭包/README.md","url":"/blog/JS/JS函数与闭包","title":"JS函数与闭包","author":"yrobot","keywords":"闭包,JS,函数","createTime":1535040000000,"length":1919,"content":"<p><strong>本页目录：</strong><br><a href=\"#func\">JS函数</a><br><a href=\"#bibao\">闭包</a>  </p>\n<p><a id='func'></a></p>\n<h2 id=\"js函数\">JS函数</h2>\n<h4 id=\"1-js函数的scope\">1. <strong>js函数的[[scope]]</strong></h4>\n<ul>\n<li>每个javascript函数都是一个对象，对象中有些属性我们可以访问，但有些仅供javascript引擎存取，比如[[scope]]，他就是我们所指的作用域，其中储存了 __运行期上下文的集合__。</li>\n<li>可以将[[scope]]理解为函数仓库链，函数寻找变量的时候就根据这个链来查找。  </li>\n</ul>\n<h4 id=\"2-运行期上下文\">2. <strong>运行期上下文</strong></h4>\n<ul>\n<li>函数执行前创建的对象（AO=运行期上下文：理解为本函数自带的仓库），用于定义函数运行时的环境。函数被多次调用时，会创建多个运行期上下文。</li>\n<li>当函数执行完毕，其运行期上下文引用被自动销毁（只是切断引用，其AO仍然存在，AO只有在没有被函数链接时才被回收）。</li>\n</ul>\n<h4 id=\"3-运行期上下文如何从内存中销毁\">3. <strong>运行期上下文如何从内存中销毁</strong></h4>\n<ul>\n<li>当此上下文没有被任何函数链接时，js引擎会自动将其回收。但只要还有函数在引用此上下文（存在闭包的情况），则此上下文不会被回收。</li>\n<li>所以只要通过 <strong>将闭包变量设置为等于null</strong> 解除该函数（以及其上下文）的引用，就等于通知垃圾回收例程将其清除。</li>\n</ul>\n<h4 id=\"4-函数如何查找变量\">4. <strong>函数如何查找变量</strong></h4>\n<ul>\n<li>从[[scope]]作用域链的顶端开始向下查找。即从自身\b的执行器上下文开始找变量，未找到则转向[[scope]]的下一个上下文。 </li>\n</ul>\n<h4 id=\"例子\">例子</h4>\n<ul>\n<li><p>例1：<br><img src=\"https://ws4.sinaimg.cn/large/006tNbRwgy1fukrtxws7nj30jf0o0n3w.jpg\" alt=\"\"><br><img src=\"https://ws3.sinaimg.cn/large/006tNbRwgy1fukru71y2pj30s30lhqpc.jpg\" alt=\"\"><br><img src=\"https://ws4.sinaimg.cn/large/006tNbRwgy1fukrucycgnj30tl0nekhv.jpg\" alt=\"\">  </p>\n</li>\n<li><p>例2：<br><img src=\"https://ws4.sinaimg.cn/large/006tNbRwgy1fukrw1ajtzj30ki0m2wr1.jpg\" alt=\"\"><br><img src=\"https://ws4.sinaimg.cn/large/006tNbRwgy1fukrw1ajtzj30ki0m2wr1.jpg\" alt=\"\">  </p>\n</li>\n</ul>\n<p><a id='bibao'></a></p>\n<h2 id=\"闭包\">闭包</h2>\n<ul>\n<li><strong>闭包是指 有权访问另一个函数作用域中的变量 的函数</strong>  </li>\n<li>由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成“定义在一个函数内部的函数”。所以，在本质上，__闭包就是将函数内部和函数外部连接起来的一座桥梁__。\n```\nfunction createComparisonFunction(propertyName) {\nreturn function (object1, object2) {\n  var value1 = object1[propertyName];\n  var value2 = object2[propertyName];\n  if (value1 &lt; value2) {<pre><code>return -1;\n</code></pre>\n  } else if (value1 &gt; value2) {<pre><code>return 1;\n</code></pre>\n  } else {<pre><code>return 0;\n</code></pre>\n  }\n};\n}</li>\n</ul>\n<p>//创建函数 \nvar compareNames = createComparisonFunction(&quot;name&quot;);</p>\n<p>//调用函数 \nvar result = compareNames({name: &quot;Nicholas&quot;}, {name: &quot;Greg&quot;});</p>\n<p>//解除对匿名函数的引用（以便释放内存）\ncompareNames = null;</p>\n<pre><code>\n#### 闭包作用：\n  1. 实现公有变量  \n  2. 可以做缓存  \n  3. 可以实现封装，属性私有化  \n  4. 模块化开发，防止污染全局变量   \n\n#### 闭包注意点：\n  1. 由于闭包会携带包含它的函数的作用域，因此会比其他函数占用更多的内存。过度使用闭包可能会导致内存占用过多，造成内存泄漏。  \n  2. 作用域链的这种配置机制引出了一个值得注意的副作用，即闭包只能取得包含函数中任何变量的后一个值。  \n\n</code></pre>\n"}},"__N_SSG":true}